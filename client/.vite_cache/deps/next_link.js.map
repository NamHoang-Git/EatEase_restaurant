{
  "version": 3,
  "sources": ["../../node_modules/next/src/shared/lib/router/utils/querystring.ts", "../../node_modules/next/src/shared/lib/router/utils/format-url.ts", "../../node_modules/next/src/shared/lib/router/utils/omit.ts", "../../node_modules/next/src/shared/lib/utils.ts", "../../node_modules/next/src/shared/lib/router/utils/remove-trailing-slash.ts", "../../node_modules/next/src/shared/lib/router/utils/parse-path.ts", "../../node_modules/next/src/client/normalize-trailing-slash.ts", "../../node_modules/next/src/shared/lib/router/utils/path-has-prefix.ts", "../../node_modules/next/src/client/has-base-path.ts", "../../node_modules/next/src/shared/lib/router/utils/is-local-url.ts", "../../node_modules/next/src/shared/lib/router/utils/sorted-routes.ts", "../../node_modules/next/src/shared/lib/page-path/ensure-leading-slash.ts", "../../node_modules/next/src/shared/lib/router/utils/app-paths.ts", "../../node_modules/next/src/shared/lib/router/utils/interception-routes.ts", "../../node_modules/next/src/shared/lib/router/utils/is-dynamic.ts", "../../node_modules/next/src/shared/lib/router/utils/index.ts", "../../node_modules/next/dist/compiled/path-to-regexp/index.js", "../../node_modules/next/src/lib/route-pattern-normalizer.ts", "../../node_modules/next/src/shared/lib/router/utils/route-match-utils.ts", "../../node_modules/next/src/shared/lib/router/utils/route-matcher.ts", "../../node_modules/next/src/lib/constants.ts", "../../node_modules/next/src/shared/lib/escape-regexp.ts", "../../node_modules/next/src/shared/lib/router/utils/parse-loader-tree.ts", "../../node_modules/next/src/shared/lib/router/utils/get-segment-param.tsx", "../../node_modules/next/src/shared/lib/router/utils/get-dynamic-param.ts", "../../node_modules/next/src/shared/lib/router/utils/route-regex.ts", "../../node_modules/next/src/shared/lib/router/utils/interpolate-as.ts", "../../node_modules/next/src/client/resolve-href.ts", "../../node_modules/next/src/shared/lib/router/utils/add-path-prefix.ts", "../../node_modules/next/src/shared/lib/router/utils/add-locale.ts", "../../node_modules/next/src/client/add-locale.ts", "../../node_modules/next/src/shared/lib/router-context.shared-runtime.ts", "../../node_modules/next/src/client/request-idle-callback.ts", "../../node_modules/next/src/client/use-intersection.tsx", "../../node_modules/next/src/shared/lib/i18n/normalize-locale-path.ts", "../../node_modules/next/src/client/normalize-locale-path.ts", "../../node_modules/next/src/shared/lib/i18n/detect-domain-locale.ts", "../../node_modules/next/src/client/detect-domain-locale.ts", "../../node_modules/next/src/client/get-domain-locale.ts", "../../node_modules/next/src/client/add-base-path.ts", "../../node_modules/next/src/client/use-merged-ref.ts", "../../node_modules/next/src/shared/lib/utils/error-once.ts", "../../node_modules/next/src/client/link.tsx", "../../node_modules/next/link.js"],
  "sourcesContent": ["import type { ParsedUrlQuery } from 'querystring'\n\nexport function searchParamsToUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  const query: ParsedUrlQuery = {}\n  for (const [key, value] of searchParams.entries()) {\n    const existing = query[key]\n    if (typeof existing === 'undefined') {\n      query[key] = value\n    } else if (Array.isArray(existing)) {\n      existing.push(value)\n    } else {\n      query[key] = [existing, value]\n    }\n  }\n  return query\n}\n\nfunction stringifyUrlQueryParam(param: unknown): string {\n  if (typeof param === 'string') {\n    return param\n  }\n\n  if (\n    (typeof param === 'number' && !isNaN(param)) ||\n    typeof param === 'boolean'\n  ) {\n    return String(param)\n  } else {\n    return ''\n  }\n}\n\nexport function urlQueryToSearchParams(query: ParsedUrlQuery): URLSearchParams {\n  const searchParams = new URLSearchParams()\n  for (const [key, value] of Object.entries(query)) {\n    if (Array.isArray(value)) {\n      for (const item of value) {\n        searchParams.append(key, stringifyUrlQueryParam(item))\n      }\n    } else {\n      searchParams.set(key, stringifyUrlQueryParam(value))\n    }\n  }\n  return searchParams\n}\n\nexport function assign(\n  target: URLSearchParams,\n  ...searchParamsList: URLSearchParams[]\n): URLSearchParams {\n  for (const searchParams of searchParamsList) {\n    for (const key of searchParams.keys()) {\n      target.delete(key)\n    }\n\n    for (const [key, value] of searchParams.entries()) {\n      target.append(key, value)\n    }\n  }\n\n  return target\n}\n", "// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport type { UrlObject } from 'url'\nimport type { ParsedUrlQuery } from 'querystring'\nimport * as querystring from './querystring'\n\nconst slashedProtocols = /https?|ftp|gopher|file/\n\nexport function formatUrl(urlObj: UrlObject) {\n  let { auth, hostname } = urlObj\n  let protocol = urlObj.protocol || ''\n  let pathname = urlObj.pathname || ''\n  let hash = urlObj.hash || ''\n  let query = urlObj.query || ''\n  let host: string | false = false\n\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : ''\n\n  if (urlObj.host) {\n    host = auth + urlObj.host\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname)\n    if (urlObj.port) {\n      host += ':' + urlObj.port\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    query = String(querystring.urlQueryToSearchParams(query as ParsedUrlQuery))\n  }\n\n  let search = urlObj.search || (query && `?${query}`) || ''\n\n  if (protocol && !protocol.endsWith(':')) protocol += ':'\n\n  if (\n    urlObj.slashes ||\n    ((!protocol || slashedProtocols.test(protocol)) && host !== false)\n  ) {\n    host = '//' + (host || '')\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname\n  } else if (!host) {\n    host = ''\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash\n  if (search && search[0] !== '?') search = '?' + search\n\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent)\n  search = search.replace('#', '%23')\n\n  return `${protocol}${host}${pathname}${search}${hash}`\n}\n\nexport const urlObjectKeys = [\n  'auth',\n  'hash',\n  'host',\n  'hostname',\n  'href',\n  'path',\n  'pathname',\n  'port',\n  'protocol',\n  'query',\n  'search',\n  'slashes',\n]\n\nexport function formatWithValidation(url: UrlObject): string {\n  if (process.env.NODE_ENV === 'development') {\n    if (url !== null && typeof url === 'object') {\n      Object.keys(url).forEach((key) => {\n        if (!urlObjectKeys.includes(key)) {\n          console.warn(\n            `Unknown key passed via urlObject into url.format: ${key}`\n          )\n        }\n      })\n    }\n  }\n\n  return formatUrl(url)\n}\n", "export function omit<T extends { [key: string]: unknown }, K extends keyof T>(\n  object: T,\n  keys: K[]\n): Omit<T, K> {\n  const omitted: { [key: string]: unknown } = {}\n  Object.keys(object).forEach((key) => {\n    if (!keys.includes(key as K)) {\n      omitted[key] = object[key]\n    }\n  })\n  return omitted as Omit<T, K>\n}\n", "import type { HtmlProps } from './html-context.shared-runtime'\nimport type { ComponentType, JSX } from 'react'\nimport type { DomainLocale } from '../../server/config'\nimport type { Env } from '@next/env'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport type { NextRouter } from './router/router'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { PreviewData } from '../../types'\nimport type { COMPILER_NAMES } from './constants'\nimport type fs from 'fs'\n\nexport type NextComponentType<\n  Context extends BaseContext = NextPageContext,\n  InitialProps = {},\n  Props = {},\n> = ComponentType<Props> & {\n  /**\n   * Used for initial page load data population. Data returned from `getInitialProps` is serialized when server rendered.\n   * Make sure to return plain `Object` without using `Date`, `Map`, `Set`.\n   * @param context Context of `page`\n   */\n  getInitialProps?(context: Context): InitialProps | Promise<InitialProps>\n}\n\nexport type DocumentType = NextComponentType<\n  DocumentContext,\n  DocumentInitialProps,\n  DocumentProps\n>\n\nexport type AppType<P = {}> = NextComponentType<\n  AppContextType,\n  P,\n  AppPropsType<any, P>\n>\n\nexport type AppTreeType = ComponentType<\n  AppInitialProps & { [name: string]: any }\n>\n\n/**\n * Web vitals provided to _app.reportWebVitals by Core Web Vitals plugin developed by Google Chrome team.\n * https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting\n */\nexport const WEB_VITALS = ['CLS', 'FCP', 'FID', 'INP', 'LCP', 'TTFB'] as const\nexport type NextWebVitalsMetric = {\n  id: string\n  startTime: number\n  value: number\n  attribution?: { [key: string]: unknown }\n} & (\n  | {\n      label: 'web-vital'\n      name: (typeof WEB_VITALS)[number]\n    }\n  | {\n      label: 'custom'\n      name:\n        | 'Next.js-hydration'\n        | 'Next.js-route-change-to-render'\n        | 'Next.js-render'\n    }\n)\n\nexport type Enhancer<C> = (Component: C) => C\n\nexport type ComponentsEnhancer =\n  | {\n      enhanceApp?: Enhancer<AppType>\n      enhanceComponent?: Enhancer<NextComponentType>\n    }\n  | Enhancer<NextComponentType>\n\nexport type RenderPageResult = {\n  html: string\n  head?: Array<JSX.Element | null>\n}\n\nexport type RenderPage = (\n  options?: ComponentsEnhancer\n) => DocumentInitialProps | Promise<DocumentInitialProps>\n\nexport type BaseContext = {\n  res?: ServerResponse\n  [k: string]: any\n}\n\nexport type NEXT_DATA = {\n  props: Record<string, any>\n  page: string\n  query: ParsedUrlQuery\n  buildId: string\n  assetPrefix?: string\n  nextExport?: boolean\n  autoExport?: boolean\n  isFallback?: boolean\n  isExperimentalCompile?: boolean\n  dynamicIds?: (string | number)[]\n  err?: Error & {\n    statusCode?: number\n    source?: typeof COMPILER_NAMES.server | typeof COMPILER_NAMES.edgeServer\n  }\n  gsp?: boolean\n  gssp?: boolean\n  customServer?: boolean\n  gip?: boolean\n  appGip?: boolean\n  locale?: string\n  locales?: readonly string[]\n  defaultLocale?: string\n  domainLocales?: readonly DomainLocale[]\n  scriptLoader?: any[]\n  isPreview?: boolean\n  notFoundSrcPage?: string\n}\n\n/**\n * `Next` context\n */\nexport interface NextPageContext {\n  /**\n   * Error object if encountered during rendering\n   */\n  err?: (Error & { statusCode?: number }) | null\n  /**\n   * `HTTP` request object.\n   */\n  req?: IncomingMessage\n  /**\n   * `HTTP` response object.\n   */\n  res?: ServerResponse\n  /**\n   * Path section of `URL`.\n   */\n  pathname: string\n  /**\n   * Query string section of `URL` parsed as an object.\n   */\n  query: ParsedUrlQuery\n  /**\n   * `String` of the actual path including query.\n   */\n  asPath?: string\n  /**\n   * The currently active locale\n   */\n  locale?: string\n  /**\n   * All configured locales\n   */\n  locales?: readonly string[]\n  /**\n   * The configured default locale\n   */\n  defaultLocale?: string\n  /**\n   * `Component` the tree of the App to use if needing to render separately\n   */\n  AppTree: AppTreeType\n}\n\nexport type AppContextType<Router extends NextRouter = NextRouter> = {\n  Component: NextComponentType<NextPageContext>\n  AppTree: AppTreeType\n  ctx: NextPageContext\n  router: Router\n}\n\nexport type AppInitialProps<PageProps = any> = {\n  pageProps: PageProps\n}\n\nexport type AppPropsType<\n  Router extends NextRouter = NextRouter,\n  PageProps = {},\n> = AppInitialProps<PageProps> & {\n  Component: NextComponentType<NextPageContext, any, any>\n  router: Router\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n}\n\nexport type DocumentContext = NextPageContext & {\n  renderPage: RenderPage\n  defaultGetInitialProps(\n    ctx: DocumentContext,\n    options?: { nonce?: string }\n  ): Promise<DocumentInitialProps>\n}\n\nexport type DocumentInitialProps = RenderPageResult & {\n  styles?: React.ReactElement[] | Iterable<React.ReactNode> | JSX.Element\n}\n\nexport type DocumentProps = DocumentInitialProps & HtmlProps\n\n/**\n * Next `API` route request\n */\nexport interface NextApiRequest extends IncomingMessage {\n  /**\n   * Object of `query` values from url\n   */\n  query: Partial<{\n    [key: string]: string | string[]\n  }>\n  /**\n   * Object of `cookies` from header\n   */\n  cookies: Partial<{\n    [key: string]: string\n  }>\n\n  body: any\n\n  env: Env\n\n  draftMode?: boolean\n\n  preview?: boolean\n  /**\n   * Preview data set on the request, if any\n   * */\n  previewData?: PreviewData\n}\n\n/**\n * Send body of response\n */\ntype Send<T> = (body: T) => void\n\n/**\n * Next `API` route response\n */\nexport type NextApiResponse<Data = any> = ServerResponse & {\n  /**\n   * Send data `any` data in response\n   */\n  send: Send<Data>\n  /**\n   * Send data `json` data in response\n   */\n  json: Send<Data>\n  status: (statusCode: number) => NextApiResponse<Data>\n  redirect(url: string): NextApiResponse<Data>\n  redirect(status: number, url: string): NextApiResponse<Data>\n\n  /**\n   * Set draft mode\n   */\n  setDraftMode: (options: { enable: boolean }) => NextApiResponse<Data>\n\n  /**\n   * Set preview data for Next.js' prerender mode\n   */\n  setPreviewData: (\n    data: object | string,\n    options?: {\n      /**\n       * Specifies the number (in seconds) for the preview session to last for.\n       * The given number will be converted to an integer by rounding down.\n       * By default, no maximum age is set and the preview session finishes\n       * when the client shuts down (browser is closed).\n       */\n      maxAge?: number\n      /**\n       * Specifies the path for the preview session to work under. By default,\n       * the path is considered the \"default path\", i.e., any pages under \"/\".\n       */\n      path?: string\n    }\n  ) => NextApiResponse<Data>\n\n  /**\n   * Clear preview data for Next.js' prerender mode\n   */\n  clearPreviewData: (options?: { path?: string }) => NextApiResponse<Data>\n\n  /**\n   * Revalidate a specific page and regenerate it using On-Demand Incremental\n   * Static Regeneration.\n   * The path should be an actual path, not a rewritten path. E.g. for\n   * \"/blog/[slug]\" this should be \"/blog/post-1\".\n   * @link https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration#on-demand-revalidation-with-revalidatepath\n   */\n  revalidate: (\n    urlPath: string,\n    opts?: {\n      unstable_onlyGenerated?: boolean\n    }\n  ) => Promise<void>\n}\n\n/**\n * Next `API` route handler\n */\nexport type NextApiHandler<T = any> = (\n  req: NextApiRequest,\n  res: NextApiResponse<T>\n) => unknown | Promise<unknown>\n\n/**\n * Utils\n */\nexport function execOnce<T extends (...args: any[]) => ReturnType<T>>(\n  fn: T\n): T {\n  let used = false\n  let result: ReturnType<T>\n\n  return ((...args: any[]) => {\n    if (!used) {\n      used = true\n      result = fn(...args)\n    }\n    return result\n  }) as T\n}\n\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/\nexport const isAbsoluteUrl = (url: string) => ABSOLUTE_URL_REGEX.test(url)\n\nexport function getLocationOrigin() {\n  const { protocol, hostname, port } = window.location\n  return `${protocol}//${hostname}${port ? ':' + port : ''}`\n}\n\nexport function getURL() {\n  const { href } = window.location\n  const origin = getLocationOrigin()\n  return href.substring(origin.length)\n}\n\nexport function getDisplayName<P>(Component: ComponentType<P>) {\n  return typeof Component === 'string'\n    ? Component\n    : Component.displayName || Component.name || 'Unknown'\n}\n\nexport function isResSent(res: ServerResponse) {\n  return res.finished || res.headersSent\n}\n\nexport function normalizeRepeatedSlashes(url: string) {\n  const urlParts = url.split('?')\n  const urlNoQuery = urlParts[0]\n\n  return (\n    urlNoQuery\n      // first we replace any non-encoded backslashes with forward\n      // then normalize repeated forward slashes\n      .replace(/\\\\/g, '/')\n      .replace(/\\/\\/+/g, '/') +\n    (urlParts[1] ? `?${urlParts.slice(1).join('?')}` : '')\n  )\n}\n\nexport async function loadGetInitialProps<\n  C extends BaseContext,\n  IP = {},\n  P = {},\n>(App: NextComponentType<C, IP, P>, ctx: C): Promise<IP> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (App.prototype?.getInitialProps) {\n      const message = `\"${getDisplayName(\n        App\n      )}.getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.`\n      throw new Error(message)\n    }\n  }\n  // when called from _app `ctx` is nested in `ctx`\n  const res = ctx.res || (ctx.ctx && ctx.ctx.res)\n\n  if (!App.getInitialProps) {\n    if (ctx.ctx && ctx.Component) {\n      // @ts-ignore pageProps default\n      return {\n        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx),\n      }\n    }\n    return {} as IP\n  }\n\n  const props = await App.getInitialProps(ctx)\n\n  if (res && isResSent(res)) {\n    return props\n  }\n\n  if (!props) {\n    const message = `\"${getDisplayName(\n      App\n    )}.getInitialProps()\" should resolve to an object. But found \"${props}\" instead.`\n    throw new Error(message)\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (Object.keys(props).length === 0 && !ctx.ctx) {\n      console.warn(\n        `${getDisplayName(\n          App\n        )} returned an empty object from \\`getInitialProps\\`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps`\n      )\n    }\n  }\n\n  return props\n}\n\nexport const SP = typeof performance !== 'undefined'\nexport const ST =\n  SP &&\n  (['mark', 'measure', 'getEntriesByName'] as const).every(\n    (method) => typeof performance[method] === 'function'\n  )\n\nexport class DecodeError extends Error {}\nexport class NormalizeError extends Error {}\nexport class PageNotFoundError extends Error {\n  code: string\n\n  constructor(page: string) {\n    super()\n    this.code = 'ENOENT'\n    this.name = 'PageNotFoundError'\n    this.message = `Cannot find module for page: ${page}`\n  }\n}\n\nexport class MissingStaticPage extends Error {\n  constructor(page: string, message: string) {\n    super()\n    this.message = `Failed to load static file for page: ${page} ${message}`\n  }\n}\n\nexport class MiddlewareNotFoundError extends Error {\n  code: string\n  constructor() {\n    super()\n    this.code = 'ENOENT'\n    this.message = `Cannot find the middleware module`\n  }\n}\n\nexport interface CacheFs {\n  existsSync: typeof fs.existsSync\n  readFile: typeof fs.promises.readFile\n  readFileSync: typeof fs.readFileSync\n  writeFile(f: string, d: any): Promise<void>\n  mkdir(dir: string): Promise<void | string>\n  stat(f: string): Promise<{ mtime: Date }>\n}\n\nexport function stringifyError(error: Error) {\n  return JSON.stringify({ message: error.message, stack: error.stack })\n}\n", "/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */\nexport function removeTrailingSlash(route: string) {\n  return route.replace(/\\/$/, '') || '/'\n}\n", "/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */\nexport function parsePath(path: string) {\n  const hashIndex = path.indexOf('#')\n  const queryIndex = path.indexOf('?')\n  const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex)\n\n  if (hasQuery || hashIndex > -1) {\n    return {\n      pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n      query: hasQuery\n        ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined)\n        : '',\n      hash: hashIndex > -1 ? path.slice(hashIndex) : '',\n    }\n  }\n\n  return { pathname: path, query: '', hash: '' }\n}\n", "import { removeTrailingSlash } from '../shared/lib/router/utils/remove-trailing-slash'\nimport { parsePath } from '../shared/lib/router/utils/parse-path'\n\n/**\n * Normalizes the trailing slash of a path according to the `trailingSlash` option\n * in `next.config.js`.\n */\nexport const normalizePathTrailingSlash = (path: string) => {\n  if (!path.startsWith('/') || process.env.__NEXT_MANUAL_TRAILING_SLASH) {\n    return path\n  }\n\n  const { pathname, query, hash } = parsePath(path)\n  if (process.env.__NEXT_TRAILING_SLASH) {\n    if (/\\.[^/]+\\/?$/.test(pathname)) {\n      return `${removeTrailingSlash(pathname)}${query}${hash}`\n    } else if (pathname.endsWith('/')) {\n      return `${pathname}${query}${hash}`\n    } else {\n      return `${pathname}/${query}${hash}`\n    }\n  }\n\n  return `${removeTrailingSlash(pathname)}${query}${hash}`\n}\n", "import { parsePath } from './parse-path'\n\n/**\n * Checks if a given path starts with a given prefix. It ensures it matches\n * exactly without containing extra chars. e.g. prefix /docs should replace\n * for /docs, /docs/, /docs/a but not /docsss\n * @param path The path to check.\n * @param prefix The prefix to check against.\n */\nexport function pathHasPrefix(path: string, prefix: string) {\n  if (typeof path !== 'string') {\n    return false\n  }\n\n  const { pathname } = parsePath(path)\n  return pathname === prefix || pathname.startsWith(prefix + '/')\n}\n", "import { pathHasPrefix } from '../shared/lib/router/utils/path-has-prefix'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function hasBasePath(path: string): boolean {\n  return pathHasPrefix(path, basePath)\n}\n", "import { isAbsoluteUrl, getLocationOrigin } from '../../utils'\nimport { hasBasePath } from '../../../../client/has-base-path'\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (!isAbsoluteUrl(url)) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n", "class UrlNode {\n  placeholder: boolean = true\n  children: Map<string, UrlNode> = new Map()\n  slugName: string | null = null\n  restSlugName: string | null = null\n  optionalRestSlugName: string | null = null\n\n  insert(urlPath: string): void {\n    this._insert(urlPath.split('/').filter(Boolean), [], false)\n  }\n\n  smoosh(): string[] {\n    return this._smoosh()\n  }\n\n  private _smoosh(prefix: string = '/'): string[] {\n    const childrenPaths = [...this.children.keys()].sort()\n    if (this.slugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[]'), 1)\n    }\n    if (this.restSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[...]'), 1)\n    }\n    if (this.optionalRestSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[[...]]'), 1)\n    }\n\n    const routes = childrenPaths\n      .map((c) => this.children.get(c)!._smoosh(`${prefix}${c}/`))\n      .reduce((prev, curr) => [...prev, ...curr], [])\n\n    if (this.slugName !== null) {\n      routes.push(\n        ...this.children.get('[]')!._smoosh(`${prefix}[${this.slugName}]/`)\n      )\n    }\n\n    if (!this.placeholder) {\n      const r = prefix === '/' ? '/' : prefix.slice(0, -1)\n      if (this.optionalRestSlugName != null) {\n        throw new Error(\n          `You cannot define a route with the same specificity as a optional catch-all route (\"${r}\" and \"${r}[[...${this.optionalRestSlugName}]]\").`\n        )\n      }\n\n      routes.unshift(r)\n    }\n\n    if (this.restSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[...]')!\n          ._smoosh(`${prefix}[...${this.restSlugName}]/`)\n      )\n    }\n\n    if (this.optionalRestSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[[...]]')!\n          ._smoosh(`${prefix}[[...${this.optionalRestSlugName}]]/`)\n      )\n    }\n\n    return routes\n  }\n\n  private _insert(\n    urlPaths: string[],\n    slugNames: string[],\n    isCatchAll: boolean\n  ): void {\n    if (urlPaths.length === 0) {\n      this.placeholder = false\n      return\n    }\n\n    if (isCatchAll) {\n      throw new Error(`Catch-all must be the last part of the URL.`)\n    }\n\n    // The next segment in the urlPaths list\n    let nextSegment = urlPaths[0]\n\n    // Check if the segment matches `[something]`\n    if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n      // Strip `[` and `]`, leaving only `something`\n      let segmentName = nextSegment.slice(1, -1)\n\n      let isOptional = false\n      if (segmentName.startsWith('[') && segmentName.endsWith(']')) {\n        // Strip optional `[` and `]`, leaving only `something`\n        segmentName = segmentName.slice(1, -1)\n        isOptional = true\n      }\n\n      if (segmentName.startsWith('…')) {\n        throw new Error(\n          `Detected a three-dot character ('…') at ('${segmentName}'). Did you mean ('...')?`\n        )\n      }\n\n      if (segmentName.startsWith('...')) {\n        // Strip `...`, leaving only `something`\n        segmentName = segmentName.substring(3)\n        isCatchAll = true\n      }\n\n      if (segmentName.startsWith('[') || segmentName.endsWith(']')) {\n        throw new Error(\n          `Segment names may not start or end with extra brackets ('${segmentName}').`\n        )\n      }\n\n      if (segmentName.startsWith('.')) {\n        throw new Error(\n          `Segment names may not start with erroneous periods ('${segmentName}').`\n        )\n      }\n\n      function handleSlug(previousSlug: string | null, nextSlug: string) {\n        if (previousSlug !== null) {\n          // If the specific segment already has a slug but the slug is not `something`\n          // This prevents collisions like:\n          // pages/[post]/index.js\n          // pages/[id]/index.js\n          // Because currently multiple dynamic params on the same segment level are not supported\n          if (previousSlug !== nextSlug) {\n            // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n            throw new Error(\n              `You cannot use different slug names for the same dynamic path ('${previousSlug}' !== '${nextSlug}').`\n            )\n          }\n        }\n\n        slugNames.forEach((slug) => {\n          if (slug === nextSlug) {\n            throw new Error(\n              `You cannot have the same slug name \"${nextSlug}\" repeat within a single dynamic path`\n            )\n          }\n\n          if (slug.replace(/\\W/g, '') === nextSegment.replace(/\\W/g, '')) {\n            throw new Error(\n              `You cannot have the slug names \"${slug}\" and \"${nextSlug}\" differ only by non-word symbols within a single dynamic path`\n            )\n          }\n        })\n\n        slugNames.push(nextSlug)\n      }\n\n      if (isCatchAll) {\n        if (isOptional) {\n          if (this.restSlugName != null) {\n            throw new Error(\n              `You cannot use both an required and optional catch-all route at the same level (\"[...${this.restSlugName}]\" and \"${urlPaths[0]}\" ).`\n            )\n          }\n\n          handleSlug(this.optionalRestSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.optionalRestSlugName = segmentName\n          // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n          nextSegment = '[[...]]'\n        } else {\n          if (this.optionalRestSlugName != null) {\n            throw new Error(\n              `You cannot use both an optional and required catch-all route at the same level (\"[[...${this.optionalRestSlugName}]]\" and \"${urlPaths[0]}\").`\n            )\n          }\n\n          handleSlug(this.restSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.restSlugName = segmentName\n          // nextSegment is overwritten to [...] so that it can later be sorted specifically\n          nextSegment = '[...]'\n        }\n      } else {\n        if (isOptional) {\n          throw new Error(\n            `Optional route parameters are not yet supported (\"${urlPaths[0]}\").`\n          )\n        }\n        handleSlug(this.slugName, segmentName)\n        // slugName is kept as it can only be one particular slugName\n        this.slugName = segmentName\n        // nextSegment is overwritten to [] so that it can later be sorted specifically\n        nextSegment = '[]'\n      }\n    }\n\n    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n    if (!this.children.has(nextSegment)) {\n      this.children.set(nextSegment, new UrlNode())\n    }\n\n    this.children\n      .get(nextSegment)!\n      ._insert(urlPaths.slice(1), slugNames, isCatchAll)\n  }\n}\n\n/**\n * @deprecated Use `sortSortableRoutes` or `sortPages` instead.\n */\nexport function getSortedRoutes(\n  normalizedPages: ReadonlyArray<string>\n): string[] {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  const root = new UrlNode()\n\n  // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n  normalizedPages.forEach((pagePath) => root.insert(pagePath))\n  // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n  return root.smoosh()\n}\n\n/**\n * @deprecated Use `sortSortableRouteObjects` or `sortPageObjects` instead.\n */\nexport function getSortedRouteObjects<T>(\n  objects: T[],\n  getter: (obj: T) => string\n): T[] {\n  // We're assuming here that all the pathnames are unique, that way we can\n  // sort the list and use the index as the key.\n  const indexes: Record<string, number> = {}\n  const pathnames: string[] = []\n  for (let i = 0; i < objects.length; i++) {\n    const pathname = getter(objects[i])\n    indexes[pathname] = i\n    pathnames[i] = pathname\n  }\n\n  // Sort the pathnames.\n  const sorted = getSortedRoutes(pathnames)\n\n  // Map the sorted pathnames back to the original objects using the new sorted\n  // index.\n  return sorted.map((pathname) => objects[indexes[pathname]])\n}\n", "/**\n * For a given page path, this function ensures that there is a leading slash.\n * If there is not a leading slash, one is added, otherwise it is noop.\n */\nexport function ensureLeadingSlash(path: string) {\n  return path.startsWith('/') ? path : `/${path}`\n}\n", "import { ensureLeadingSlash } from '../../page-path/ensure-leading-slash'\nimport { isGroupSegment } from '../../segment'\n\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */\nexport function normalizeAppPath(route: string) {\n  return ensureLeadingSlash(\n    route.split('/').reduce((pathname, segment, index, segments) => {\n      // Empty segments are ignored.\n      if (!segment) {\n        return pathname\n      }\n\n      // Groups are ignored.\n      if (isGroupSegment(segment)) {\n        return pathname\n      }\n\n      // Parallel segments are ignored.\n      if (segment[0] === '@') {\n        return pathname\n      }\n\n      // The last segment (if it's a leaf) should be ignored.\n      if (\n        (segment === 'page' || segment === 'route') &&\n        index === segments.length - 1\n      ) {\n        return pathname\n      }\n\n      return `${pathname}/${segment}`\n    }, '')\n  )\n}\n\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */\nexport function normalizeRscURL(url: string) {\n  return url.replace(\n    /\\.rsc($|\\?)/,\n    // $1 ensures `?` is preserved\n    '$1'\n  )\n}\n", "import { normalizeAppPath } from './app-paths'\n\n// order matters here, the first match will be used\nexport const INTERCEPTION_ROUTE_MARKERS = [\n  '(..)(..)',\n  '(.)',\n  '(..)',\n  '(...)',\n] as const\n\nexport function isInterceptionRouteAppPath(path: string): boolean {\n  // TODO-APP: add more serious validation\n  return (\n    path\n      .split('/')\n      .find((segment) =>\n        INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n      ) !== undefined\n  )\n}\n\ntype InterceptionRouteInformation = {\n  /**\n   * The intercepting route. This is the route that is being intercepted or the\n   * route that the user was coming from. This is matched by the Next-Url\n   * header.\n   */\n  interceptingRoute: string\n\n  /**\n   * The intercepted route. This is the route that is being intercepted or the\n   * route that the user is going to. This is matched by the request pathname.\n   */\n  interceptedRoute: string\n}\n\nexport function extractInterceptionRouteInformation(\n  path: string\n): InterceptionRouteInformation {\n  let interceptingRoute: string | undefined\n  let marker: (typeof INTERCEPTION_ROUTE_MARKERS)[number] | undefined\n  let interceptedRoute: string | undefined\n\n  for (const segment of path.split('/')) {\n    marker = INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n    if (marker) {\n      ;[interceptingRoute, interceptedRoute] = path.split(marker, 2)\n      break\n    }\n  }\n\n  if (!interceptingRoute || !marker || !interceptedRoute) {\n    throw new Error(\n      `Invalid interception route: ${path}. Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>`\n    )\n  }\n\n  interceptingRoute = normalizeAppPath(interceptingRoute) // normalize the path, e.g. /(blog)/feed -> /feed\n\n  switch (marker) {\n    case '(.)':\n      // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route\n      if (interceptingRoute === '/') {\n        interceptedRoute = `/${interceptedRoute}`\n      } else {\n        interceptedRoute = interceptingRoute + '/' + interceptedRoute\n      }\n      break\n    case '(..)':\n      // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route\n      if (interceptingRoute === '/') {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..) marker at the root level, use (.) instead.`\n        )\n      }\n      interceptedRoute = interceptingRoute\n        .split('/')\n        .slice(0, -1)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    case '(...)':\n      // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route\n      interceptedRoute = '/' + interceptedRoute\n      break\n    case '(..)(..)':\n      // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route\n\n      const splitInterceptingRoute = interceptingRoute.split('/')\n      if (splitInterceptingRoute.length <= 2) {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..)(..) marker at the root level or one level up.`\n        )\n      }\n\n      interceptedRoute = splitInterceptingRoute\n        .slice(0, -2)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    default:\n      throw new Error('Invariant: unexpected marker')\n  }\n\n  return { interceptingRoute, interceptedRoute }\n}\n", "import {\n  extractInterceptionRouteInformation,\n  isInterceptionRouteAppPath,\n} from './interception-routes'\n\n// Identify /.*[param].*/ in route string\nconst TEST_ROUTE = /\\/[^/]*\\[[^/]+\\][^/]*(?=\\/|$)/\n\n// Identify /[param]/ in route string\nconst TEST_STRICT_ROUTE = /\\/\\[[^/]+\\](?=\\/|$)/\n\n/**\n * Check if a route is dynamic.\n *\n * @param route - The route to check.\n * @param strict - Whether to use strict mode which prohibits segments with prefixes/suffixes (default: true).\n * @returns Whether the route is dynamic.\n */\nexport function isDynamicRoute(route: string, strict: boolean = true): boolean {\n  if (isInterceptionRouteAppPath(route)) {\n    route = extractInterceptionRouteInformation(route).interceptedRoute\n  }\n\n  if (strict) {\n    return TEST_STRICT_ROUTE.test(route)\n  }\n\n  return TEST_ROUTE.test(route)\n}\n", "export { getSortedRoutes, getSortedRouteObjects } from './sorted-routes'\nexport { isDynamicRoute } from './is-dynamic'\n", "(()=>{\"use strict\";if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var e={};(()=>{var n=e;Object.defineProperty(n,\"__esModule\",{value:true});n.pathToRegexp=n.tokensToRegexp=n.regexpToFunction=n.match=n.tokensToFunction=n.compile=n.parse=void 0;function lexer(e){var n=[];var r=0;while(r<e.length){var t=e[r];if(t===\"*\"||t===\"+\"||t===\"?\"){n.push({type:\"MODIFIER\",index:r,value:e[r++]});continue}if(t===\"\\\\\"){n.push({type:\"ESCAPED_CHAR\",index:r++,value:e[r++]});continue}if(t===\"{\"){n.push({type:\"OPEN\",index:r,value:e[r++]});continue}if(t===\"}\"){n.push({type:\"CLOSE\",index:r,value:e[r++]});continue}if(t===\":\"){var a=\"\";var i=r+1;while(i<e.length){var o=e.charCodeAt(i);if(o>=48&&o<=57||o>=65&&o<=90||o>=97&&o<=122||o===95){a+=e[i++];continue}break}if(!a)throw new TypeError(\"Missing parameter name at \".concat(r));n.push({type:\"NAME\",index:r,value:a});r=i;continue}if(t===\"(\"){var c=1;var f=\"\";var i=r+1;if(e[i]===\"?\"){throw new TypeError('Pattern cannot start with \"?\" at '.concat(i))}while(i<e.length){if(e[i]===\"\\\\\"){f+=e[i++]+e[i++];continue}if(e[i]===\")\"){c--;if(c===0){i++;break}}else if(e[i]===\"(\"){c++;if(e[i+1]!==\"?\"){throw new TypeError(\"Capturing groups are not allowed at \".concat(i))}}f+=e[i++]}if(c)throw new TypeError(\"Unbalanced pattern at \".concat(r));if(!f)throw new TypeError(\"Missing pattern at \".concat(r));n.push({type:\"PATTERN\",index:r,value:f});r=i;continue}n.push({type:\"CHAR\",index:r,value:e[r++]})}n.push({type:\"END\",index:r,value:\"\"});return n}function parse(e,n){if(n===void 0){n={}}var r=lexer(e);var t=n.prefixes,a=t===void 0?\"./\":t,i=n.delimiter,o=i===void 0?\"/#?\":i;var c=[];var f=0;var u=0;var p=\"\";var tryConsume=function(e){if(u<r.length&&r[u].type===e)return r[u++].value};var mustConsume=function(e){var n=tryConsume(e);if(n!==undefined)return n;var t=r[u],a=t.type,i=t.index;throw new TypeError(\"Unexpected \".concat(a,\" at \").concat(i,\", expected \").concat(e))};var consumeText=function(){var e=\"\";var n;while(n=tryConsume(\"CHAR\")||tryConsume(\"ESCAPED_CHAR\")){e+=n}return e};var isSafe=function(e){for(var n=0,r=o;n<r.length;n++){var t=r[n];if(e.indexOf(t)>-1)return true}return false};var safePattern=function(e){var n=c[c.length-1];var r=e||(n&&typeof n===\"string\"?n:\"\");if(n&&!r){throw new TypeError('Must have text between two parameters, missing text after \"'.concat(n.name,'\"'))}if(!r||isSafe(r))return\"[^\".concat(escapeString(o),\"]+?\");return\"(?:(?!\".concat(escapeString(r),\")[^\").concat(escapeString(o),\"])+?\")};while(u<r.length){var v=tryConsume(\"CHAR\");var s=tryConsume(\"NAME\");var d=tryConsume(\"PATTERN\");if(s||d){var g=v||\"\";if(a.indexOf(g)===-1){p+=g;g=\"\"}if(p){c.push(p);p=\"\"}c.push({name:s||f++,prefix:g,suffix:\"\",pattern:d||safePattern(g),modifier:tryConsume(\"MODIFIER\")||\"\"});continue}var x=v||tryConsume(\"ESCAPED_CHAR\");if(x){p+=x;continue}if(p){c.push(p);p=\"\"}var h=tryConsume(\"OPEN\");if(h){var g=consumeText();var l=tryConsume(\"NAME\")||\"\";var m=tryConsume(\"PATTERN\")||\"\";var T=consumeText();mustConsume(\"CLOSE\");c.push({name:l||(m?f++:\"\"),pattern:l&&!m?safePattern(g):m,prefix:g,suffix:T,modifier:tryConsume(\"MODIFIER\")||\"\"});continue}mustConsume(\"END\")}return c}n.parse=parse;function compile(e,n){return tokensToFunction(parse(e,n),n)}n.compile=compile;function tokensToFunction(e,n){if(n===void 0){n={}}var r=flags(n);var t=n.encode,a=t===void 0?function(e){return e}:t,i=n.validate,o=i===void 0?true:i;var c=e.map((function(e){if(typeof e===\"object\"){return new RegExp(\"^(?:\".concat(e.pattern,\")$\"),r)}}));return function(n){var r=\"\";for(var t=0;t<e.length;t++){var i=e[t];if(typeof i===\"string\"){r+=i;continue}var f=n?n[i.name]:undefined;var u=i.modifier===\"?\"||i.modifier===\"*\";var p=i.modifier===\"*\"||i.modifier===\"+\";if(Array.isArray(f)){if(!p){throw new TypeError('Expected \"'.concat(i.name,'\" to not repeat, but got an array'))}if(f.length===0){if(u)continue;throw new TypeError('Expected \"'.concat(i.name,'\" to not be empty'))}for(var v=0;v<f.length;v++){var s=a(f[v],i);if(o&&!c[t].test(s)){throw new TypeError('Expected all \"'.concat(i.name,'\" to match \"').concat(i.pattern,'\", but got \"').concat(s,'\"'))}r+=i.prefix+s+i.suffix}continue}if(typeof f===\"string\"||typeof f===\"number\"){var s=a(String(f),i);if(o&&!c[t].test(s)){throw new TypeError('Expected \"'.concat(i.name,'\" to match \"').concat(i.pattern,'\", but got \"').concat(s,'\"'))}r+=i.prefix+s+i.suffix;continue}if(u)continue;var d=p?\"an array\":\"a string\";throw new TypeError('Expected \"'.concat(i.name,'\" to be ').concat(d))}return r}}n.tokensToFunction=tokensToFunction;function match(e,n){var r=[];var t=pathToRegexp(e,r,n);return regexpToFunction(t,r,n)}n.match=match;function regexpToFunction(e,n,r){if(r===void 0){r={}}var t=r.decode,a=t===void 0?function(e){return e}:t;return function(r){var t=e.exec(r);if(!t)return false;var i=t[0],o=t.index;var c=Object.create(null);var _loop_1=function(e){if(t[e]===undefined)return\"continue\";var r=n[e-1];if(r.modifier===\"*\"||r.modifier===\"+\"){c[r.name]=t[e].split(r.prefix+r.suffix).map((function(e){return a(e,r)}))}else{c[r.name]=a(t[e],r)}};for(var f=1;f<t.length;f++){_loop_1(f)}return{path:i,index:o,params:c}}}n.regexpToFunction=regexpToFunction;function escapeString(e){return e.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g,\"\\\\$1\")}function flags(e){return e&&e.sensitive?\"\":\"i\"}function regexpToRegexp(e,n){if(!n)return e;var r=/\\((?:\\?<(.*?)>)?(?!\\?)/g;var t=0;var a=r.exec(e.source);while(a){n.push({name:a[1]||t++,prefix:\"\",suffix:\"\",modifier:\"\",pattern:\"\"});a=r.exec(e.source)}return e}function arrayToRegexp(e,n,r){var t=e.map((function(e){return pathToRegexp(e,n,r).source}));return new RegExp(\"(?:\".concat(t.join(\"|\"),\")\"),flags(r))}function stringToRegexp(e,n,r){return tokensToRegexp(parse(e,r),n,r)}function tokensToRegexp(e,n,r){if(r===void 0){r={}}var t=r.strict,a=t===void 0?false:t,i=r.start,o=i===void 0?true:i,c=r.end,f=c===void 0?true:c,u=r.encode,p=u===void 0?function(e){return e}:u,v=r.delimiter,s=v===void 0?\"/#?\":v,d=r.endsWith,g=d===void 0?\"\":d;var x=\"[\".concat(escapeString(g),\"]|$\");var h=\"[\".concat(escapeString(s),\"]\");var l=o?\"^\":\"\";for(var m=0,T=e;m<T.length;m++){var E=T[m];if(typeof E===\"string\"){l+=escapeString(p(E))}else{var w=escapeString(p(E.prefix));var y=escapeString(p(E.suffix));if(E.pattern){if(n)n.push(E);if(w||y){if(E.modifier===\"+\"||E.modifier===\"*\"){var R=E.modifier===\"*\"?\"?\":\"\";l+=\"(?:\".concat(w,\"((?:\").concat(E.pattern,\")(?:\").concat(y).concat(w,\"(?:\").concat(E.pattern,\"))*)\").concat(y,\")\").concat(R)}else{l+=\"(?:\".concat(w,\"(\").concat(E.pattern,\")\").concat(y,\")\").concat(E.modifier)}}else{if(E.modifier===\"+\"||E.modifier===\"*\"){throw new TypeError('Can not repeat \"'.concat(E.name,'\" without a prefix and suffix'))}l+=\"(\".concat(E.pattern,\")\").concat(E.modifier)}}else{l+=\"(?:\".concat(w).concat(y,\")\").concat(E.modifier)}}}if(f){if(!a)l+=\"\".concat(h,\"?\");l+=!r.endsWith?\"$\":\"(?=\".concat(x,\")\")}else{var A=e[e.length-1];var _=typeof A===\"string\"?h.indexOf(A[A.length-1])>-1:A===undefined;if(!a){l+=\"(?:\".concat(h,\"(?=\").concat(x,\"))?\")}if(!_){l+=\"(?=\".concat(h,\"|\").concat(x,\")\")}}return new RegExp(l,flags(r))}n.tokensToRegexp=tokensToRegexp;function pathToRegexp(e,n,r){if(e instanceof RegExp)return regexpToRegexp(e,n);if(Array.isArray(e))return arrayToRegexp(e,n,r);return stringToRegexp(e,n,r)}n.pathToRegexp=pathToRegexp})();module.exports=e})();", "import type { Token } from 'next/dist/compiled/path-to-regexp'\n\n/**\n * Route pattern normalization utilities for path-to-regexp compatibility.\n *\n * path-to-regexp 6.3.0+ introduced stricter validation that rejects certain\n * patterns commonly used in Next.js interception routes. This module provides\n * normalization functions to make Next.js route patterns compatible with the\n * updated library while preserving all functionality.\n */\n\n/**\n * Internal separator used to normalize adjacent parameter patterns.\n * This unique marker is inserted between adjacent parameters and stripped out\n * during parameter extraction to avoid conflicts with real URL content.\n */\nexport const PARAM_SEPARATOR = '_NEXTSEP_'\n\n/**\n * Detects if a route pattern needs normalization for path-to-regexp compatibility.\n */\nexport function hasAdjacentParameterIssues(route: string): boolean {\n  if (typeof route !== 'string') return false\n\n  // Check for interception route markers followed immediately by parameters\n  // Pattern: /(.):param, /(..):param, /(...):param, /(.)(.):param etc.\n  // These patterns cause \"Must have text between two parameters\" errors\n  if (/\\/\\(\\.{1,3}\\):[^/\\s]+/.test(route)) {\n    return true\n  }\n\n  // Check for basic adjacent parameters without separators\n  // Pattern: :param1:param2 (but not :param* or other URL patterns)\n  if (/:[a-zA-Z_][a-zA-Z0-9_]*:[a-zA-Z_][a-zA-Z0-9_]*/.test(route)) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Normalizes route patterns that have adjacent parameters without text between them.\n * Inserts a unique separator that can be safely stripped out later.\n */\nexport function normalizeAdjacentParameters(route: string): string {\n  let normalized = route\n\n  // Handle interception route patterns: (.):param -> (.)_NEXTSEP_:param\n  normalized = normalized.replace(\n    /(\\([^)]*\\)):([^/\\s]+)/g,\n    `$1${PARAM_SEPARATOR}:$2`\n  )\n\n  // Handle other adjacent parameter patterns: :param1:param2 -> :param1_NEXTSEP_:param2\n  normalized = normalized.replace(/:([^:/\\s)]+)(?=:)/g, `:$1${PARAM_SEPARATOR}`)\n\n  return normalized\n}\n\n/**\n * Normalizes tokens that have repeating modifiers (* or +) but empty prefix and suffix.\n *\n * path-to-regexp 6.3.0+ introduced validation that throws:\n * \"Can not repeat without prefix/suffix\"\n *\n * This occurs when a token has modifier: '*' or '+' with both prefix: '' and suffix: ''\n */\nexport function normalizeTokensForRegexp(tokens: Token[]): Token[] {\n  return tokens.map((token) => {\n    // Token union type: Token = string | TokenObject\n    // Literal path segments are strings, parameters/wildcards are objects\n    if (\n      typeof token === 'object' &&\n      token !== null &&\n      // Not all token objects have 'modifier' property (e.g., simple text tokens)\n      'modifier' in token &&\n      // Only repeating modifiers (* or +) cause the validation error\n      // Other modifiers like '?' (optional) are fine\n      (token.modifier === '*' || token.modifier === '+') &&\n      // Token objects can have different shapes depending on route pattern\n      'prefix' in token &&\n      'suffix' in token &&\n      // Both prefix and suffix must be empty strings\n      // This is what causes the validation error in path-to-regexp\n      token.prefix === '' &&\n      token.suffix === ''\n    ) {\n      // Add minimal prefix to satisfy path-to-regexp validation\n      // We use '/' as it's the most common path delimiter and won't break route matching\n      // The prefix gets used in regex generation but doesn't affect parameter extraction\n      return {\n        ...token,\n        prefix: '/',\n      }\n    }\n    return token\n  })\n}\n\n/**\n * Strips normalization separators from compiled pathname.\n * This removes separators that were inserted by normalizeAdjacentParameters\n * to satisfy path-to-regexp validation.\n *\n * Only removes separators in the specific contexts where they were inserted:\n * - After interception route markers: (.)_NEXTSEP_ -> (.)\n *\n * This targeted approach ensures we don't accidentally remove the separator\n * from legitimate user content.\n */\nexport function stripNormalizedSeparators(pathname: string): string {\n  // Remove separator after interception route markers\n  // Pattern: (.)_NEXTSEP_ -> (.), (..)_NEXTSEP_ -> (..), etc.\n  // The separator appears after the closing paren of interception markers\n  return pathname.replace(new RegExp(`\\\\)${PARAM_SEPARATOR}`, 'g'), ')')\n}\n\n/**\n * Strips normalization separators from extracted route parameters.\n * Used by both server and client code to clean up parameters after route matching.\n */\nexport function stripParameterSeparators(\n  params: Record<string, any>\n): Record<string, any> {\n  const cleaned: Record<string, any> = {}\n\n  for (const [key, value] of Object.entries(params)) {\n    if (typeof value === 'string') {\n      // Remove the separator if it appears at the start of parameter values\n      cleaned[key] = value.replace(new RegExp(`^${PARAM_SEPARATOR}`), '')\n    } else if (Array.isArray(value)) {\n      // Handle array parameters (from repeated route segments)\n      cleaned[key] = value.map((item) =>\n        typeof item === 'string'\n          ? item.replace(new RegExp(`^${PARAM_SEPARATOR}`), '')\n          : item\n      )\n    } else {\n      cleaned[key] = value\n    }\n  }\n\n  return cleaned\n}\n", "/**\n * Client-safe utilities for route matching that don't import server-side\n * utilities to avoid bundling issues with Turbopack\n */\n\nimport type {\n  Key,\n  TokensToRegexpOptions,\n  ParseOptions,\n  TokensToFunctionOptions,\n} from 'next/dist/compiled/path-to-regexp'\nimport {\n  pathToRegexp,\n  compile,\n  regexpToFunction,\n} from 'next/dist/compiled/path-to-regexp'\nimport {\n  hasAdjacentParameterIssues,\n  normalizeAdjacentParameters,\n  stripParameterSeparators,\n  stripNormalizedSeparators,\n} from '../../../../lib/route-pattern-normalizer'\n\n/**\n * Client-safe wrapper around pathToRegexp that handles path-to-regexp 6.3.0+ validation errors.\n * This includes both \"Can not repeat without prefix/suffix\" and \"Must have text between parameters\" errors.\n */\nexport function safePathToRegexp(\n  route: string | RegExp | Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n): RegExp {\n  if (typeof route !== 'string') {\n    return pathToRegexp(route, keys, options)\n  }\n\n  // Check if normalization is needed and cache the result\n  const needsNormalization = hasAdjacentParameterIssues(route)\n  const routeToUse = needsNormalization\n    ? normalizeAdjacentParameters(route)\n    : route\n\n  try {\n    return pathToRegexp(routeToUse, keys, options)\n  } catch (error) {\n    // Only try normalization if we haven't already normalized\n    if (!needsNormalization) {\n      try {\n        const normalizedRoute = normalizeAdjacentParameters(route)\n        return pathToRegexp(normalizedRoute, keys, options)\n      } catch (retryError) {\n        // If that doesn't work, fall back to original error\n        throw error\n      }\n    }\n    throw error\n  }\n}\n\n/**\n * Client-safe wrapper around compile that handles path-to-regexp 6.3.0+ validation errors.\n * No server-side error reporting to avoid bundling issues.\n * When normalization is applied, the returned compiler function automatically strips\n * the internal separator from the output URL.\n */\nexport function safeCompile(\n  route: string,\n  options?: TokensToFunctionOptions & ParseOptions\n) {\n  // Check if normalization is needed and cache the result\n  const needsNormalization = hasAdjacentParameterIssues(route)\n  const routeToUse = needsNormalization\n    ? normalizeAdjacentParameters(route)\n    : route\n\n  try {\n    const compiler = compile(routeToUse, options)\n\n    // If we normalized the route, wrap the compiler to strip separators from output\n    // The normalization inserts _NEXTSEP_ as a literal string in the pattern to satisfy\n    // path-to-regexp validation, but we don't want it in the final compiled URL\n    if (needsNormalization) {\n      return (params: any) => {\n        return stripNormalizedSeparators(compiler(params))\n      }\n    }\n\n    return compiler\n  } catch (error) {\n    // Only try normalization if we haven't already normalized\n    if (!needsNormalization) {\n      try {\n        const normalizedRoute = normalizeAdjacentParameters(route)\n        const compiler = compile(normalizedRoute, options)\n\n        // Wrap the compiler to strip separators from output\n        return (params: any) => {\n          return stripNormalizedSeparators(compiler(params))\n        }\n      } catch (retryError) {\n        // If that doesn't work, fall back to original error\n        throw error\n      }\n    }\n    throw error\n  }\n}\n\n/**\n * Client-safe wrapper around regexpToFunction that automatically cleans parameters.\n */\nexport function safeRegexpToFunction<\n  T extends Record<string, any> = Record<string, any>,\n>(regexp: RegExp, keys?: Key[]): (pathname: string) => { params: T } | false {\n  const originalMatcher = regexpToFunction<T>(regexp, keys || [])\n\n  return (pathname: string) => {\n    const result = originalMatcher(pathname)\n    if (!result) return false\n\n    // Clean parameters before returning\n    return {\n      ...result,\n      params: stripParameterSeparators(result.params as any) as T,\n    }\n  }\n}\n\n/**\n * Safe wrapper for route matcher functions that automatically cleans parameters.\n * This is client-safe and doesn't import path-to-regexp.\n */\nexport function safeRouteMatcher<T extends Record<string, any>>(\n  matcherFn: (pathname: string) => false | T\n): (pathname: string) => false | T {\n  return (pathname: string) => {\n    const result = matcherFn(pathname)\n    if (!result) return false\n\n    // Clean parameters before returning\n    return stripParameterSeparators(result) as T\n  }\n}\n", "import type { Group } from './route-regex'\nimport { DecodeError } from '../../utils'\nimport type { Params } from '../../../../server/request/params'\nimport { safeRouteMatcher } from './route-match-utils'\n\nexport interface RouteMatchFn {\n  (pathname: string): false | Params\n}\n\ntype RouteMatcherOptions = {\n  // We only use the exec method of the RegExp object. This helps us avoid using\n  // type assertions that the passed in properties are of the correct type.\n  re: Pick<RegExp, 'exec'>\n  groups: Record<string, Group>\n}\n\nexport function getRouteMatcher({\n  re,\n  groups,\n}: RouteMatcherOptions): RouteMatchFn {\n  const rawMatcher = (pathname: string) => {\n    const routeMatch = re.exec(pathname)\n    if (!routeMatch) return false\n\n    const decode = (param: string) => {\n      try {\n        return decodeURIComponent(param)\n      } catch {\n        throw new DecodeError('failed to decode param')\n      }\n    }\n\n    const params: Params = {}\n    for (const [key, group] of Object.entries(groups)) {\n      const match = routeMatch[group.pos]\n      if (match !== undefined) {\n        if (group.repeat) {\n          params[key] = match.split('/').map((entry) => decode(entry))\n        } else {\n          params[key] = decode(match)\n        }\n      }\n    }\n\n    return params\n  }\n\n  // Wrap with safe matcher to handle parameter cleaning\n  return safeRouteMatcher(rawMatcher)\n}\n", "import type { ServerRuntime } from '../types'\n\nexport const TEXT_PLAIN_CONTENT_TYPE_HEADER = 'text/plain'\nexport const HTML_CONTENT_TYPE_HEADER = 'text/html; charset=utf-8'\nexport const JSON_CONTENT_TYPE_HEADER = 'application/json; charset=utf-8'\nexport const NEXT_QUERY_PARAM_PREFIX = 'nxtP'\nexport const NEXT_INTERCEPTION_MARKER_PREFIX = 'nxtI'\n\nexport const MATCHED_PATH_HEADER = 'x-matched-path'\nexport const PRERENDER_REVALIDATE_HEADER = 'x-prerender-revalidate'\nexport const PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER =\n  'x-prerender-revalidate-if-generated'\n\nexport const RSC_PREFETCH_SUFFIX = '.prefetch.rsc'\nexport const RSC_SEGMENTS_DIR_SUFFIX = '.segments'\nexport const RSC_SEGMENT_SUFFIX = '.segment.rsc'\nexport const RSC_SUFFIX = '.rsc'\nexport const ACTION_SUFFIX = '.action'\nexport const NEXT_DATA_SUFFIX = '.json'\nexport const NEXT_META_SUFFIX = '.meta'\nexport const NEXT_BODY_SUFFIX = '.body'\n\nexport const NEXT_CACHE_TAGS_HEADER = 'x-next-cache-tags'\nexport const NEXT_CACHE_REVALIDATED_TAGS_HEADER = 'x-next-revalidated-tags'\nexport const NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER =\n  'x-next-revalidate-tag-token'\n\nexport const NEXT_RESUME_HEADER = 'next-resume'\n\n// if these change make sure we update the related\n// documentation as well\nexport const NEXT_CACHE_TAG_MAX_ITEMS = 128\nexport const NEXT_CACHE_TAG_MAX_LENGTH = 256\nexport const NEXT_CACHE_SOFT_TAG_MAX_LENGTH = 1024\nexport const NEXT_CACHE_IMPLICIT_TAG_ID = '_N_T_'\n\n// in seconds\nexport const CACHE_ONE_YEAR = 31536000\n\n// in seconds, represents revalidate=false. I.e. never revaliate.\n// We use this value since it can be represented as a V8 SMI for optimal performance.\n// It can also be serialized as JSON if it ever leaks accidentally as an actual value.\nexport const INFINITE_CACHE = 0xfffffffe\n\n// Patterns to detect middleware files\nexport const MIDDLEWARE_FILENAME = 'middleware'\nexport const MIDDLEWARE_LOCATION_REGEXP = `(?:src/)?${MIDDLEWARE_FILENAME}`\n\n// Patterns to detect proxy files (replacement for middleware)\nexport const PROXY_FILENAME = 'proxy'\nexport const PROXY_LOCATION_REGEXP = `(?:src/)?${PROXY_FILENAME}`\n\n// Pattern to detect instrumentation hooks file\nexport const INSTRUMENTATION_HOOK_FILENAME = 'instrumentation'\n\n// Because on Windows absolute paths in the generated code can break because of numbers, eg 1 in the path,\n// we have to use a private alias\nexport const PAGES_DIR_ALIAS = 'private-next-pages'\nexport const DOT_NEXT_ALIAS = 'private-dot-next'\nexport const ROOT_DIR_ALIAS = 'private-next-root-dir'\nexport const APP_DIR_ALIAS = 'private-next-app-dir'\nexport const RSC_MOD_REF_PROXY_ALIAS = 'private-next-rsc-mod-ref-proxy'\nexport const RSC_ACTION_VALIDATE_ALIAS = 'private-next-rsc-action-validate'\nexport const RSC_ACTION_PROXY_ALIAS = 'private-next-rsc-server-reference'\nexport const RSC_CACHE_WRAPPER_ALIAS = 'private-next-rsc-cache-wrapper'\nexport const RSC_DYNAMIC_IMPORT_WRAPPER_ALIAS =\n  'private-next-rsc-track-dynamic-import'\nexport const RSC_ACTION_ENCRYPTION_ALIAS = 'private-next-rsc-action-encryption'\nexport const RSC_ACTION_CLIENT_WRAPPER_ALIAS =\n  'private-next-rsc-action-client-wrapper'\n\nexport const PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict`\n\nexport const SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps`\n\nexport const SERVER_PROPS_GET_INIT_PROPS_CONFLICT = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`\n\nexport const SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`\n\nexport const STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props`\n\nexport const SERVER_PROPS_EXPORT_ERROR = `pages with \\`getServerSideProps\\` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export`\n\nexport const GSP_NO_RETURNED_VALUE =\n  'Your `getStaticProps` function did not return an object. Did you forget to add a `return`?'\nexport const GSSP_NO_RETURNED_VALUE =\n  'Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?'\n\nexport const UNSTABLE_REVALIDATE_RENAME_ERROR =\n  'The `unstable_revalidate` property is available for general use.\\n' +\n  'Please use `revalidate` instead.'\n\nexport const GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`\n\nexport const NON_STANDARD_NODE_ENV = `You are using a non-standard \"NODE_ENV\" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`\n\nexport const SSG_FALLBACK_EXPORT_ERROR = `Pages with \\`fallback\\` enabled in \\`getStaticPaths\\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`\n\nexport const ESLINT_DEFAULT_DIRS = ['app', 'pages', 'components', 'lib', 'src']\n\nexport const SERVER_RUNTIME: Record<string, ServerRuntime> = {\n  edge: 'edge',\n  experimentalEdge: 'experimental-edge',\n  nodejs: 'nodejs',\n}\n\nexport const WEB_SOCKET_MAX_RECONNECTIONS = 12\n\n/**\n * The names of the webpack layers. These layers are the primitives for the\n * webpack chunks.\n */\nconst WEBPACK_LAYERS_NAMES = {\n  /**\n   * The layer for the shared code between the client and server bundles.\n   */\n  shared: 'shared',\n  /**\n   * The layer for server-only runtime and picking up `react-server` export conditions.\n   * Including app router RSC pages and app router custom routes and metadata routes.\n   */\n  reactServerComponents: 'rsc',\n  /**\n   * Server Side Rendering layer for app (ssr).\n   */\n  serverSideRendering: 'ssr',\n  /**\n   * The browser client bundle layer for actions.\n   */\n  actionBrowser: 'action-browser',\n  /**\n   * The Node.js bundle layer for the API routes.\n   */\n  apiNode: 'api-node',\n  /**\n   * The Edge Lite bundle layer for the API routes.\n   */\n  apiEdge: 'api-edge',\n  /**\n   * The layer for the middleware code.\n   */\n  middleware: 'middleware',\n  /**\n   * The layer for the instrumentation hooks.\n   */\n  instrument: 'instrument',\n  /**\n   * The layer for assets on the edge.\n   */\n  edgeAsset: 'edge-asset',\n  /**\n   * The browser client bundle layer for App directory.\n   */\n  appPagesBrowser: 'app-pages-browser',\n  /**\n   * The browser client bundle layer for Pages directory.\n   */\n  pagesDirBrowser: 'pages-dir-browser',\n  /**\n   * The Edge Lite bundle layer for Pages directory.\n   */\n  pagesDirEdge: 'pages-dir-edge',\n  /**\n   * The Node.js bundle layer for Pages directory.\n   */\n  pagesDirNode: 'pages-dir-node',\n} as const\n\nexport type WebpackLayerName =\n  (typeof WEBPACK_LAYERS_NAMES)[keyof typeof WEBPACK_LAYERS_NAMES]\n\nconst WEBPACK_LAYERS = {\n  ...WEBPACK_LAYERS_NAMES,\n  GROUP: {\n    builtinReact: [\n      WEBPACK_LAYERS_NAMES.reactServerComponents,\n      WEBPACK_LAYERS_NAMES.actionBrowser,\n    ],\n    serverOnly: [\n      WEBPACK_LAYERS_NAMES.reactServerComponents,\n      WEBPACK_LAYERS_NAMES.actionBrowser,\n      WEBPACK_LAYERS_NAMES.instrument,\n      WEBPACK_LAYERS_NAMES.middleware,\n    ],\n    neutralTarget: [\n      // pages api\n      WEBPACK_LAYERS_NAMES.apiNode,\n      WEBPACK_LAYERS_NAMES.apiEdge,\n    ],\n    clientOnly: [\n      WEBPACK_LAYERS_NAMES.serverSideRendering,\n      WEBPACK_LAYERS_NAMES.appPagesBrowser,\n    ],\n    bundled: [\n      WEBPACK_LAYERS_NAMES.reactServerComponents,\n      WEBPACK_LAYERS_NAMES.actionBrowser,\n      WEBPACK_LAYERS_NAMES.serverSideRendering,\n      WEBPACK_LAYERS_NAMES.appPagesBrowser,\n      WEBPACK_LAYERS_NAMES.shared,\n      WEBPACK_LAYERS_NAMES.instrument,\n      WEBPACK_LAYERS_NAMES.middleware,\n    ],\n    appPages: [\n      // app router pages and layouts\n      WEBPACK_LAYERS_NAMES.reactServerComponents,\n      WEBPACK_LAYERS_NAMES.serverSideRendering,\n      WEBPACK_LAYERS_NAMES.appPagesBrowser,\n      WEBPACK_LAYERS_NAMES.actionBrowser,\n    ],\n  },\n}\n\nconst WEBPACK_RESOURCE_QUERIES = {\n  edgeSSREntry: '__next_edge_ssr_entry__',\n  metadata: '__next_metadata__',\n  metadataRoute: '__next_metadata_route__',\n  metadataImageMeta: '__next_metadata_image_meta__',\n}\n\nexport { WEBPACK_LAYERS, WEBPACK_RESOURCE_QUERIES }\n", "// regexp is based on https://github.com/sindresorhus/escape-string-regexp\nconst reHasRegExp = /[|\\\\{}()[\\]^$+*?.-]/\nconst reReplaceRegExp = /[|\\\\{}()[\\]^$+*?.-]/g\n\nexport function escapeStringRegexp(str: string) {\n  // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23\n  if (reHasRegExp.test(str)) {\n    return str.replace(reReplaceRegExp, '\\\\$&')\n  }\n  return str\n}\n", "import { DEFAULT_SEGMENT_KEY } from '../../segment'\nimport type { LoaderTree } from '../../../../server/lib/app-dir-module'\n\nexport function parseLoaderTree(tree: LoaderTree) {\n  const [segment, parallelRoutes, modules] = tree\n  const { layout, template } = modules\n  let { page } = modules\n  // a __DEFAULT__ segment means that this route didn't match any of the\n  // segments in the route, so we should use the default page\n  page = segment === DEFAULT_SEGMENT_KEY ? modules.defaultPage : page\n\n  const conventionPath = layout?.[1] || template?.[1] || page?.[1]\n\n  return {\n    page,\n    segment,\n    modules,\n    /* it can be either layout / template / page */\n    conventionPath,\n    parallelRoutes,\n  }\n}\n", "import { INTERCEPTION_ROUTE_MARKERS } from './interception-routes'\nimport type { DynamicParamTypes } from '../../app-router-types'\n\n/**\n * Parse dynamic route segment to type of parameter\n */\nexport function getSegmentParam(segment: string): {\n  param: string\n  type: DynamicParamTypes\n} | null {\n  const interceptionMarker = INTERCEPTION_ROUTE_MARKERS.find((marker) =>\n    segment.startsWith(marker)\n  )\n\n  // if an interception marker is part of the path segment, we need to jump ahead\n  // to the relevant portion for param parsing\n  if (interceptionMarker) {\n    segment = segment.slice(interceptionMarker.length)\n  }\n\n  if (segment.startsWith('[[...') && segment.endsWith(']]')) {\n    return {\n      // TODO-APP: Optional catchall does not currently work with parallel routes,\n      // so for now aren't handling a potential interception marker.\n      type: 'optional-catchall',\n      param: segment.slice(5, -2),\n    }\n  }\n\n  if (segment.startsWith('[...') && segment.endsWith(']')) {\n    return {\n      type: interceptionMarker ? 'catchall-intercepted' : 'catchall',\n      param: segment.slice(4, -1),\n    }\n  }\n\n  if (segment.startsWith('[') && segment.endsWith(']')) {\n    return {\n      type: interceptionMarker ? 'dynamic-intercepted' : 'dynamic',\n      param: segment.slice(1, -1),\n    }\n  }\n\n  return null\n}\n\nexport function isCatchAll(\n  type: DynamicParamTypes\n): type is 'catchall' | 'catchall-intercepted' | 'optional-catchall' {\n  return (\n    type === 'catchall' ||\n    type === 'catchall-intercepted' ||\n    type === 'optional-catchall'\n  )\n}\n\nexport function getParamProperties(paramType: DynamicParamTypes): {\n  repeat: boolean\n  optional: boolean\n} {\n  let repeat = false\n  let optional = false\n\n  switch (paramType) {\n    case 'catchall':\n    case 'catchall-intercepted':\n      repeat = true\n      break\n    case 'optional-catchall':\n      repeat = true\n      optional = true\n      break\n    case 'dynamic':\n    case 'dynamic-intercepted':\n      break\n    default:\n      paramType satisfies never\n  }\n\n  return { repeat, optional }\n}\n", "import type { DynamicParam } from '../../../../server/app-render/app-render'\nimport type { LoaderTree } from '../../../../server/lib/app-dir-module'\nimport type { OpaqueFallbackRouteParams } from '../../../../server/request/fallback-params'\nimport type { Params } from '../../../../server/request/params'\nimport type { DynamicParamTypesShort } from '../../app-router-types'\nimport { InvariantError } from '../../invariant-error'\nimport { parseLoaderTree } from './parse-loader-tree'\nimport { getSegmentParam } from './get-segment-param'\n\n/**\n * Gets the value of a param from the params object. This correctly handles the\n * case where the param is a fallback route param and encodes the resulting\n * value.\n *\n * @param interpolatedParams - The params object.\n * @param segmentKey - The key of the segment.\n * @param fallbackRouteParams - The fallback route params.\n * @returns The value of the param.\n */\nfunction getParamValue(\n  interpolatedParams: Params,\n  segmentKey: string,\n  fallbackRouteParams: OpaqueFallbackRouteParams | null\n) {\n  let value = interpolatedParams[segmentKey]\n\n  if (fallbackRouteParams?.has(segmentKey)) {\n    // We know that the fallback route params has the segment key because we\n    // checked that above.\n    const [searchValue] = fallbackRouteParams.get(segmentKey)!\n    value = searchValue\n  } else if (Array.isArray(value)) {\n    value = value.map((i) => encodeURIComponent(i))\n  } else if (typeof value === 'string') {\n    value = encodeURIComponent(value)\n  }\n\n  return value\n}\n\nexport function interpolateParallelRouteParams(\n  loaderTree: LoaderTree,\n  params: Params,\n  pagePath: string,\n  fallbackRouteParams: OpaqueFallbackRouteParams | null\n) {\n  const interpolated = structuredClone(params)\n\n  // Stack-based traversal with depth tracking\n  const stack: Array<{ tree: LoaderTree; depth: number }> = [\n    { tree: loaderTree, depth: 0 },\n  ]\n\n  // Derive value from pagePath based on depth and parameter type\n  const pathSegments = pagePath.split('/').slice(1) // Remove first empty string\n\n  while (stack.length > 0) {\n    const { tree, depth } = stack.pop()!\n    const { segment, parallelRoutes } = parseLoaderTree(tree)\n\n    // Check if current segment contains a parameter\n    const segmentParam = getSegmentParam(segment)\n    if (\n      segmentParam &&\n      !interpolated.hasOwnProperty(segmentParam.param) &&\n      // If the param is in the fallback route params, we don't need to\n      // interpolate it because it's already marked as being unknown.\n      !fallbackRouteParams?.has(segmentParam.param)\n    ) {\n      switch (segmentParam.type) {\n        case 'catchall':\n        case 'optional-catchall':\n        case 'catchall-intercepted':\n          // For catchall parameters, take all remaining segments from this depth\n          const remainingSegments = pathSegments.slice(depth)\n\n          // Process each segment to handle any dynamic params\n          const processedSegments = remainingSegments\n            .flatMap((pathSegment) => {\n              const param = getSegmentParam(pathSegment)\n              // If the segment matches a param, return the param value otherwise,\n              // it's a static segment, so just return that. We don't use the\n              // `getParamValue` function here because we don't want the values to\n              // be encoded, that's handled on get by the `getDynamicParam`\n              // function.\n              return param ? interpolated[param.param] : pathSegment\n            })\n            .filter((s) => s !== undefined)\n\n          if (processedSegments.length > 0) {\n            interpolated[segmentParam.param] = processedSegments\n          }\n          break\n        case 'dynamic':\n        case 'dynamic-intercepted':\n          // For regular dynamic parameters, take the segment at this depth\n          if (depth < pathSegments.length) {\n            const pathSegment = pathSegments[depth]\n            const param = getSegmentParam(pathSegment)\n\n            interpolated[segmentParam.param] = param\n              ? interpolated[param.param]\n              : pathSegment\n          }\n          break\n        default:\n          segmentParam.type satisfies never\n      }\n    }\n\n    // Calculate next depth - increment if this is not a route group and not empty\n    let nextDepth = depth\n    const isRouteGroup = segment.startsWith('(') && segment.endsWith(')')\n    if (!isRouteGroup && segment !== '') {\n      nextDepth++\n    }\n\n    // Add all parallel routes to the stack for processing\n    for (const route of Object.values(parallelRoutes)) {\n      stack.push({ tree: route, depth: nextDepth })\n    }\n  }\n\n  return interpolated\n}\n\n/**\n *\n * Shared logic on client and server for creating a dynamic param value.\n *\n * This code needs to be shared with the client so it can extract dynamic route\n * params from the URL without a server request.\n *\n * Because everything in this module is sent to the client, we should aim to\n * keep this code as simple as possible. The special case handling for catchall\n * and optional is, alas, unfortunate.\n */\nexport function getDynamicParam(\n  interpolatedParams: Params,\n  segmentKey: string,\n  dynamicParamType: DynamicParamTypesShort,\n  fallbackRouteParams: OpaqueFallbackRouteParams | null\n): DynamicParam {\n  let value: string | string[] | undefined = getParamValue(\n    interpolatedParams,\n    segmentKey,\n    fallbackRouteParams\n  )\n\n  // handle the case where an optional catchall does not have a value,\n  // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n  if (!value || value.length === 0) {\n    if (dynamicParamType === 'oc') {\n      return {\n        param: segmentKey,\n        value: null,\n        type: dynamicParamType,\n        treeSegment: [segmentKey, '', dynamicParamType],\n      }\n    }\n\n    throw new InvariantError(\n      `Missing value for segment key: \"${segmentKey}\" with dynamic param type: ${dynamicParamType}`\n    )\n  }\n\n  return {\n    param: segmentKey,\n    // The value that is passed to user code.\n    value,\n    // The value that is rendered in the router tree.\n    treeSegment: [\n      segmentKey,\n      Array.isArray(value) ? value.join('/') : value,\n      dynamicParamType,\n    ],\n    type: dynamicParamType,\n  }\n}\n\n/**\n * Regular expression pattern used to match route parameters.\n * Matches both single parameters and parameter groups.\n * Examples:\n *   - `[[...slug]]` matches parameter group with key 'slug', repeat: true, optional: true\n *   - `[...slug]` matches parameter group with key 'slug', repeat: true, optional: false\n *   - `[[foo]]` matches parameter with key 'foo', repeat: false, optional: true\n *   - `[bar]` matches parameter with key 'bar', repeat: false, optional: false\n */\nexport const PARAMETER_PATTERN = /^([^[]*)\\[((?:\\[[^\\]]*\\])|[^\\]]+)\\](.*)$/\n\n/**\n * Parses a given parameter from a route to a data structure that can be used\n * to generate the parametrized route.\n * Examples:\n *   - `[[...slug]]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[[foo]]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `[bar]` -> `{ key: 'bar', repeat: false, optional: false }`\n *   - `fizz` -> `{ key: 'fizz', repeat: false, optional: false }`\n * @param param - The parameter to parse.\n * @returns The parsed parameter as a data structure.\n */\nexport function parseParameter(param: string) {\n  const match = param.match(PARAMETER_PATTERN)\n\n  if (!match) {\n    return parseMatchedParameter(param)\n  }\n\n  return parseMatchedParameter(match[2])\n}\n\n/**\n * Parses a matched parameter from the PARAMETER_PATTERN regex to a data structure that can be used\n * to generate the parametrized route.\n * Examples:\n *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`\n *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`\n *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`\n *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`\n * @param param - The matched parameter to parse.\n * @returns The parsed parameter as a data structure.\n */\nexport function parseMatchedParameter(param: string) {\n  const optional = param.startsWith('[') && param.endsWith(']')\n  if (optional) {\n    param = param.slice(1, -1)\n  }\n  const repeat = param.startsWith('...')\n  if (repeat) {\n    param = param.slice(3)\n  }\n  return { key: param, repeat, optional }\n}\n", "import {\n  NEXT_INTERCEPTION_MARKER_PREFIX,\n  NEXT_QUERY_PARAM_PREFIX,\n} from '../../../../lib/constants'\nimport { INTERCEPTION_ROUTE_MARKERS } from './interception-routes'\nimport { escapeStringRegexp } from '../../escape-regexp'\nimport { removeTrailingSlash } from './remove-trailing-slash'\nimport { PARAMETER_PATTERN, parseMatchedParameter } from './get-dynamic-param'\n\nexport interface Group {\n  pos: number\n  repeat: boolean\n  optional: boolean\n}\n\nexport interface RouteRegex {\n  groups: { [groupName: string]: Group }\n  re: RegExp\n}\n\nexport type RegexReference = {\n  names: Record<string, string>\n  intercepted: Record<string, string>\n}\n\ntype GetNamedRouteRegexOptions = {\n  /**\n   * Whether to prefix the route keys with the NEXT_INTERCEPTION_MARKER_PREFIX\n   * or NEXT_QUERY_PARAM_PREFIX. This is only relevant when creating the\n   * routes-manifest during the build.\n   */\n  prefixRouteKeys: boolean\n\n  /**\n   * Whether to include the suffix in the route regex. This means that when you\n   * have something like `/[...slug].json` the `.json` part will be included\n   * in the regex, yielding `/(.*).json` as the regex.\n   */\n  includeSuffix?: boolean\n\n  /**\n   * Whether to include the prefix in the route regex. This means that when you\n   * have something like `/[...slug].json` the `/` part will be included\n   * in the regex, yielding `^/(.*).json$` as the regex.\n   *\n   * Note that interception markers will already be included without the need\n   */\n  includePrefix?: boolean\n\n  /**\n   * Whether to exclude the optional trailing slash from the route regex.\n   */\n  excludeOptionalTrailingSlash?: boolean\n\n  /**\n   * Whether to backtrack duplicate keys. This is only relevant when creating\n   * the routes-manifest during the build.\n   */\n  backreferenceDuplicateKeys?: boolean\n\n  /**\n   * If provided, this will be used as the reference for the dynamic parameter\n   * keys instead of generating them in context. This is currently only used for\n   * interception routes.\n   */\n  reference?: RegexReference\n}\n\ntype GetRouteRegexOptions = {\n  /**\n   * Whether to include extra parts in the route regex. This means that when you\n   * have something like `/[...slug].json` the `.json` part will be included\n   * in the regex, yielding `/(.*).json` as the regex.\n   */\n  includeSuffix?: boolean\n\n  /**\n   * Whether to include the prefix in the route regex. This means that when you\n   * have something like `/[...slug].json` the `/` part will be included\n   * in the regex, yielding `^/(.*).json$` as the regex.\n   *\n   * Note that interception markers will already be included without the need\n   * of adding this option.\n   */\n  includePrefix?: boolean\n\n  /**\n   * Whether to exclude the optional trailing slash from the route regex.\n   */\n  excludeOptionalTrailingSlash?: boolean\n}\n\nfunction getParametrizedRoute(\n  route: string,\n  includeSuffix: boolean,\n  includePrefix: boolean\n) {\n  const groups: { [groupName: string]: Group } = {}\n  let groupIndex = 1\n\n  const segments: string[] = []\n  for (const segment of removeTrailingSlash(route).slice(1).split('/')) {\n    const markerMatch = INTERCEPTION_ROUTE_MARKERS.find((m) =>\n      segment.startsWith(m)\n    )\n    const paramMatches = segment.match(PARAMETER_PATTERN) // Check for parameters\n\n    if (markerMatch && paramMatches && paramMatches[2]) {\n      const { key, optional, repeat } = parseMatchedParameter(paramMatches[2])\n      groups[key] = { pos: groupIndex++, repeat, optional }\n      segments.push(`/${escapeStringRegexp(markerMatch)}([^/]+?)`)\n    } else if (paramMatches && paramMatches[2]) {\n      const { key, repeat, optional } = parseMatchedParameter(paramMatches[2])\n      groups[key] = { pos: groupIndex++, repeat, optional }\n\n      if (includePrefix && paramMatches[1]) {\n        segments.push(`/${escapeStringRegexp(paramMatches[1])}`)\n      }\n\n      let s = repeat ? (optional ? '(?:/(.+?))?' : '/(.+?)') : '/([^/]+?)'\n\n      // Remove the leading slash if includePrefix already added it.\n      if (includePrefix && paramMatches[1]) {\n        s = s.substring(1)\n      }\n\n      segments.push(s)\n    } else {\n      segments.push(`/${escapeStringRegexp(segment)}`)\n    }\n\n    // If there's a suffix, add it to the segments if it's enabled.\n    if (includeSuffix && paramMatches && paramMatches[3]) {\n      segments.push(escapeStringRegexp(paramMatches[3]))\n    }\n  }\n\n  return {\n    parameterizedRoute: segments.join(''),\n    groups,\n  }\n}\n\n/**\n * From a normalized route this function generates a regular expression and\n * a corresponding groups object intended to be used to store matching groups\n * from the regular expression.\n */\nexport function getRouteRegex(\n  normalizedRoute: string,\n  {\n    includeSuffix = false,\n    includePrefix = false,\n    excludeOptionalTrailingSlash = false,\n  }: GetRouteRegexOptions = {}\n): RouteRegex {\n  const { parameterizedRoute, groups } = getParametrizedRoute(\n    normalizedRoute,\n    includeSuffix,\n    includePrefix\n  )\n\n  let re = parameterizedRoute\n  if (!excludeOptionalTrailingSlash) {\n    re += '(?:/)?'\n  }\n\n  return {\n    re: new RegExp(`^${re}$`),\n    groups: groups,\n  }\n}\n\n/**\n * Builds a function to generate a minimal routeKey using only a-z and minimal\n * number of characters.\n */\nfunction buildGetSafeRouteKey() {\n  let i = 0\n\n  return () => {\n    let routeKey = ''\n    let j = ++i\n    while (j > 0) {\n      routeKey += String.fromCharCode(97 + ((j - 1) % 26))\n      j = Math.floor((j - 1) / 26)\n    }\n    return routeKey\n  }\n}\n\nfunction getSafeKeyFromSegment({\n  interceptionMarker,\n  getSafeRouteKey,\n  segment,\n  routeKeys,\n  keyPrefix,\n  backreferenceDuplicateKeys,\n}: {\n  interceptionMarker?: string\n  getSafeRouteKey: () => string\n  segment: string\n  routeKeys: Record<string, string>\n  keyPrefix?: string\n  backreferenceDuplicateKeys: boolean\n}) {\n  const { key, optional, repeat } = parseMatchedParameter(segment)\n\n  // replace any non-word characters since they can break\n  // the named regex\n  let cleanedKey = key.replace(/\\W/g, '')\n\n  if (keyPrefix) {\n    cleanedKey = `${keyPrefix}${cleanedKey}`\n  }\n  let invalidKey = false\n\n  // check if the key is still invalid and fallback to using a known\n  // safe key\n  if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n    invalidKey = true\n  }\n  if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n    invalidKey = true\n  }\n\n  if (invalidKey) {\n    cleanedKey = getSafeRouteKey()\n  }\n\n  const duplicateKey = cleanedKey in routeKeys\n\n  if (keyPrefix) {\n    routeKeys[cleanedKey] = `${keyPrefix}${key}`\n  } else {\n    routeKeys[cleanedKey] = key\n  }\n\n  // if the segment has an interception marker, make sure that's part of the regex pattern\n  // this is to ensure that the route with the interception marker doesn't incorrectly match\n  // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])\n  const interceptionPrefix = interceptionMarker\n    ? escapeStringRegexp(interceptionMarker)\n    : ''\n\n  let pattern: string\n  if (duplicateKey && backreferenceDuplicateKeys) {\n    // Use a backreference to the key to ensure that the key is the same value\n    // in each of the placeholders.\n    pattern = `\\\\k<${cleanedKey}>`\n  } else if (repeat) {\n    pattern = `(?<${cleanedKey}>.+?)`\n  } else {\n    pattern = `(?<${cleanedKey}>[^/]+?)`\n  }\n\n  return {\n    key,\n    pattern: optional\n      ? `(?:/${interceptionPrefix}${pattern})?`\n      : `/${interceptionPrefix}${pattern}`,\n    cleanedKey: cleanedKey,\n    optional,\n    repeat,\n  }\n}\n\nfunction getNamedParametrizedRoute(\n  route: string,\n  prefixRouteKeys: boolean,\n  includeSuffix: boolean,\n  includePrefix: boolean,\n  backreferenceDuplicateKeys: boolean,\n  reference: RegexReference = { names: {}, intercepted: {} }\n) {\n  const getSafeRouteKey = buildGetSafeRouteKey()\n  const routeKeys: { [named: string]: string } = {}\n\n  const segments: string[] = []\n  const inverseParts: string[] = []\n\n  // Ensure we don't mutate the original reference object.\n  reference = structuredClone(reference)\n\n  for (const segment of removeTrailingSlash(route).slice(1).split('/')) {\n    const hasInterceptionMarker = INTERCEPTION_ROUTE_MARKERS.some((m) =>\n      segment.startsWith(m)\n    )\n\n    const paramMatches = segment.match(PARAMETER_PATTERN) // Check for parameters\n\n    const interceptionMarker = hasInterceptionMarker\n      ? paramMatches?.[1]\n      : undefined\n\n    let keyPrefix: string | undefined\n    if (interceptionMarker && paramMatches?.[2]) {\n      keyPrefix = prefixRouteKeys ? NEXT_INTERCEPTION_MARKER_PREFIX : undefined\n      reference.intercepted[paramMatches[2]] = interceptionMarker\n    } else if (paramMatches?.[2] && reference.intercepted[paramMatches[2]]) {\n      keyPrefix = prefixRouteKeys ? NEXT_INTERCEPTION_MARKER_PREFIX : undefined\n    } else {\n      keyPrefix = prefixRouteKeys ? NEXT_QUERY_PARAM_PREFIX : undefined\n    }\n\n    if (interceptionMarker && paramMatches && paramMatches[2]) {\n      // If there's an interception marker, add it to the segments.\n      const { key, pattern, cleanedKey, repeat, optional } =\n        getSafeKeyFromSegment({\n          getSafeRouteKey,\n          interceptionMarker,\n          segment: paramMatches[2],\n          routeKeys,\n          keyPrefix,\n          backreferenceDuplicateKeys,\n        })\n\n      segments.push(pattern)\n      inverseParts.push(\n        `/${paramMatches[1]}:${reference.names[key] ?? cleanedKey}${repeat ? (optional ? '*' : '+') : ''}`\n      )\n      reference.names[key] ??= cleanedKey\n    } else if (paramMatches && paramMatches[2]) {\n      // If there's a prefix, add it to the segments if it's enabled.\n      if (includePrefix && paramMatches[1]) {\n        segments.push(`/${escapeStringRegexp(paramMatches[1])}`)\n        inverseParts.push(`/${paramMatches[1]}`)\n      }\n\n      const { key, pattern, cleanedKey, repeat, optional } =\n        getSafeKeyFromSegment({\n          getSafeRouteKey,\n          segment: paramMatches[2],\n          routeKeys,\n          keyPrefix,\n          backreferenceDuplicateKeys,\n        })\n\n      // Remove the leading slash if includePrefix already added it.\n      let s = pattern\n      if (includePrefix && paramMatches[1]) {\n        s = s.substring(1)\n      }\n\n      segments.push(s)\n      inverseParts.push(\n        `/:${reference.names[key] ?? cleanedKey}${repeat ? (optional ? '*' : '+') : ''}`\n      )\n      reference.names[key] ??= cleanedKey\n    } else {\n      segments.push(`/${escapeStringRegexp(segment)}`)\n      inverseParts.push(`/${segment}`)\n    }\n\n    // If there's a suffix, add it to the segments if it's enabled.\n    if (includeSuffix && paramMatches && paramMatches[3]) {\n      segments.push(escapeStringRegexp(paramMatches[3]))\n      inverseParts.push(paramMatches[3])\n    }\n  }\n\n  return {\n    namedParameterizedRoute: segments.join(''),\n    routeKeys,\n    pathToRegexpPattern: inverseParts.join(''),\n    reference,\n  }\n}\n\n/**\n * This function extends `getRouteRegex` generating also a named regexp where\n * each group is named along with a routeKeys object that indexes the assigned\n * named group with its corresponding key. When the routeKeys need to be\n * prefixed to uniquely identify internally the \"prefixRouteKey\" arg should\n * be \"true\" currently this is only the case when creating the routes-manifest\n * during the build\n */\nexport function getNamedRouteRegex(\n  normalizedRoute: string,\n  options: GetNamedRouteRegexOptions\n) {\n  const result = getNamedParametrizedRoute(\n    normalizedRoute,\n    options.prefixRouteKeys,\n    options.includeSuffix ?? false,\n    options.includePrefix ?? false,\n    options.backreferenceDuplicateKeys ?? false,\n    options.reference\n  )\n\n  let namedRegex = result.namedParameterizedRoute\n  if (!options.excludeOptionalTrailingSlash) {\n    namedRegex += '(?:/)?'\n  }\n\n  return {\n    ...getRouteRegex(normalizedRoute, options),\n    namedRegex: `^${namedRegex}$`,\n    routeKeys: result.routeKeys,\n    pathToRegexpPattern: result.pathToRegexpPattern,\n    reference: result.reference,\n  }\n}\n\n/**\n * Generates a named regexp.\n * This is intended to be using for build time only.\n */\nexport function getNamedMiddlewareRegex(\n  normalizedRoute: string,\n  options: {\n    catchAll?: boolean\n  }\n) {\n  const { parameterizedRoute } = getParametrizedRoute(\n    normalizedRoute,\n    false,\n    false\n  )\n  const { catchAll = true } = options\n  if (parameterizedRoute === '/') {\n    let catchAllRegex = catchAll ? '.*' : ''\n    return {\n      namedRegex: `^/${catchAllRegex}$`,\n    }\n  }\n\n  const { namedParameterizedRoute } = getNamedParametrizedRoute(\n    normalizedRoute,\n    false,\n    false,\n    false,\n    false,\n    undefined\n  )\n  let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : ''\n  return {\n    namedRegex: `^${namedParameterizedRoute}${catchAllGroupedRegex}$`,\n  }\n}\n", "import type { ParsedUrlQuery } from 'querystring'\n\nimport { getRouteMatcher } from './route-matcher'\nimport { getRouteRegex } from './route-regex'\n\nexport function interpolateAs(\n  route: string,\n  asPathname: string,\n  query: ParsedUrlQuery\n) {\n  let interpolatedRoute = ''\n\n  const dynamicRegex = getRouteRegex(route)\n  const dynamicGroups = dynamicRegex.groups\n  const dynamicMatches =\n    // Try to match the dynamic route against the asPath\n    (asPathname !== route ? getRouteMatcher(dynamicRegex)(asPathname) : '') ||\n    // Fall back to reading the values from the href\n    // TODO: should this take priority; also need to change in the router.\n    query\n\n  interpolatedRoute = route\n  const params = Object.keys(dynamicGroups)\n\n  if (\n    !params.every((param) => {\n      let value = dynamicMatches[param] || ''\n      const { repeat, optional } = dynamicGroups[param]\n\n      // support single-level catch-all\n      // TODO: more robust handling for user-error (passing `/`)\n      let replaced = `[${repeat ? '...' : ''}${param}]`\n      if (optional) {\n        replaced = `${!value ? '/' : ''}[${replaced}]`\n      }\n      if (repeat && !Array.isArray(value)) value = [value]\n\n      return (\n        (optional || param in dynamicMatches) &&\n        // Interpolate group into data URL if present\n        (interpolatedRoute =\n          interpolatedRoute!.replace(\n            replaced,\n            repeat\n              ? (value as string[])\n                  .map(\n                    // these values should be fully encoded instead of just\n                    // path delimiter escaped since they are being inserted\n                    // into the URL and we expect URL encoded segments\n                    // when parsing dynamic route params\n                    (segment) => encodeURIComponent(segment)\n                  )\n                  .join('/')\n              : encodeURIComponent(value as string)\n          ) || '/')\n      )\n    })\n  ) {\n    interpolatedRoute = '' // did not satisfy all requirements\n\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n  return {\n    params,\n    result: interpolatedRoute,\n  }\n}\n", "import type { NextRouter, Url } from '../shared/lib/router/router'\n\nimport { searchParamsToUrlQuery } from '../shared/lib/router/utils/querystring'\nimport { formatWithValidation } from '../shared/lib/router/utils/format-url'\nimport { omit } from '../shared/lib/router/utils/omit'\nimport { normalizeRepeatedSlashes } from '../shared/lib/utils'\nimport { normalizePathTrailingSlash } from './normalize-trailing-slash'\nimport { isLocalURL } from '../shared/lib/router/utils/is-local-url'\nimport { isDynamicRoute } from '../shared/lib/router/utils'\nimport { interpolateAs } from '../shared/lib/router/utils/interpolate-as'\nimport { getRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { getRouteMatcher } from '../shared/lib/router/utils/route-matcher'\n\n/**\n * Resolves a given hyperlink with a certain router state (basePath not included).\n * Preserves absolute urls.\n */\nexport function resolveHref(\n  router: NextRouter,\n  href: Url,\n  resolveAs: true\n): [string, string] | [string]\nexport function resolveHref(\n  router: NextRouter,\n  href: Url,\n  resolveAs?: false\n): string\nexport function resolveHref(\n  router: NextRouter,\n  href: Url,\n  resolveAs?: boolean\n): [string, string] | [string] | string {\n  // we use a dummy base url for relative urls\n  let base: URL\n  let urlAsString = typeof href === 'string' ? href : formatWithValidation(href)\n\n  // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n  // https://www.rfc-editor.org/rfc/rfc3986.html#section-3.1\n  const urlProtoMatch = urlAsString.match(/^[a-z][a-z0-9+.-]*:\\/\\//i)\n  const urlAsStringNoProto = urlProtoMatch\n    ? urlAsString.slice(urlProtoMatch[0].length)\n    : urlAsString\n\n  const urlParts = urlAsStringNoProto.split('?', 1)\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(\n      `Invalid href '${urlAsString}' passed to next/router in page: '${router.pathname}'. Repeated forward-slashes (//) or backslashes \\\\ are not valid in the href.`\n    )\n    const normalizedUrl = normalizeRepeatedSlashes(urlAsStringNoProto)\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl\n  }\n\n  // Return because it cannot be routed by the Next.js router\n  if (!isLocalURL(urlAsString)) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n\n  try {\n    let baseBase = urlAsString.startsWith('#') ? router.asPath : router.pathname\n\n    // If the provided href is only a query string, it is safer to use the asPath\n    // considering rewrites.\n    if (urlAsString.startsWith('?')) {\n      baseBase = router.asPath\n\n      // However, if is a dynamic route, we need to use the pathname to preserve the\n      // query interpolation and rewrites (router.pathname will look like \"/[slug]\").\n      if (isDynamicRoute(router.pathname)) {\n        baseBase = router.pathname\n\n        const routeRegex = getRouteRegex(router.pathname)\n        const match = getRouteMatcher(routeRegex)(router.asPath)\n\n        // For dynamic routes, if asPath doesn't match the pathname regex, it is a rewritten path.\n        // In this case, should use asPath to preserve the current URL.\n        if (!match) {\n          baseBase = router.asPath\n        }\n\n        // Note: There is an edge case where the pathname is dynamic, and also a rewrite path to the same segment.\n        // E.g. in \"/[slug]\" path, rewrite \"/foo\" -> \"/bar\"\n\n        // In this case, it will be treated as a non-rewritten path and possibly interpolate the query string.\n        // E.g., \"/any?slug=foo\" will become the content of \"/foo\", not rewritten as \"/bar\"\n\n        // This is currently a trade-off of not resolving rewrite paths on every Router/Link call,\n        // but using a lighter route regex pattern check.\n      }\n    }\n\n    base = new URL(baseBase, 'http://n')\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n')\n  }\n\n  try {\n    const finalUrl = new URL(urlAsString, base)\n    finalUrl.pathname = normalizePathTrailingSlash(finalUrl.pathname)\n    let interpolatedAs = ''\n\n    if (\n      isDynamicRoute(finalUrl.pathname) &&\n      finalUrl.searchParams &&\n      resolveAs\n    ) {\n      const query = searchParamsToUrlQuery(finalUrl.searchParams)\n\n      const { result, params } = interpolateAs(\n        finalUrl.pathname,\n        finalUrl.pathname,\n        query\n      )\n\n      if (result) {\n        interpolatedAs = formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omit(query, params),\n        })\n      }\n    }\n\n    // if the origin didn't change, it means we received a relative href\n    const resolvedHref =\n      finalUrl.origin === base.origin\n        ? finalUrl.href.slice(finalUrl.origin.length)\n        : finalUrl.href\n\n    return resolveAs\n      ? [resolvedHref, interpolatedAs || resolvedHref]\n      : resolvedHref\n  } catch (_) {\n    return resolveAs ? [urlAsString] : urlAsString\n  }\n}\n", "import { parsePath } from './parse-path'\n\n/**\n * Adds the provided prefix to the given path. It first ensures that the path\n * is indeed starting with a slash.\n */\nexport function addPathPrefix(path: string, prefix?: string) {\n  if (!path.startsWith('/') || !prefix) {\n    return path\n  }\n\n  const { pathname, query, hash } = parsePath(path)\n  return `${prefix}${pathname}${query}${hash}`\n}\n", "import { addPathPrefix } from './add-path-prefix'\nimport { pathHasPrefix } from './path-has-prefix'\n\n/**\n * For a given path and a locale, if the locale is given, it will prefix the\n * locale. The path shouldn't be an API path. If a default locale is given the\n * prefix will be omitted if the locale is already the default locale.\n */\nexport function addLocale(\n  path: string,\n  locale?: string | false,\n  defaultLocale?: string,\n  ignorePrefix?: boolean\n) {\n  // If no locale was given or the locale is the default locale, we don't need\n  // to prefix the path.\n  if (!locale || locale === defaultLocale) return path\n\n  const lower = path.toLowerCase()\n\n  // If the path is an API path or the path already has the locale prefix, we\n  // don't need to prefix the path.\n  if (!ignorePrefix) {\n    if (pathHasPrefix(lower, '/api')) return path\n    if (pathHasPrefix(lower, `/${locale.toLowerCase()}`)) return path\n  }\n\n  // Add the locale prefix to the path.\n  return addPathPrefix(path, `/${locale}`)\n}\n", "import type { addLocale as Fn } from '../shared/lib/router/utils/add-locale'\nimport { normalizePathTrailingSlash } from './normalize-trailing-slash'\n\nexport const addLocale: typeof Fn = (path, ...args) => {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return normalizePathTrailingSlash(\n      (\n        require('../shared/lib/router/utils/add-locale') as typeof import('../shared/lib/router/utils/add-locale')\n      ).addLocale(path, ...args)\n    )\n  }\n  return path\n}\n", "import React from 'react'\nimport type { NextRouter } from './router/router'\n\nexport const RouterContext = React.createContext<NextRouter | null>(null)\n\nif (process.env.NODE_ENV !== 'production') {\n  RouterContext.displayName = 'RouterContext'\n}\n", "export const requestIdleCallback =\n  (typeof self !== 'undefined' &&\n    self.requestIdleCallback &&\n    self.requestIdleCallback.bind(window)) ||\n  function (cb: IdleRequestCallback): number {\n    let start = Date.now()\n    return self.setTimeout(function () {\n      cb({\n        didTimeout: false,\n        timeRemaining: function () {\n          return Math.max(0, 50 - (Date.now() - start))\n        },\n      })\n    }, 1)\n  }\n\nexport const cancelIdleCallback =\n  (typeof self !== 'undefined' &&\n    self.cancelIdleCallback &&\n    self.cancelIdleCallback.bind(window)) ||\n  function (id: number) {\n    return clearTimeout(id)\n  }\n", "import { useCallback, useEffect, useRef, useState } from 'react'\nimport {\n  requestIdleCallback,\n  cancelIdleCallback,\n} from './request-idle-callback'\n\ntype UseIntersectionObserverInit = Pick<\n  IntersectionObserverInit,\n  'rootMargin' | 'root'\n>\n\ntype UseIntersection = { disabled?: boolean } & UseIntersectionObserverInit & {\n    rootRef?: React.RefObject<HTMLElement | null> | null\n  }\ntype ObserveCallback = (isVisible: boolean) => void\ntype Identifier = {\n  root: Element | Document | null\n  margin: string\n}\ntype Observer = {\n  id: Identifier\n  observer: IntersectionObserver\n  elements: Map<Element, ObserveCallback>\n}\n\nconst hasIntersectionObserver = typeof IntersectionObserver === 'function'\n\nconst observers = new Map<Identifier, Observer>()\nconst idList: Identifier[] = []\n\nfunction createObserver(options: UseIntersectionObserverInit): Observer {\n  const id = {\n    root: options.root || null,\n    margin: options.rootMargin || '',\n  }\n  const existing = idList.find(\n    (obj) => obj.root === id.root && obj.margin === id.margin\n  )\n  let instance: Observer | undefined\n\n  if (existing) {\n    instance = observers.get(existing)\n    if (instance) {\n      return instance\n    }\n  }\n\n  const elements = new Map<Element, ObserveCallback>()\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      const callback = elements.get(entry.target)\n      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0\n      if (callback && isVisible) {\n        callback(isVisible)\n      }\n    })\n  }, options)\n  instance = {\n    id,\n    observer,\n    elements,\n  }\n\n  idList.push(id)\n  observers.set(id, instance)\n  return instance\n}\n\nfunction observe(\n  element: Element,\n  callback: ObserveCallback,\n  options: UseIntersectionObserverInit\n): () => void {\n  const { id, observer, elements } = createObserver(options)\n  elements.set(element, callback)\n\n  observer.observe(element)\n  return function unobserve(): void {\n    elements.delete(element)\n    observer.unobserve(element)\n\n    // Destroy observer when there's nothing left to watch:\n    if (elements.size === 0) {\n      observer.disconnect()\n      observers.delete(id)\n      const index = idList.findIndex(\n        (obj) => obj.root === id.root && obj.margin === id.margin\n      )\n      if (index > -1) {\n        idList.splice(index, 1)\n      }\n    }\n  }\n}\n\nexport function useIntersection<T extends Element>({\n  rootRef,\n  rootMargin,\n  disabled,\n}: UseIntersection): [(element: T | null) => void, boolean, () => void] {\n  const isDisabled: boolean = disabled || !hasIntersectionObserver\n\n  const [visible, setVisible] = useState(false)\n  const elementRef = useRef<T | null>(null)\n  const setElement = useCallback((element: T | null) => {\n    elementRef.current = element\n  }, [])\n\n  useEffect(() => {\n    if (hasIntersectionObserver) {\n      if (isDisabled || visible) return\n\n      const element = elementRef.current\n      if (element && element.tagName) {\n        const unobserve = observe(\n          element,\n          (isVisible) => isVisible && setVisible(isVisible),\n          { root: rootRef?.current, rootMargin }\n        )\n\n        return unobserve\n      }\n    } else {\n      if (!visible) {\n        const idleCallback = requestIdleCallback(() => setVisible(true))\n        return () => cancelIdleCallback(idleCallback)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled, rootMargin, rootRef, visible, elementRef.current])\n\n  const resetVisible = useCallback(() => {\n    setVisible(false)\n  }, [])\n\n  return [setElement, visible, resetVisible]\n}\n", "export interface PathLocale {\n  detectedLocale?: string\n  pathname: string\n}\n\n/**\n * A cache of lowercased locales for each list of locales. This is stored as a\n * WeakMap so if the locales are garbage collected, the cache entry will be\n * removed as well.\n */\nconst cache = new WeakMap<readonly string[], readonly string[]>()\n\n/**\n * For a pathname that may include a locale from a list of locales, it\n * removes the locale from the pathname returning it alongside with the\n * detected locale.\n *\n * @param pathname A pathname that may include a locale.\n * @param locales A list of locales.\n * @returns The detected locale and pathname without locale\n */\nexport function normalizeLocalePath(\n  pathname: string,\n  locales?: readonly string[]\n): PathLocale {\n  // If locales is undefined, return the pathname as is.\n  if (!locales) return { pathname }\n\n  // Get the cached lowercased locales or create a new cache entry.\n  let lowercasedLocales = cache.get(locales)\n  if (!lowercasedLocales) {\n    lowercasedLocales = locales.map((locale) => locale.toLowerCase())\n    cache.set(locales, lowercasedLocales)\n  }\n\n  let detectedLocale: string | undefined\n\n  // The first segment will be empty, because it has a leading `/`. If\n  // there is no further segment, there is no locale (or it's the default).\n  const segments = pathname.split('/', 2)\n\n  // If there's no second segment (ie, the pathname is just `/`), there's no\n  // locale.\n  if (!segments[1]) return { pathname }\n\n  // The second segment will contain the locale part if any.\n  const segment = segments[1].toLowerCase()\n\n  // See if the segment matches one of the locales. If it doesn't, there is\n  // no locale (or it's the default).\n  const index = lowercasedLocales.indexOf(segment)\n  if (index < 0) return { pathname }\n\n  // Return the case-sensitive locale.\n  detectedLocale = locales[index]\n\n  // Remove the `/${locale}` part of the pathname.\n  pathname = pathname.slice(detectedLocale.length + 1) || '/'\n\n  return { pathname, detectedLocale }\n}\n", "import type { normalizeLocalePath as Fn } from '../shared/lib/i18n/normalize-locale-path'\n\nexport const normalizeLocalePath: typeof Fn = (pathname, locales) => {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return (\n      require('../shared/lib/i18n/normalize-locale-path') as typeof import('../shared/lib/i18n/normalize-locale-path')\n    ).normalizeLocalePath(pathname, locales)\n  }\n  return { pathname, detectedLocale: undefined }\n}\n", "import type { DomainLocale } from '../../../server/config-shared'\n\nexport function detectDomainLocale(\n  domainItems?: readonly DomainLocale[],\n  hostname?: string,\n  detectedLocale?: string\n) {\n  if (!domainItems) return\n\n  if (detectedLocale) {\n    detectedLocale = detectedLocale.toLowerCase()\n  }\n\n  for (const item of domainItems) {\n    // remove port if present\n    const domainHostname = item.domain?.split(':', 1)[0].toLowerCase()\n    if (\n      hostname === domainHostname ||\n      detectedLocale === item.defaultLocale.toLowerCase() ||\n      item.locales?.some((locale) => locale.toLowerCase() === detectedLocale)\n    ) {\n      return item\n    }\n  }\n}\n", "import type { detectDomainLocale as Fn } from '../shared/lib/i18n/detect-domain-locale'\n\nexport const detectDomainLocale: typeof Fn = (...args) => {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return (\n      require('../shared/lib/i18n/detect-domain-locale') as typeof import('../shared/lib/i18n/detect-domain-locale')\n    ).detectDomainLocale(...args)\n  }\n}\n", "import type { DomainLocale } from '../server/config'\nimport type { normalizeLocalePath as NormalizeFn } from './normalize-locale-path'\nimport type { detectDomainLocale as DetectFn } from './detect-domain-locale'\nimport { normalizePathTrailingSlash } from './normalize-trailing-slash'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function getDomainLocale(\n  path: string,\n  locale?: string | false,\n  locales?: readonly string[],\n  domainLocales?: readonly DomainLocale[]\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    const normalizeLocalePath: typeof NormalizeFn = (\n      require('./normalize-locale-path') as typeof import('./normalize-locale-path')\n    ).normalizeLocalePath\n    const detectDomainLocale: typeof DetectFn = (\n      require('./detect-domain-locale') as typeof import('./detect-domain-locale')\n    ).detectDomainLocale\n\n    const target = locale || normalizeLocalePath(path, locales).detectedLocale\n    const domain = detectDomainLocale(domainLocales, undefined, target)\n    if (domain) {\n      const proto = `http${domain.http ? '' : 's'}://`\n      const finalLocale = target === domain.defaultLocale ? '' : `/${target}`\n      return `${proto}${domain.domain}${normalizePathTrailingSlash(\n        `${basePath}${finalLocale}${path}`\n      )}`\n    }\n    return false\n  } else {\n    return false\n  }\n}\n", "import { addPathPrefix } from '../shared/lib/router/utils/add-path-prefix'\nimport { normalizePathTrailingSlash } from './normalize-trailing-slash'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function addBasePath(path: string, required?: boolean): string {\n  return normalizePathTrailingSlash(\n    process.env.__NEXT_MANUAL_CLIENT_BASE_PATH && !required\n      ? path\n      : addPathPrefix(path, basePath)\n  )\n}\n", "import { useCallback, useRef, type Ref } from 'react'\n\n// This is a compatibility hook to support React 18 and 19 refs.\n// In 19, a cleanup function from refs may be returned.\n// In 18, returning a cleanup function creates a warning.\n// Since we take userspace refs, we don't know ahead of time if a cleanup function will be returned.\n// This implements cleanup functions with the old behavior in 18.\n// We know refs are always called alternating with `null` and then `T`.\n// So a call with `null` means we need to call the previous cleanup functions.\nexport function useMergedRef<TElement>(\n  refA: Ref<TElement>,\n  refB: Ref<TElement>\n): Ref<TElement> {\n  const cleanupA = useRef<(() => void) | null>(null)\n  const cleanupB = useRef<(() => void) | null>(null)\n\n  // NOTE: In theory, we could skip the wrapping if only one of the refs is non-null.\n  // (this happens often if the user doesn't pass a ref to Link/Form/Image)\n  // But this can cause us to leak a cleanup-ref into user code (previously via `<Link legacyBehavior>`),\n  // and the user might pass that ref into ref-merging library that doesn't support cleanup refs\n  // (because it hasn't been updated for React 19)\n  // which can then cause things to blow up, because a cleanup-returning ref gets called with `null`.\n  // So in practice, it's safer to be defensive and always wrap the ref, even on React 19.\n  return useCallback(\n    (current: TElement | null): void => {\n      if (current === null) {\n        const cleanupFnA = cleanupA.current\n        if (cleanupFnA) {\n          cleanupA.current = null\n          cleanupFnA()\n        }\n        const cleanupFnB = cleanupB.current\n        if (cleanupFnB) {\n          cleanupB.current = null\n          cleanupFnB()\n        }\n      } else {\n        if (refA) {\n          cleanupA.current = applyRef(refA, current)\n        }\n        if (refB) {\n          cleanupB.current = applyRef(refB, current)\n        }\n      }\n    },\n    [refA, refB]\n  )\n}\n\nfunction applyRef<TElement>(\n  refA: NonNullable<Ref<TElement>>,\n  current: TElement\n) {\n  if (typeof refA === 'function') {\n    const cleanup = refA(current)\n    if (typeof cleanup === 'function') {\n      return cleanup\n    } else {\n      return () => refA(null)\n    }\n  } else {\n    refA.current = current\n    return () => {\n      refA.current = null\n    }\n  }\n}\n", "let errorOnce = (_: string) => {}\nif (process.env.NODE_ENV !== 'production') {\n  const errors = new Set<string>()\n  errorOnce = (msg: string) => {\n    if (!errors.has(msg)) {\n      console.error(msg)\n    }\n    errors.add(msg)\n  }\n}\n\nexport { errorOnce }\n", "'use client'\n\nimport type {\n  NextRouter,\n  PrefetchOptions as RouterPrefetchOptions,\n} from '../shared/lib/router/router'\n\nimport React, { createContext, useContext } from 'react'\nimport type { UrlObject } from 'url'\nimport { resolveHref } from './resolve-href'\nimport { isLocalURL } from '../shared/lib/router/utils/is-local-url'\nimport { formatUrl } from '../shared/lib/router/utils/format-url'\nimport { isAbsoluteUrl } from '../shared/lib/utils'\nimport { addLocale } from './add-locale'\nimport { RouterContext } from '../shared/lib/router-context.shared-runtime'\nimport type { AppRouterInstance } from '../shared/lib/app-router-context.shared-runtime'\nimport { useIntersection } from './use-intersection'\nimport { getDomainLocale } from './get-domain-locale'\nimport { addBasePath } from './add-base-path'\nimport { useMergedRef } from './use-merged-ref'\nimport { errorOnce } from '../shared/lib/utils/error-once'\n\ntype Url = string | UrlObject\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T]\ntype OptionalKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? K : never\n}[keyof T]\n\ntype OnNavigateEventHandler = (event: { preventDefault: () => void }) => void\n\ntype InternalLinkProps = {\n  /**\n   * The path or URL to navigate to. It can also be an object.\n   *\n   * @example https://nextjs.org/docs/api-reference/next/link#with-url-object\n   */\n  href: Url\n  /**\n   * Optional decorator for the path that will be shown in the browser URL bar. Before Next.js 9.5.3 this was used for dynamic routes, check our [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes) to see how it worked. Note: when this path differs from the one provided in `href` the previous `href`/`as` behavior is used as shown in the [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes).\n   */\n  as?: Url\n  /**\n   * Replace the current `history` state instead of adding a new url into the stack.\n   *\n   * @defaultValue `false`\n   */\n  replace?: boolean\n  /**\n   * Whether to override the default scroll behavior\n   *\n   * @example https://nextjs.org/docs/api-reference/next/link#disable-scrolling-to-the-top-of-the-page\n   *\n   * @defaultValue `true`\n   */\n  scroll?: boolean\n  /**\n   * Update the path of the current page without rerunning [`getStaticProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props), [`getServerSideProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props) or [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props).\n   *\n   * @defaultValue `false`\n   */\n  shallow?: boolean\n  /**\n   * Forces `Link` to send the `href` property to its child.\n   *\n   * @defaultValue `false`\n   */\n  passHref?: boolean\n  /**\n   * Prefetch the page in the background.\n   * Any `<Link />` that is in the viewport (initially or through scroll) will be prefetched.\n   * Prefetch can be disabled by passing `prefetch={false}`. Prefetching is only enabled in production.\n   *\n   * In App Router:\n   * - \"auto\", null, undefined (default): For statically generated pages, this will prefetch the full React Server Component data. For dynamic pages, this will prefetch up to the nearest route segment with a [`loading.js`](https://nextjs.org/docs/app/api-reference/file-conventions/loading) file. If there is no loading file, it will not fetch the full tree to avoid fetching too much data.\n   * - `true`: This will prefetch the full React Server Component data for all route segments, regardless of whether they contain a segment with `loading.js`.\n   * - `false`: This will not prefetch any data, even on hover.\n   *\n   * In Pages Router:\n   * - `true` (default): The full route & its data will be prefetched.\n   * - `false`: Prefetching will not happen when entering the viewport, but will still happen on hover.\n   * @defaultValue `true` (pages router) or `null` (app router)\n   */\n  prefetch?: boolean | 'auto' | null | 'unstable_forceStale'\n  /**\n   * The active locale is automatically prepended. `locale` allows for providing a different locale.\n   * When `false` `href` has to include the locale as the default behavior is disabled.\n   * Note: This is only available in the Pages Router.\n   */\n  locale?: string | false\n  /**\n   * Enable legacy link behavior.\n   *\n   * @deprecated This will be removed in a future version\n   * @defaultValue `false`\n   * @see https://github.com/vercel/next.js/commit/489e65ed98544e69b0afd7e0cfc3f9f6c2b803b7\n   */\n  legacyBehavior?: boolean\n  /**\n   * Optional event handler for when the mouse pointer is moved onto Link\n   */\n  onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>\n  /**\n   * Optional event handler for when Link is touched.\n   */\n  onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n  /**\n   * Optional event handler for when Link is clicked.\n   */\n  onClick?: React.MouseEventHandler<HTMLAnchorElement>\n  /**\n   * Optional event handler for when the `<Link>` is navigated.\n   */\n  onNavigate?: OnNavigateEventHandler\n}\n\n// TODO-APP: Include the full set of Anchor props\n// adding this to the publicly exported type currently breaks existing apps\n\n// `RouteInferType` is a stub here to avoid breaking `typedRoutes` when the type\n// isn't generated yet. It will be replaced when type generation runs.\n// WARNING: This should be an interface to prevent TypeScript from inlining it\n// in declarations of libraries dependending on Next.js.\n// Not trivial to reproduce so only convert to an interface when needed.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface LinkProps<RouteInferType = any> extends InternalLinkProps {}\ntype LinkPropsRequired = RequiredKeys<LinkProps>\ntype LinkPropsOptional = OptionalKeys<InternalLinkProps>\n\nconst prefetched = new Set<string>()\n\ntype PrefetchOptions = RouterPrefetchOptions & {\n  /**\n   * bypassPrefetchedCheck will bypass the check to see if the `href` has\n   * already been fetched.\n   */\n  bypassPrefetchedCheck?: boolean\n}\n\nfunction prefetch(\n  router: NextRouter,\n  href: string,\n  as: string,\n  options: PrefetchOptions\n): void {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  if (!isLocalURL(href)) {\n    return\n  }\n\n  // We should only dedupe requests when experimental.optimisticClientCache is\n  // disabled.\n  if (!options.bypassPrefetchedCheck) {\n    const locale =\n      // Let the link's locale prop override the default router locale.\n      typeof options.locale !== 'undefined'\n        ? options.locale\n        : // Otherwise fallback to the router's locale.\n          'locale' in router\n          ? router.locale\n          : undefined\n\n    const prefetchedKey = href + '%' + as + '%' + locale\n\n    // If we've already fetched the key, then don't prefetch it again!\n    if (prefetched.has(prefetchedKey)) {\n      return\n    }\n\n    // Mark this URL as prefetched.\n    prefetched.add(prefetchedKey)\n  }\n\n  // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n  router.prefetch(href, as, options).catch((err) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err\n    }\n  })\n}\n\nfunction isModifiedEvent(event: React.MouseEvent): boolean {\n  const eventTarget = event.currentTarget as HTMLAnchorElement | SVGAElement\n  const target = eventTarget.getAttribute('target')\n  return (\n    (target && target !== '_self') ||\n    event.metaKey ||\n    event.ctrlKey ||\n    event.shiftKey ||\n    event.altKey || // triggers resource download\n    (event.nativeEvent && event.nativeEvent.which === 2)\n  )\n}\n\nfunction linkClicked(\n  e: React.MouseEvent,\n  router: NextRouter | AppRouterInstance,\n  href: string,\n  as: string,\n  replace?: boolean,\n  shallow?: boolean,\n  scroll?: boolean,\n  locale?: string | false,\n  onNavigate?: OnNavigateEventHandler\n): void {\n  const { nodeName } = e.currentTarget\n\n  // anchors inside an svg have a lowercase nodeName\n  const isAnchorNodeName = nodeName.toUpperCase() === 'A'\n\n  if (\n    (isAnchorNodeName && isModifiedEvent(e)) ||\n    e.currentTarget.hasAttribute('download')\n  ) {\n    // ignore click for browser’s default behavior\n    return\n  }\n\n  if (!isLocalURL(href)) {\n    if (replace) {\n      // browser default behavior does not replace the history state\n      // so we need to do it manually\n      e.preventDefault()\n      location.replace(href)\n    }\n\n    // ignore click for browser’s default behavior\n    return\n  }\n\n  e.preventDefault()\n\n  const navigate = () => {\n    if (onNavigate) {\n      let isDefaultPrevented = false\n\n      onNavigate({\n        preventDefault: () => {\n          isDefaultPrevented = true\n        },\n      })\n\n      if (isDefaultPrevented) {\n        return\n      }\n    }\n\n    // If the router is an NextRouter instance it will have `beforePopState`\n    const routerScroll = scroll ?? true\n    if ('beforePopState' in router) {\n      router[replace ? 'replace' : 'push'](href, as, {\n        shallow,\n        locale,\n        scroll: routerScroll,\n      })\n    } else {\n      router[replace ? 'replace' : 'push'](as || href, {\n        scroll: routerScroll,\n      })\n    }\n  }\n\n  navigate()\n}\n\ntype LinkPropsReal = React.PropsWithChildren<\n  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof LinkProps> &\n    LinkProps\n>\n\nfunction formatStringOrUrl(urlObjOrString: UrlObject | string): string {\n  if (typeof urlObjOrString === 'string') {\n    return urlObjOrString\n  }\n\n  return formatUrl(urlObjOrString)\n}\n\n/**\n * A React component that extends the HTML `<a>` element to provide [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation between routes.\n *\n * It is the primary way to navigate between routes in Next.js.\n *\n * Read more: [Next.js docs: `<Link>`](https://nextjs.org/docs/app/api-reference/components/link)\n */\nconst Link = React.forwardRef<HTMLAnchorElement, LinkPropsReal>(\n  function LinkComponent(props, forwardedRef) {\n    let children: React.ReactNode\n\n    const {\n      href: hrefProp,\n      as: asProp,\n      children: childrenProp,\n      prefetch: prefetchProp = null,\n      passHref,\n      replace,\n      shallow,\n      scroll,\n      locale,\n      onClick,\n      onNavigate,\n      onMouseEnter: onMouseEnterProp,\n      onTouchStart: onTouchStartProp,\n      legacyBehavior = false,\n      ...restProps\n    } = props\n\n    children = childrenProp\n\n    if (\n      legacyBehavior &&\n      (typeof children === 'string' || typeof children === 'number')\n    ) {\n      children = <a>{children}</a>\n    }\n\n    const router = React.useContext(RouterContext)\n\n    const prefetchEnabled = prefetchProp !== false\n\n    if (process.env.NODE_ENV !== 'production') {\n      function createPropError(args: {\n        key: string\n        expected: string\n        actual: string\n      }) {\n        return new Error(\n          `Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` +\n            (typeof window !== 'undefined'\n              ? // TODO: Remove this addendum if Owner Stacks are available\n                \"\\nOpen your browser's console to view the Component stack trace.\"\n              : '')\n        )\n      }\n\n      // TypeScript trick for type-guarding:\n      const requiredPropsGuard: Record<LinkPropsRequired, true> = {\n        href: true,\n      } as const\n      const requiredProps: LinkPropsRequired[] = Object.keys(\n        requiredPropsGuard\n      ) as LinkPropsRequired[]\n      requiredProps.forEach((key: LinkPropsRequired) => {\n        if (key === 'href') {\n          if (\n            props[key] == null ||\n            (typeof props[key] !== 'string' && typeof props[key] !== 'object')\n          ) {\n            throw createPropError({\n              key,\n              expected: '`string` or `object`',\n              actual: props[key] === null ? 'null' : typeof props[key],\n            })\n          }\n        } else {\n          // TypeScript trick for type-guarding:\n          const _: never = key\n        }\n      })\n\n      // TypeScript trick for type-guarding:\n      const optionalPropsGuard: Record<LinkPropsOptional, true> = {\n        as: true,\n        replace: true,\n        scroll: true,\n        shallow: true,\n        passHref: true,\n        prefetch: true,\n        locale: true,\n        onClick: true,\n        onMouseEnter: true,\n        onTouchStart: true,\n        legacyBehavior: true,\n        onNavigate: true,\n      } as const\n      const optionalProps: LinkPropsOptional[] = Object.keys(\n        optionalPropsGuard\n      ) as LinkPropsOptional[]\n      optionalProps.forEach((key: LinkPropsOptional) => {\n        const valType = typeof props[key]\n\n        if (key === 'as') {\n          if (props[key] && valType !== 'string' && valType !== 'object') {\n            throw createPropError({\n              key,\n              expected: '`string` or `object`',\n              actual: valType,\n            })\n          }\n        } else if (key === 'locale') {\n          if (props[key] && valType !== 'string') {\n            throw createPropError({\n              key,\n              expected: '`string`',\n              actual: valType,\n            })\n          }\n        } else if (\n          key === 'onClick' ||\n          key === 'onMouseEnter' ||\n          key === 'onTouchStart' ||\n          key === 'onNavigate'\n        ) {\n          if (props[key] && valType !== 'function') {\n            throw createPropError({\n              key,\n              expected: '`function`',\n              actual: valType,\n            })\n          }\n        } else if (\n          key === 'replace' ||\n          key === 'scroll' ||\n          key === 'shallow' ||\n          key === 'passHref' ||\n          key === 'legacyBehavior'\n        ) {\n          if (props[key] != null && valType !== 'boolean') {\n            throw createPropError({\n              key,\n              expected: '`boolean`',\n              actual: valType,\n            })\n          }\n        } else if (key === 'prefetch') {\n          if (\n            props[key] != null &&\n            valType !== 'boolean' &&\n            props[key] !== 'auto'\n          ) {\n            throw createPropError({\n              key,\n              expected: '`boolean | \"auto\"`',\n              actual: valType,\n            })\n          }\n        } else {\n          // TypeScript trick for type-guarding:\n          const _: never = key\n        }\n      })\n    }\n\n    const { href, as } = React.useMemo(() => {\n      if (!router) {\n        const resolvedHref = formatStringOrUrl(hrefProp)\n        return {\n          href: resolvedHref,\n          as: asProp ? formatStringOrUrl(asProp) : resolvedHref,\n        }\n      }\n\n      const [resolvedHref, resolvedAs] = resolveHref(router, hrefProp, true)\n\n      return {\n        href: resolvedHref,\n        as: asProp ? resolveHref(router, asProp) : resolvedAs || resolvedHref,\n      }\n    }, [router, hrefProp, asProp])\n\n    const previousHref = React.useRef<string>(href)\n    const previousAs = React.useRef<string>(as)\n\n    // This will return the first child, if multiple are provided it will throw an error\n    let child: any\n    if (legacyBehavior) {\n      if (process.env.NODE_ENV === 'development') {\n        if (onClick) {\n          console.warn(\n            `\"onClick\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link`\n          )\n        }\n        if (onMouseEnterProp) {\n          console.warn(\n            `\"onMouseEnter\" was passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link`\n          )\n        }\n        try {\n          child = React.Children.only(children)\n        } catch (err) {\n          if (!children) {\n            throw new Error(\n              `No children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but one child is required https://nextjs.org/docs/messages/link-no-children`\n            )\n          }\n          throw new Error(\n            `Multiple children were passed to <Link> with \\`href\\` of \\`${hrefProp}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` +\n              (typeof window !== 'undefined'\n                ? \" \\nOpen your browser's console to view the Component stack trace.\"\n                : '')\n          )\n        }\n      } else {\n        child = React.Children.only(children)\n      }\n    } else {\n      if (process.env.NODE_ENV === 'development') {\n        if ((children as any)?.type === 'a') {\n          throw new Error(\n            'Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor'\n          )\n        }\n      }\n    }\n\n    const childRef: any = legacyBehavior\n      ? child && typeof child === 'object' && child.ref\n      : forwardedRef\n\n    const [setIntersectionRef, isVisible, resetVisible] = useIntersection({\n      rootMargin: '200px',\n    })\n    const setIntersectionWithResetRef = React.useCallback(\n      (el: Element | null) => {\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n          resetVisible()\n          previousAs.current = as\n          previousHref.current = href\n        }\n\n        setIntersectionRef(el)\n      },\n      [as, href, resetVisible, setIntersectionRef]\n    )\n\n    const setRef = useMergedRef(setIntersectionWithResetRef, childRef)\n\n    // Prefetch the URL if we haven't already and it's visible.\n    React.useEffect(() => {\n      // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n      if (process.env.NODE_ENV !== 'production') {\n        return\n      }\n\n      if (!router) {\n        return\n      }\n\n      // If we don't need to prefetch the URL, don't do prefetch.\n      if (!isVisible || !prefetchEnabled) {\n        return\n      }\n\n      // Prefetch the URL.\n      prefetch(router, href, as, { locale })\n    }, [as, href, isVisible, locale, prefetchEnabled, router?.locale, router])\n\n    const childProps: {\n      onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>\n      onMouseEnter: React.MouseEventHandler<HTMLAnchorElement>\n      onClick: React.MouseEventHandler<HTMLAnchorElement>\n      href?: string\n      ref?: any\n    } = {\n      ref: setRef,\n      onClick(e) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!e) {\n            throw new Error(\n              `Component rendered inside next/link has to pass click event to \"onClick\" prop.`\n            )\n          }\n        }\n\n        if (!legacyBehavior && typeof onClick === 'function') {\n          onClick(e)\n        }\n\n        if (\n          legacyBehavior &&\n          child.props &&\n          typeof child.props.onClick === 'function'\n        ) {\n          child.props.onClick(e)\n        }\n\n        if (!router) {\n          return\n        }\n\n        if (e.defaultPrevented) {\n          return\n        }\n\n        linkClicked(\n          e,\n          router,\n          href,\n          as,\n          replace,\n          shallow,\n          scroll,\n          locale,\n          onNavigate\n        )\n      },\n      onMouseEnter(e) {\n        if (!legacyBehavior && typeof onMouseEnterProp === 'function') {\n          onMouseEnterProp(e)\n        }\n\n        if (\n          legacyBehavior &&\n          child.props &&\n          typeof child.props.onMouseEnter === 'function'\n        ) {\n          child.props.onMouseEnter(e)\n        }\n\n        if (!router) {\n          return\n        }\n\n        prefetch(router, href, as, {\n          locale,\n          priority: true,\n          // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n          bypassPrefetchedCheck: true,\n        })\n      },\n      onTouchStart: process.env.__NEXT_LINK_NO_TOUCH_START\n        ? undefined\n        : function onTouchStart(e) {\n            if (!legacyBehavior && typeof onTouchStartProp === 'function') {\n              onTouchStartProp(e)\n            }\n\n            if (\n              legacyBehavior &&\n              child.props &&\n              typeof child.props.onTouchStart === 'function'\n            ) {\n              child.props.onTouchStart(e)\n            }\n\n            if (!router) {\n              return\n            }\n\n            prefetch(router, href, as, {\n              locale,\n              priority: true,\n              // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n              bypassPrefetchedCheck: true,\n            })\n          },\n    }\n\n    // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n    if (isAbsoluteUrl(as)) {\n      childProps.href = as\n    } else if (\n      !legacyBehavior ||\n      passHref ||\n      (child.type === 'a' && !('href' in child.props))\n    ) {\n      const curLocale = typeof locale !== 'undefined' ? locale : router?.locale\n\n      // we only render domain locales if we are currently on a domain locale\n      // so that locale links are still visitable in development/preview envs\n      const localeDomain =\n        router?.isLocaleDomain &&\n        getDomainLocale(as, curLocale, router?.locales, router?.domainLocales)\n\n      childProps.href =\n        localeDomain ||\n        addBasePath(addLocale(as, curLocale, router?.defaultLocale))\n    }\n\n    if (legacyBehavior) {\n      if (process.env.NODE_ENV === 'development') {\n        errorOnce(\n          '`legacyBehavior` is deprecated and will be removed in a future ' +\n            'release. A codemod is available to upgrade your components:\\n\\n' +\n            'npx @next/codemod@latest new-link .\\n\\n' +\n            'Learn more: https://nextjs.org/docs/app/building-your-application/upgrading/codemods#remove-a-tags-from-link-components'\n        )\n      }\n      return React.cloneElement(child, childProps)\n    }\n\n    return (\n      <a {...restProps} {...childProps}>\n        {children}\n      </a>\n    )\n  }\n)\n\nconst LinkStatusContext = createContext<{\n  pending: boolean\n}>({\n  // We do not support link status in the Pages Router, so we always return false\n  pending: false,\n})\n\nexport const useLinkStatus = () => {\n  // This behaviour is like React's useFormStatus. When the component is not under\n  // a <form> tag, it will get the default value, instead of throwing an error.\n  return useContext(LinkStatusContext)\n}\n\nexport default Link\n", "module.exports = require('./dist/client/link')\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgDgBA,QAAM,WAAA;eAANA;;MA9CAC,wBAAsB,WAAA;eAAtBA;;MAgCAC,wBAAsB,WAAA;eAAtBA;;;AAhCT,aAASD,uBACdE,cAA6B;AAE7B,YAAMC,QAAwB,CAAC;AAC/B,iBAAW,CAACC,KAAKC,KAAAA,KAAUH,aAAaI,QAAO,GAAI;AACjD,cAAMC,WAAWJ,MAAMC,GAAAA;AACvB,YAAI,OAAOG,aAAa,aAAa;AACnCJ,gBAAMC,GAAAA,IAAOC;QACf,WAAWG,MAAMC,QAAQF,QAAAA,GAAW;AAClCA,mBAASG,KAAKL,KAAAA;QAChB,OAAO;AACLF,gBAAMC,GAAAA,IAAO;YAACG;YAAUF;;QAC1B;MACF;AACA,aAAOF;IACT;AAEA,aAASQ,uBAAuBC,OAAc;AAC5C,UAAI,OAAOA,UAAU,UAAU;AAC7B,eAAOA;MACT;AAEA,UACG,OAAOA,UAAU,YAAY,CAACC,MAAMD,KAAAA,KACrC,OAAOA,UAAU,WACjB;AACA,eAAOE,OAAOF,KAAAA;MAChB,OAAO;AACL,eAAO;MACT;IACF;AAEO,aAASX,uBAAuBE,OAAqB;AAC1D,YAAMD,eAAe,IAAIa,gBAAAA;AACzB,iBAAW,CAACX,KAAKC,KAAAA,KAAUW,OAAOV,QAAQH,KAAAA,GAAQ;AAChD,YAAIK,MAAMC,QAAQJ,KAAAA,GAAQ;AACxB,qBAAWY,QAAQZ,OAAO;AACxBH,yBAAagB,OAAOd,KAAKO,uBAAuBM,IAAAA,CAAAA;UAClD;QACF,OAAO;AACLf,uBAAaiB,IAAIf,KAAKO,uBAAuBN,KAAAA,CAAAA;QAC/C;MACF;AACA,aAAOH;IACT;AAEO,aAASH,OACdqB,WACGC,kBAAmC;AAEtC,iBAAWnB,gBAAgBmB,kBAAkB;AAC3C,mBAAWjB,OAAOF,aAAaoB,KAAI,GAAI;AACrCF,iBAAOG,OAAOnB,GAAAA;QAChB;AAEA,mBAAW,CAACA,KAAKC,KAAAA,KAAUH,aAAaI,QAAO,GAAI;AACjDc,iBAAOF,OAAOd,KAAKC,KAAAA;QACrB;MACF;AAEA,aAAOe;IACT;;;;;AC/DA;;;;;;;;;;;;;MA4BgBI,WAAS,WAAA;eAATA;;MA6DAC,sBAAoB,WAAA;eAApBA;;MAfHC,eAAa,WAAA;eAAbA;;;;wEAlDgB;AAE7B,QAAMC,mBAAmB;AAElB,aAASH,UAAUI,QAAiB;AACzC,UAAI,EAAEC,MAAMC,SAAQ,IAAKF;AACzB,UAAIG,WAAWH,OAAOG,YAAY;AAClC,UAAIC,WAAWJ,OAAOI,YAAY;AAClC,UAAIC,OAAOL,OAAOK,QAAQ;AAC1B,UAAIC,QAAQN,OAAOM,SAAS;AAC5B,UAAIC,OAAuB;AAE3BN,aAAOA,OAAOO,mBAAmBP,IAAAA,EAAMQ,QAAQ,QAAQ,GAAA,IAAO,MAAM;AAEpE,UAAIT,OAAOO,MAAM;AACfA,eAAON,OAAOD,OAAOO;MACvB,WAAWL,UAAU;AACnBK,eAAON,QAAQ,CAACC,SAASQ,QAAQ,GAAA,IAAO,IAAIR,QAAAA,MAAcA;AAC1D,YAAIF,OAAOW,MAAM;AACfJ,kBAAQ,MAAMP,OAAOW;QACvB;MACF;AAEA,UAAIL,SAAS,OAAOA,UAAU,UAAU;AACtCA,gBAAQM,OAAOC,aAAYC,uBAAuBR,KAAAA,CAAAA;MACpD;AAEA,UAAIS,SAASf,OAAOe,UAAWT,SAAS,IAAIA,KAAAA,MAAY;AAExD,UAAIH,YAAY,CAACA,SAASa,SAAS,GAAA,EAAMb,aAAY;AAErD,UACEH,OAAOiB,YACL,CAACd,YAAYJ,iBAAiBmB,KAAKf,QAAAA,MAAcI,SAAS,OAC5D;AACAA,eAAO,QAAQA,QAAQ;AACvB,YAAIH,YAAYA,SAAS,CAAA,MAAO,IAAKA,YAAW,MAAMA;MACxD,WAAW,CAACG,MAAM;AAChBA,eAAO;MACT;AAEA,UAAIF,QAAQA,KAAK,CAAA,MAAO,IAAKA,QAAO,MAAMA;AAC1C,UAAIU,UAAUA,OAAO,CAAA,MAAO,IAAKA,UAAS,MAAMA;AAEhDX,iBAAWA,SAASK,QAAQ,SAASD,kBAAAA;AACrCO,eAASA,OAAON,QAAQ,KAAK,KAAA;AAE7B,aAAO,GAAGN,QAAAA,GAAWI,IAAAA,GAAOH,QAAAA,GAAWW,MAAAA,GAASV,IAAAA;IAClD;AAEO,QAAMP,gBAAgB;MAC3B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;AAGK,aAASD,qBAAqBsB,KAAc;AACjD,UAAIC,MAAwC;AAC1C,YAAID,QAAQ,QAAQ,OAAOA,QAAQ,UAAU;AAC3CE,iBAAOC,KAAKH,GAAAA,EAAKI,QAAQ,CAACC,QAAAA;AACxB,gBAAI,CAAC1B,cAAc2B,SAASD,GAAAA,GAAM;AAChCE,sBAAQC,KACN,qDAAqDH,GAAAA,EAAK;YAE9D;UACF,CAAA;QACF;MACF;AAEA,aAAO5B,UAAUuB,GAAAA;IACnB;;;;;;;;;;;mCCvGgBS,QAAAA;;;eAAAA;;;AAAT,aAASA,KACdC,QACAC,MAAS;AAET,YAAMC,UAAsC,CAAC;AAC7CC,aAAOF,KAAKD,MAAAA,EAAQI,QAAQ,CAACC,QAAAA;AAC3B,YAAI,CAACJ,KAAKK,SAASD,GAAAA,GAAW;AAC5BH,kBAAQG,GAAAA,IAAOL,OAAOK,GAAAA;QACxB;MACF,CAAA;AACA,aAAOH;IACT;;;;;;;;;;;;;;;;;;MCwZaK,aAAW,WAAA;eAAXA;;MAoBAC,yBAAuB,WAAA;eAAvBA;;MAPAC,mBAAiB,WAAA;eAAjBA;;MAZAC,gBAAc,WAAA;eAAdA;;MACAC,mBAAiB,WAAA;eAAjBA;;MATAC,IAAE,WAAA;eAAFA;;MACAC,IAAE,WAAA;eAAFA;;MAjXAC,YAAU,WAAA;eAAVA;;MAqQGC,UAAQ,WAAA;eAARA;;MA+BAC,gBAAc,WAAA;eAAdA;;MAXAC,mBAAiB,WAAA;eAAjBA;;MAKAC,QAAM,WAAA;eAANA;;MAPHC,eAAa,WAAA;eAAbA;;MAmBGC,WAAS,WAAA;eAATA;;MAkBMC,qBAAmB,WAAA;eAAnBA;;MAdNC,0BAAwB,WAAA;eAAxBA;;MA+GAC,gBAAc,WAAA;eAAdA;;;AA7ZT,QAAMT,aAAa;MAAC;MAAO;MAAO;MAAO;MAAO;MAAO;;AAqQvD,aAASC,SACdS,IAAK;AAEL,UAAIC,OAAO;AACX,UAAIC;AAEJ,aAAQ,IAAIC,SAAAA;AACV,YAAI,CAACF,MAAM;AACTA,iBAAO;AACPC,mBAASF,GAAAA,GAAMG,IAAAA;QACjB;AACA,eAAOD;MACT;IACF;AAIA,QAAME,qBAAqB;AACpB,QAAMT,gBAAgB,CAACU,QAAgBD,mBAAmBE,KAAKD,GAAAA;AAE/D,aAASZ,oBAAAA;AACd,YAAM,EAAEc,UAAUC,UAAUC,KAAI,IAAKC,OAAOC;AAC5C,aAAO,GAAGJ,QAAAA,KAAaC,QAAAA,GAAWC,OAAO,MAAMA,OAAO,EAAA;IACxD;AAEO,aAASf,SAAAA;AACd,YAAM,EAAEkB,KAAI,IAAKF,OAAOC;AACxB,YAAME,SAASpB,kBAAAA;AACf,aAAOmB,KAAKE,UAAUD,OAAOE,MAAM;IACrC;AAEO,aAASvB,eAAkBwB,WAA2B;AAC3D,aAAO,OAAOA,cAAc,WACxBA,YACAA,UAAUC,eAAeD,UAAUE,QAAQ;IACjD;AAEO,aAAStB,UAAUuB,KAAmB;AAC3C,aAAOA,IAAIC,YAAYD,IAAIE;IAC7B;AAEO,aAASvB,yBAAyBO,KAAW;AAClD,YAAMiB,WAAWjB,IAAIkB,MAAM,GAAA;AAC3B,YAAMC,aAAaF,SAAS,CAAA;AAE5B,aACEE,WAGGC,QAAQ,OAAO,GAAA,EACfA,QAAQ,UAAU,GAAA,KACpBH,SAAS,CAAA,IAAK,IAAIA,SAASI,MAAM,CAAA,EAAGC,KAAK,GAAA,CAAA,KAAS;IAEvD;AAEO,mBAAe9B,oBAIpB+B,KAAkCC,KAAM;;AACxC,UAAIC,MAAuC;AACzC,aAAIF,SAAIG,cAAJH,mBAAeI,iBAAiB;AAClC,gBAAMC,UAAU,IAAIzC,eAClBoC,GAAAA,CAAAA;AAEF,gBAAM,OAAA,eAAA,IAAIM,MAAMD,OAAAA,GAAV,qBAAA;mBAAA;wBAAA;0BAAA;UAAiB,CAAA;QACzB;MACF;AAEA,YAAMd,MAAMU,IAAIV,OAAQU,IAAIA,OAAOA,IAAIA,IAAIV;AAE3C,UAAI,CAACS,IAAII,iBAAiB;AACxB,YAAIH,IAAIA,OAAOA,IAAIb,WAAW;AAE5B,iBAAO;YACLmB,WAAW,MAAMtC,oBAAoBgC,IAAIb,WAAWa,IAAIA,GAAG;UAC7D;QACF;AACA,eAAO,CAAC;MACV;AAEA,YAAMO,QAAQ,MAAMR,IAAII,gBAAgBH,GAAAA;AAExC,UAAIV,OAAOvB,UAAUuB,GAAAA,GAAM;AACzB,eAAOiB;MACT;AAEA,UAAI,CAACA,OAAO;AACV,cAAMH,UAAU,IAAIzC,eAClBoC,GAAAA,CAAAA,+DAC8DQ,KAAAA;AAChE,cAAM,OAAA,eAAA,IAAIF,MAAMD,OAAAA,GAAV,qBAAA;iBAAA;sBAAA;wBAAA;QAAiB,CAAA;MACzB;AAEA,UAAIH,MAAuC;AACzC,YAAIO,OAAOC,KAAKF,KAAAA,EAAOrB,WAAW,KAAK,CAACc,IAAIA,KAAK;AAC/CU,kBAAQC,KACN,GAAGhD,eACDoC,GAAAA,CAAAA,iLACgL;QAEtL;MACF;AAEA,aAAOQ;IACT;AAEO,QAAMhD,KAAK,OAAOqD,gBAAgB;AAClC,QAAMpD,KACXD,MACC;MAAC;MAAQ;MAAW;MAA8BsD,MACjD,CAACC,WAAW,OAAOF,YAAYE,MAAAA,MAAY,UAAA;AAGxC,QAAM5D,cAAN,cAA0BmD,MAAAA;IAAO;AACjC,QAAMhD,iBAAN,cAA6BgD,MAAAA;IAAO;AACpC,QAAM/C,oBAAN,cAAgC+C,MAAAA;MAGrCU,YAAYC,MAAc;AACxB,cAAK;AACL,aAAKC,OAAO;AACZ,aAAK5B,OAAO;AACZ,aAAKe,UAAU,gCAAgCY,IAAAA;MACjD;IACF;AAEO,QAAM5D,oBAAN,cAAgCiD,MAAAA;MACrCU,YAAYC,MAAcZ,SAAiB;AACzC,cAAK;AACL,aAAKA,UAAU,wCAAwCY,IAAAA,IAAQZ,OAAAA;MACjE;IACF;AAEO,QAAMjD,0BAAN,cAAsCkD,MAAAA;MAE3CU,cAAc;AACZ,cAAK;AACL,aAAKE,OAAO;AACZ,aAAKb,UAAU;MACjB;IACF;AAWO,aAASlC,eAAegD,OAAY;AACzC,aAAOC,KAAKC,UAAU;QAAEhB,SAASc,MAAMd;QAASiB,OAAOH,MAAMG;MAAM,CAAA;IACrE;;;;;AC3cA;;;;;;mCAOgBC,uBAAAA;;;eAAAA;;;AAAT,aAASA,oBAAoBC,OAAa;AAC/C,aAAOA,MAAMC,QAAQ,OAAO,EAAA,KAAO;IACrC;;;;;ACTA;;;;;;mCAKgBC,aAAAA;;;eAAAA;;;AAAT,aAASA,UAAUC,MAAY;AACpC,YAAMC,YAAYD,KAAKE,QAAQ,GAAA;AAC/B,YAAMC,aAAaH,KAAKE,QAAQ,GAAA;AAChC,YAAME,WAAWD,aAAa,OAAOF,YAAY,KAAKE,aAAaF;AAEnE,UAAIG,YAAYH,YAAY,IAAI;AAC9B,eAAO;UACLI,UAAUL,KAAKM,UAAU,GAAGF,WAAWD,aAAaF,SAAAA;UACpDM,OAAOH,WACHJ,KAAKM,UAAUH,YAAYF,YAAY,KAAKA,YAAYO,MAAAA,IACxD;UACJC,MAAMR,YAAY,KAAKD,KAAKU,MAAMT,SAAAA,IAAa;QACjD;MACF;AAEA,aAAO;QAAEI,UAAUL;QAAMO,OAAO;QAAIE,MAAM;MAAG;IAC/C;;;;;;;;;;;mCCdaE,8BAAAA;;;eAAAA;;;;;AAAN,QAAMA,6BAA6B,CAACC,SAAAA;AACzC,UAAI,CAACA,KAAKC,WAAW,GAAA,KAAQC,QAAQC,IAAIC,8BAA8B;AACrE,eAAOJ;MACT;AAEA,YAAM,EAAEK,UAAUC,OAAOC,KAAI,KAAKC,GAAAA,WAAAA,WAAUR,IAAAA;AAC5C,UAAIE,QAAQC,IAAIM,uBAAuB;AACrC,YAAI,cAAcC,KAAKL,QAAAA,GAAW;AAChC,iBAAO,IAAGM,GAAAA,qBAAAA,qBAAoBN,QAAAA,CAAAA,GAAYC,KAAAA,GAAQC,IAAAA;QACpD,WAAWF,SAASO,SAAS,GAAA,GAAM;AACjC,iBAAO,GAAGP,QAAAA,GAAWC,KAAAA,GAAQC,IAAAA;QAC/B,OAAO;AACL,iBAAO,GAAGF,QAAAA,IAAYC,KAAAA,GAAQC,IAAAA;QAChC;MACF;AAEA,aAAO,IAAGI,GAAAA,qBAAAA,qBAAoBN,QAAAA,CAAAA,GAAYC,KAAAA,GAAQC,IAAAA;IACpD;;;;;;;;;;;;;;;;mCCfgBM,iBAAAA;;;eAAAA;;;;AAAT,aAASA,cAAcC,MAAcC,QAAc;AACxD,UAAI,OAAOD,SAAS,UAAU;AAC5B,eAAO;MACT;AAEA,YAAM,EAAEE,SAAQ,KAAKC,GAAAA,WAAAA,WAAUH,IAAAA;AAC/B,aAAOE,aAAaD,UAAUC,SAASE,WAAWH,SAAS,GAAA;IAC7D;;;;;;;;;;;mCCZgBI,eAAAA;;;eAAAA;;;;AAFhB,QAAMC,WAAYC,QAAQC,IAAIC,0BAAqC;AAE5D,aAASJ,YAAYK,MAAY;AACtC,cAAOC,GAAAA,eAAAA,eAAcD,MAAMJ,QAAAA;IAC7B;;;;;;;;;;;;;;;;mCCAgBM,cAAAA;;;eAAAA;;;;;AAAT,aAASA,WAAWC,KAAW;AAEpC,UAAI,EAACC,GAAAA,OAAAA,eAAcD,GAAAA,EAAM,QAAO;AAChC,UAAI;AAEF,cAAME,kBAAiBC,GAAAA,OAAAA,mBAAiB;AACxC,cAAMC,WAAW,IAAIC,IAAIL,KAAKE,cAAAA;AAC9B,eAAOE,SAASE,WAAWJ,mBAAkBK,GAAAA,aAAAA,aAAYH,SAASI,QAAQ;MAC5E,SAASC,GAAG;AACV,eAAO;MACT;IACF;;;;;;;;;;;;;;;;;;MCsNgBC,uBAAqB,WAAA;eAArBA;;MAzBAC,iBAAe,WAAA;eAAfA;;;AA9MhB,QAAMC,UAAN,MAAMA,SAAAA;MAOJC,OAAOC,SAAuB;AAC5B,aAAKC,QAAQD,QAAQE,MAAM,GAAA,EAAKC,OAAOC,OAAAA,GAAU,CAAA,GAAI,KAAA;MACvD;MAEAC,SAAmB;AACjB,eAAO,KAAKC,QAAO;MACrB;MAEQA,QAAQC,SAAiB,KAAe;AAC9C,cAAMC,gBAAgB;aAAI,KAAKC,SAASC,KAAI;UAAIC,KAAI;AACpD,YAAI,KAAKC,aAAa,MAAM;AAC1BJ,wBAAcK,OAAOL,cAAcM,QAAQ,IAAA,GAAO,CAAA;QACpD;AACA,YAAI,KAAKC,iBAAiB,MAAM;AAC9BP,wBAAcK,OAAOL,cAAcM,QAAQ,OAAA,GAAU,CAAA;QACvD;AACA,YAAI,KAAKE,yBAAyB,MAAM;AACtCR,wBAAcK,OAAOL,cAAcM,QAAQ,SAAA,GAAY,CAAA;QACzD;AAEA,cAAMG,SAAST,cACZU,IAAI,CAACC,MAAM,KAAKV,SAASW,IAAID,CAAAA,EAAIb,QAAQ,GAAGC,MAAAA,GAASY,CAAAA,GAAI,CAAA,EACzDE,OAAO,CAACC,MAAMC,SAAS;aAAID;aAASC;WAAO,CAAA,CAAE;AAEhD,YAAI,KAAKX,aAAa,MAAM;AAC1BK,iBAAOO,KAAI,GACN,KAAKf,SAASW,IAAI,IAAA,EAAOd,QAAQ,GAAGC,MAAAA,IAAU,KAAKK,QAAQ,IAAI,CAAA;QAEtE;AAEA,YAAI,CAAC,KAAKa,aAAa;AACrB,gBAAMC,IAAInB,WAAW,MAAM,MAAMA,OAAOoB,MAAM,GAAG,EAAC;AAClD,cAAI,KAAKX,wBAAwB,MAAM;AACrC,kBAAM,OAAA,eAAA,IAAIY,MACR,uFAAuFF,CAAAA,UAAWA,CAAAA,QAAS,KAAKV,oBAAoB,OAAO,GADvI,qBAAA;qBAAA;0BAAA;4BAAA;YAEN,CAAA;UACF;AAEAC,iBAAOY,QAAQH,CAAAA;QACjB;AAEA,YAAI,KAAKX,iBAAiB,MAAM;AAC9BE,iBAAOO,KAAI,GACN,KAAKf,SACLW,IAAI,OAAA,EACJd,QAAQ,GAAGC,MAAAA,OAAa,KAAKQ,YAAY,IAAI,CAAA;QAEpD;AAEA,YAAI,KAAKC,yBAAyB,MAAM;AACtCC,iBAAOO,KAAI,GACN,KAAKf,SACLW,IAAI,SAAA,EACJd,QAAQ,GAAGC,MAAAA,QAAc,KAAKS,oBAAoB,KAAK,CAAA;QAE9D;AAEA,eAAOC;MACT;MAEQhB,QACN6B,UACAC,WACAC,YACM;AACN,YAAIF,SAASG,WAAW,GAAG;AACzB,eAAKR,cAAc;AACnB;QACF;AAEA,YAAIO,YAAY;AACd,gBAAM,OAAA,eAAA,IAAIJ,MAAM,6CAA6C,GAAvD,qBAAA;mBAAA;wBAAA;0BAAA;UAAuD,CAAA;QAC/D;AAGA,YAAIM,cAAcJ,SAAS,CAAA;AAG3B,YAAII,YAAYC,WAAW,GAAA,KAAQD,YAAYE,SAAS,GAAA,GAAM;AAmC5D,cAASC,aAAT,SAAoBC,cAA6BC,UAAgB;AAC/D,gBAAID,iBAAiB,MAAM;AAMzB,kBAAIA,iBAAiBC,UAAU;AAE7B,sBAAM,OAAA,eAAA,IAAIX,MACR,mEAAmEU,YAAAA,UAAsBC,QAAAA,KAAa,GADlG,qBAAA;yBAAA;8BAAA;gCAAA;gBAEN,CAAA;cACF;YACF;AAEAR,sBAAUS,QAAQ,CAACC,SAAAA;AACjB,kBAAIA,SAASF,UAAU;AACrB,sBAAM,OAAA,eAAA,IAAIX,MACR,uCAAuCW,QAAAA,uCAA+C,GADlF,qBAAA;yBAAA;8BAAA;gCAAA;gBAEN,CAAA;cACF;AAEA,kBAAIE,KAAKC,QAAQ,OAAO,EAAA,MAAQR,YAAYQ,QAAQ,OAAO,EAAA,GAAK;AAC9D,sBAAM,OAAA,eAAA,IAAId,MACR,mCAAmCa,IAAAA,UAAcF,QAAAA,gEAAwE,GADrH,qBAAA;yBAAA;8BAAA;gCAAA;gBAEN,CAAA;cACF;YACF,CAAA;AAEAR,sBAAUP,KAAKe,QAAAA;UACjB;AA/DA,cAAII,cAAcT,YAAYP,MAAM,GAAG,EAAC;AAExC,cAAIiB,aAAa;AACjB,cAAID,YAAYR,WAAW,GAAA,KAAQQ,YAAYP,SAAS,GAAA,GAAM;AAE5DO,0BAAcA,YAAYhB,MAAM,GAAG,EAAC;AACpCiB,yBAAa;UACf;AAEA,cAAID,YAAYR,WAAW,GAAA,GAAM;AAC/B,kBAAM,OAAA,eAAA,IAAIP,MACR,6CAA6Ce,WAAAA,2BAAsC,GAD/E,qBAAA;qBAAA;0BAAA;4BAAA;YAEN,CAAA;UACF;AAEA,cAAIA,YAAYR,WAAW,KAAA,GAAQ;AAEjCQ,0BAAcA,YAAYE,UAAU,CAAA;AACpCb,yBAAa;UACf;AAEA,cAAIW,YAAYR,WAAW,GAAA,KAAQQ,YAAYP,SAAS,GAAA,GAAM;AAC5D,kBAAM,OAAA,eAAA,IAAIR,MACR,4DAA4De,WAAAA,KAAgB,GADxE,qBAAA;qBAAA;0BAAA;4BAAA;YAEN,CAAA;UACF;AAEA,cAAIA,YAAYR,WAAW,GAAA,GAAM;AAC/B,kBAAM,OAAA,eAAA,IAAIP,MACR,wDAAwDe,WAAAA,KAAgB,GADpE,qBAAA;qBAAA;0BAAA;4BAAA;YAEN,CAAA;UACF;AAkCA,cAAIX,YAAY;AACd,gBAAIY,YAAY;AACd,kBAAI,KAAK7B,gBAAgB,MAAM;AAC7B,sBAAM,OAAA,eAAA,IAAIa,MACR,wFAAwF,KAAKb,YAAY,WAAWe,SAAS,CAAA,CAAE,MAAM,GADjI,qBAAA;yBAAA;8BAAA;gCAAA;gBAEN,CAAA;cACF;AAEAO,yBAAW,KAAKrB,sBAAsB2B,WAAAA;AAEtC,mBAAK3B,uBAAuB2B;AAE5BT,4BAAc;YAChB,OAAO;AACL,kBAAI,KAAKlB,wBAAwB,MAAM;AACrC,sBAAM,OAAA,eAAA,IAAIY,MACR,yFAAyF,KAAKZ,oBAAoB,YAAYc,SAAS,CAAA,CAAE,KAAK,GAD1I,qBAAA;yBAAA;8BAAA;gCAAA;gBAEN,CAAA;cACF;AAEAO,yBAAW,KAAKtB,cAAc4B,WAAAA;AAE9B,mBAAK5B,eAAe4B;AAEpBT,4BAAc;YAChB;UACF,OAAO;AACL,gBAAIU,YAAY;AACd,oBAAM,OAAA,eAAA,IAAIhB,MACR,qDAAqDE,SAAS,CAAA,CAAE,KAAK,GADjE,qBAAA;uBAAA;4BAAA;8BAAA;cAEN,CAAA;YACF;AACAO,uBAAW,KAAKzB,UAAU+B,WAAAA;AAE1B,iBAAK/B,WAAW+B;AAEhBT,0BAAc;UAChB;QACF;AAGA,YAAI,CAAC,KAAKzB,SAASqC,IAAIZ,WAAAA,GAAc;AACnC,eAAKzB,SAASsC,IAAIb,aAAa,IAAIpC,SAAAA,CAAAA;QACrC;AAEA,aAAKW,SACFW,IAAIc,WAAAA,EACJjC,QAAQ6B,SAASH,MAAM,CAAA,GAAII,WAAWC,UAAAA;MAC3C;;aAvMAP,cAAuB;aACvBhB,WAAiC,oBAAIuC,IAAAA;aACrCpC,WAA0B;aAC1BG,eAA8B;aAC9BC,uBAAsC;;IAoMxC;AAKO,aAASnB,gBACdoD,iBAAsC;AAatC,YAAMC,OAAO,IAAIpD,QAAAA;AAGjBmD,sBAAgBT,QAAQ,CAACW,aAAaD,KAAKnD,OAAOoD,QAAAA,CAAAA;AAElD,aAAOD,KAAK7C,OAAM;IACpB;AAKO,aAAST,sBACdwD,SACAC,QAA0B;AAI1B,YAAMC,UAAkC,CAAC;AACzC,YAAMC,YAAsB,CAAA;AAC5B,eAASC,IAAI,GAAGA,IAAIJ,QAAQnB,QAAQuB,KAAK;AACvC,cAAMC,WAAWJ,OAAOD,QAAQI,CAAAA,CAAE;AAClCF,gBAAQG,QAAAA,IAAYD;AACpBD,kBAAUC,CAAAA,IAAKC;MACjB;AAGA,YAAMC,SAAS7D,gBAAgB0D,SAAAA;AAI/B,aAAOG,OAAOxC,IAAI,CAACuC,aAAaL,QAAQE,QAAQG,QAAAA,CAAS,CAAC;IAC5D;;;;;AC3PA;;;;;;mCAIgBE,sBAAAA;;;eAAAA;;;AAAT,aAASA,mBAAmBC,MAAY;AAC7C,aAAOA,KAAKC,WAAW,GAAA,IAAOD,OAAO,IAAIA,IAAAA;IAC3C;;;;;;;;;;;;;;;;;;MCgBgBE,kBAAgB,WAAA;eAAhBA;;MAmCAC,iBAAe,WAAA;eAAfA;;;;;AAnCT,aAASD,iBAAiBE,OAAa;AAC5C,cAAOC,GAAAA,oBAAAA,oBACLD,MAAME,MAAM,GAAA,EAAKC,OAAO,CAACC,UAAUC,SAASC,OAAOC,aAAAA;AAEjD,YAAI,CAACF,SAAS;AACZ,iBAAOD;QACT;AAGA,aAAII,GAAAA,SAAAA,gBAAeH,OAAAA,GAAU;AAC3B,iBAAOD;QACT;AAGA,YAAIC,QAAQ,CAAA,MAAO,KAAK;AACtB,iBAAOD;QACT;AAGA,aACGC,YAAY,UAAUA,YAAY,YACnCC,UAAUC,SAASE,SAAS,GAC5B;AACA,iBAAOL;QACT;AAEA,eAAO,GAAGA,QAAAA,IAAYC,OAAAA;MACxB,GAAG,EAAA,CAAA;IAEP;AAMO,aAASN,gBAAgBW,KAAW;AACzC,aAAOA,IAAIC;QACT;;QAEA;MAAA;IAEJ;;;;;;;;;;;;;;;;;;MC5DaC,4BAA0B,WAAA;eAA1BA;;MAiCGC,qCAAmC,WAAA;eAAnCA;;MA1BAC,4BAA0B,WAAA;eAA1BA;;;;AAPT,QAAMF,6BAA6B;MACxC;MACA;MACA;MACA;;AAGK,aAASE,2BAA2BC,MAAY;AAErD,aACEA,KACGC,MAAM,GAAA,EACNC,KAAK,CAACC,YACLN,2BAA2BK,KAAK,CAACE,MAAMD,QAAQE,WAAWD,CAAAA,CAAAA,CAAAA,MACtDE;IAEZ;AAiBO,aAASR,oCACdE,MAAY;AAEZ,UAAIO;AACJ,UAAIC;AACJ,UAAIC;AAEJ,iBAAWN,WAAWH,KAAKC,MAAM,GAAA,GAAM;AACrCO,iBAASX,2BAA2BK,KAAK,CAACE,MAAMD,QAAQE,WAAWD,CAAAA,CAAAA;AACnE,YAAII,QAAQ;;AACT,WAACD,mBAAmBE,gBAAAA,IAAoBT,KAAKC,MAAMO,QAAQ,CAAA;AAC5D;QACF;MACF;AAEA,UAAI,CAACD,qBAAqB,CAACC,UAAU,CAACC,kBAAkB;AACtD,cAAM,OAAA,eAAA,IAAIC,MACR,+BAA+BV,IAAAA,mFAAuF,GADlH,qBAAA;iBAAA;sBAAA;wBAAA;QAEN,CAAA;MACF;AAEAO,2BAAoBI,GAAAA,UAAAA,kBAAiBJ,iBAAAA;AAErC,cAAQC,QAAAA;QACN,KAAK;AAEH,cAAID,sBAAsB,KAAK;AAC7BE,+BAAmB,IAAIA,gBAAAA;UACzB,OAAO;AACLA,+BAAmBF,oBAAoB,MAAME;UAC/C;AACA;QACF,KAAK;AAEH,cAAIF,sBAAsB,KAAK;AAC7B,kBAAM,OAAA,eAAA,IAAIG,MACR,+BAA+BV,IAAAA,8DAAkE,GAD7F,qBAAA;qBAAA;0BAAA;4BAAA;YAEN,CAAA;UACF;AACAS,6BAAmBF,kBAChBN,MAAM,GAAA,EACNW,MAAM,GAAG,EAAC,EACVC,OAAOJ,gBAAAA,EACPK,KAAK,GAAA;AACR;QACF,KAAK;AAEHL,6BAAmB,MAAMA;AACzB;QACF,KAAK;AAGH,gBAAMM,yBAAyBR,kBAAkBN,MAAM,GAAA;AACvD,cAAIc,uBAAuBC,UAAU,GAAG;AACtC,kBAAM,OAAA,eAAA,IAAIN,MACR,+BAA+BV,IAAAA,iEAAqE,GADhG,qBAAA;qBAAA;0BAAA;4BAAA;YAEN,CAAA;UACF;AAEAS,6BAAmBM,uBAChBH,MAAM,GAAG,EAAC,EACVC,OAAOJ,gBAAAA,EACPK,KAAK,GAAA;AACR;QACF;AACE,gBAAM,OAAA,eAAA,IAAIJ,MAAM,8BAAA,GAAV,qBAAA;mBAAA;wBAAA;0BAAA;UAAwC,CAAA;MAClD;AAEA,aAAO;QAAEH;QAAmBE;MAAiB;IAC/C;;;;;;;;;;;mCCvFgBQ,kBAAAA;;;eAAAA;;;;AAZhB,QAAMC,aAAa;AAGnB,QAAMC,oBAAoB;AASnB,aAASF,eAAeG,OAAeC,SAAkB,MAAI;AAClE,WAAIC,GAAAA,oBAAAA,4BAA2BF,KAAAA,GAAQ;AACrCA,iBAAQG,GAAAA,oBAAAA,qCAAoCH,KAAAA,EAAOI;MACrD;AAEA,UAAIH,QAAQ;AACV,eAAOF,kBAAkBM,KAAKL,KAAAA;MAChC;AAEA,aAAOF,WAAWO,KAAKL,KAAAA;IACzB;;;;;;;;;;;;;;;;;;MC5B0BM,uBAAqB,WAAA;eAArBA,cAAAA;;MAAjBC,iBAAe,WAAA;eAAfA,cAAAA;;MACAC,gBAAc,WAAA;eAAdA,WAAAA;;;;;;;;;ACDT;AAAA;AAAA,KAAC,MAAI;AAAC;AAAa,UAAG,OAAO,wBAAsB,YAAY,qBAAoB,KAAG,YAAU;AAAI,UAAI,IAAE,CAAC;AAAE,OAAC,MAAI;AAAC,YAAI,IAAE;AAAE,eAAO,eAAe,GAAE,cAAa,EAAC,OAAM,KAAI,CAAC;AAAE,UAAE,eAAa,EAAE,iBAAe,EAAE,mBAAiB,EAAE,QAAM,EAAE,mBAAiB,EAAE,UAAQ,EAAE,QAAM;AAAO,iBAAS,MAAMC,IAAE;AAAC,cAAIC,KAAE,CAAC;AAAE,cAAI,IAAE;AAAE,iBAAM,IAAED,GAAE,QAAO;AAAC,gBAAI,IAAEA,GAAE,CAAC;AAAE,gBAAG,MAAI,OAAK,MAAI,OAAK,MAAI,KAAI;AAAC,cAAAC,GAAE,KAAK,EAAC,MAAK,YAAW,OAAM,GAAE,OAAMD,GAAE,GAAG,EAAC,CAAC;AAAE;AAAA,YAAQ;AAAC,gBAAG,MAAI,MAAK;AAAC,cAAAC,GAAE,KAAK,EAAC,MAAK,gBAAe,OAAM,KAAI,OAAMD,GAAE,GAAG,EAAC,CAAC;AAAE;AAAA,YAAQ;AAAC,gBAAG,MAAI,KAAI;AAAC,cAAAC,GAAE,KAAK,EAAC,MAAK,QAAO,OAAM,GAAE,OAAMD,GAAE,GAAG,EAAC,CAAC;AAAE;AAAA,YAAQ;AAAC,gBAAG,MAAI,KAAI;AAAC,cAAAC,GAAE,KAAK,EAAC,MAAK,SAAQ,OAAM,GAAE,OAAMD,GAAE,GAAG,EAAC,CAAC;AAAE;AAAA,YAAQ;AAAC,gBAAG,MAAI,KAAI;AAAC,kBAAI,IAAE;AAAG,kBAAI,IAAE,IAAE;AAAE,qBAAM,IAAEA,GAAE,QAAO;AAAC,oBAAI,IAAEA,GAAE,WAAW,CAAC;AAAE,oBAAG,KAAG,MAAI,KAAG,MAAI,KAAG,MAAI,KAAG,MAAI,KAAG,MAAI,KAAG,OAAK,MAAI,IAAG;AAAC,uBAAGA,GAAE,GAAG;AAAE;AAAA,gBAAQ;AAAC;AAAA,cAAK;AAAC,kBAAG,CAAC,EAAE,OAAM,IAAI,UAAU,6BAA6B,OAAO,CAAC,CAAC;AAAE,cAAAC,GAAE,KAAK,EAAC,MAAK,QAAO,OAAM,GAAE,OAAM,EAAC,CAAC;AAAE,kBAAE;AAAE;AAAA,YAAQ;AAAC,gBAAG,MAAI,KAAI;AAAC,kBAAI,IAAE;AAAE,kBAAI,IAAE;AAAG,kBAAI,IAAE,IAAE;AAAE,kBAAGD,GAAE,CAAC,MAAI,KAAI;AAAC,sBAAM,IAAI,UAAU,oCAAoC,OAAO,CAAC,CAAC;AAAA,cAAC;AAAC,qBAAM,IAAEA,GAAE,QAAO;AAAC,oBAAGA,GAAE,CAAC,MAAI,MAAK;AAAC,uBAAGA,GAAE,GAAG,IAAEA,GAAE,GAAG;AAAE;AAAA,gBAAQ;AAAC,oBAAGA,GAAE,CAAC,MAAI,KAAI;AAAC;AAAI,sBAAG,MAAI,GAAE;AAAC;AAAI;AAAA,kBAAK;AAAA,gBAAC,WAASA,GAAE,CAAC,MAAI,KAAI;AAAC;AAAI,sBAAGA,GAAE,IAAE,CAAC,MAAI,KAAI;AAAC,0BAAM,IAAI,UAAU,uCAAuC,OAAO,CAAC,CAAC;AAAA,kBAAC;AAAA,gBAAC;AAAC,qBAAGA,GAAE,GAAG;AAAA,cAAC;AAAC,kBAAG,EAAE,OAAM,IAAI,UAAU,yBAAyB,OAAO,CAAC,CAAC;AAAE,kBAAG,CAAC,EAAE,OAAM,IAAI,UAAU,sBAAsB,OAAO,CAAC,CAAC;AAAE,cAAAC,GAAE,KAAK,EAAC,MAAK,WAAU,OAAM,GAAE,OAAM,EAAC,CAAC;AAAE,kBAAE;AAAE;AAAA,YAAQ;AAAC,YAAAA,GAAE,KAAK,EAAC,MAAK,QAAO,OAAM,GAAE,OAAMD,GAAE,GAAG,EAAC,CAAC;AAAA,UAAC;AAAC,UAAAC,GAAE,KAAK,EAAC,MAAK,OAAM,OAAM,GAAE,OAAM,GAAE,CAAC;AAAE,iBAAOA;AAAA,QAAC;AAAC,iBAAS,MAAMD,IAAEC,IAAE;AAAC,cAAGA,OAAI,QAAO;AAAC,YAAAA,KAAE,CAAC;AAAA,UAAC;AAAC,cAAI,IAAE,MAAMD,EAAC;AAAE,cAAI,IAAEC,GAAE,UAAS,IAAE,MAAI,SAAO,OAAK,GAAE,IAAEA,GAAE,WAAU,IAAE,MAAI,SAAO,QAAM;AAAE,cAAI,IAAE,CAAC;AAAE,cAAI,IAAE;AAAE,cAAI,IAAE;AAAE,cAAI,IAAE;AAAG,cAAI,aAAW,SAASD,IAAE;AAAC,gBAAG,IAAE,EAAE,UAAQ,EAAE,CAAC,EAAE,SAAOA,GAAE,QAAO,EAAE,GAAG,EAAE;AAAA,UAAK;AAAE,cAAI,cAAY,SAASA,IAAE;AAAC,gBAAIC,KAAE,WAAWD,EAAC;AAAE,gBAAGC,OAAI,OAAU,QAAOA;AAAE,gBAAIC,KAAE,EAAE,CAAC,GAAEC,KAAED,GAAE,MAAKE,KAAEF,GAAE;AAAM,kBAAM,IAAI,UAAU,cAAc,OAAOC,IAAE,MAAM,EAAE,OAAOC,IAAE,aAAa,EAAE,OAAOJ,EAAC,CAAC;AAAA,UAAC;AAAE,cAAI,cAAY,WAAU;AAAC,gBAAIA,KAAE;AAAG,gBAAIC;AAAE,mBAAMA,KAAE,WAAW,MAAM,KAAG,WAAW,cAAc,GAAE;AAAC,cAAAD,MAAGC;AAAA,YAAC;AAAC,mBAAOD;AAAA,UAAC;AAAE,cAAI,SAAO,SAASA,IAAE;AAAC,qBAAQC,KAAE,GAAEI,KAAE,GAAEJ,KAAEI,GAAE,QAAOJ,MAAI;AAAC,kBAAIC,KAAEG,GAAEJ,EAAC;AAAE,kBAAGD,GAAE,QAAQE,EAAC,IAAE,GAAG,QAAO;AAAA,YAAI;AAAC,mBAAO;AAAA,UAAK;AAAE,cAAI,cAAY,SAASF,IAAE;AAAC,gBAAIC,KAAE,EAAE,EAAE,SAAO,CAAC;AAAE,gBAAII,KAAEL,OAAIC,MAAG,OAAOA,OAAI,WAASA,KAAE;AAAI,gBAAGA,MAAG,CAACI,IAAE;AAAC,oBAAM,IAAI,UAAU,8DAA8D,OAAOJ,GAAE,MAAK,GAAG,CAAC;AAAA,YAAC;AAAC,gBAAG,CAACI,MAAG,OAAOA,EAAC,EAAE,QAAM,KAAK,OAAO,aAAa,CAAC,GAAE,KAAK;AAAE,mBAAM,SAAS,OAAO,aAAaA,EAAC,GAAE,KAAK,EAAE,OAAO,aAAa,CAAC,GAAE,MAAM;AAAA,UAAC;AAAE,iBAAM,IAAE,EAAE,QAAO;AAAC,gBAAI,IAAE,WAAW,MAAM;AAAE,gBAAI,IAAE,WAAW,MAAM;AAAE,gBAAI,IAAE,WAAW,SAAS;AAAE,gBAAG,KAAG,GAAE;AAAC,kBAAI,IAAE,KAAG;AAAG,kBAAG,EAAE,QAAQ,CAAC,MAAI,IAAG;AAAC,qBAAG;AAAE,oBAAE;AAAA,cAAE;AAAC,kBAAG,GAAE;AAAC,kBAAE,KAAK,CAAC;AAAE,oBAAE;AAAA,cAAE;AAAC,gBAAE,KAAK,EAAC,MAAK,KAAG,KAAI,QAAO,GAAE,QAAO,IAAG,SAAQ,KAAG,YAAY,CAAC,GAAE,UAAS,WAAW,UAAU,KAAG,GAAE,CAAC;AAAE;AAAA,YAAQ;AAAC,gBAAI,IAAE,KAAG,WAAW,cAAc;AAAE,gBAAG,GAAE;AAAC,mBAAG;AAAE;AAAA,YAAQ;AAAC,gBAAG,GAAE;AAAC,gBAAE,KAAK,CAAC;AAAE,kBAAE;AAAA,YAAE;AAAC,gBAAI,IAAE,WAAW,MAAM;AAAE,gBAAG,GAAE;AAAC,kBAAI,IAAE,YAAY;AAAE,kBAAI,IAAE,WAAW,MAAM,KAAG;AAAG,kBAAI,IAAE,WAAW,SAAS,KAAG;AAAG,kBAAI,IAAE,YAAY;AAAE,0BAAY,OAAO;AAAE,gBAAE,KAAK,EAAC,MAAK,MAAI,IAAE,MAAI,KAAI,SAAQ,KAAG,CAAC,IAAE,YAAY,CAAC,IAAE,GAAE,QAAO,GAAE,QAAO,GAAE,UAAS,WAAW,UAAU,KAAG,GAAE,CAAC;AAAE;AAAA,YAAQ;AAAC,wBAAY,KAAK;AAAA,UAAC;AAAC,iBAAO;AAAA,QAAC;AAAC,UAAE,QAAM;AAAM,iBAAS,QAAQL,IAAEC,IAAE;AAAC,iBAAO,iBAAiB,MAAMD,IAAEC,EAAC,GAAEA,EAAC;AAAA,QAAC;AAAC,UAAE,UAAQ;AAAQ,iBAAS,iBAAiBD,IAAEC,IAAE;AAAC,cAAGA,OAAI,QAAO;AAAC,YAAAA,KAAE,CAAC;AAAA,UAAC;AAAC,cAAI,IAAE,MAAMA,EAAC;AAAE,cAAI,IAAEA,GAAE,QAAO,IAAE,MAAI,SAAO,SAASD,IAAE;AAAC,mBAAOA;AAAA,UAAC,IAAE,GAAE,IAAEC,GAAE,UAAS,IAAE,MAAI,SAAO,OAAK;AAAE,cAAI,IAAED,GAAE,KAAK,SAASA,IAAE;AAAC,gBAAG,OAAOA,OAAI,UAAS;AAAC,qBAAO,IAAI,OAAO,OAAO,OAAOA,GAAE,SAAQ,IAAI,GAAE,CAAC;AAAA,YAAC;AAAA,UAAC,EAAE;AAAE,iBAAO,SAASC,IAAE;AAAC,gBAAII,KAAE;AAAG,qBAAQH,KAAE,GAAEA,KAAEF,GAAE,QAAOE,MAAI;AAAC,kBAAIE,KAAEJ,GAAEE,EAAC;AAAE,kBAAG,OAAOE,OAAI,UAAS;AAAC,gBAAAC,MAAGD;AAAE;AAAA,cAAQ;AAAC,kBAAI,IAAEH,KAAEA,GAAEG,GAAE,IAAI,IAAE;AAAU,kBAAI,IAAEA,GAAE,aAAW,OAAKA,GAAE,aAAW;AAAI,kBAAI,IAAEA,GAAE,aAAW,OAAKA,GAAE,aAAW;AAAI,kBAAG,MAAM,QAAQ,CAAC,GAAE;AAAC,oBAAG,CAAC,GAAE;AAAC,wBAAM,IAAI,UAAU,aAAa,OAAOA,GAAE,MAAK,mCAAmC,CAAC;AAAA,gBAAC;AAAC,oBAAG,EAAE,WAAS,GAAE;AAAC,sBAAG,EAAE;AAAS,wBAAM,IAAI,UAAU,aAAa,OAAOA,GAAE,MAAK,mBAAmB,CAAC;AAAA,gBAAC;AAAC,yBAAQ,IAAE,GAAE,IAAE,EAAE,QAAO,KAAI;AAAC,sBAAI,IAAE,EAAE,EAAE,CAAC,GAAEA,EAAC;AAAE,sBAAG,KAAG,CAAC,EAAEF,EAAC,EAAE,KAAK,CAAC,GAAE;AAAC,0BAAM,IAAI,UAAU,iBAAiB,OAAOE,GAAE,MAAK,cAAc,EAAE,OAAOA,GAAE,SAAQ,cAAc,EAAE,OAAO,GAAE,GAAG,CAAC;AAAA,kBAAC;AAAC,kBAAAC,MAAGD,GAAE,SAAO,IAAEA,GAAE;AAAA,gBAAM;AAAC;AAAA,cAAQ;AAAC,kBAAG,OAAO,MAAI,YAAU,OAAO,MAAI,UAAS;AAAC,oBAAI,IAAE,EAAE,OAAO,CAAC,GAAEA,EAAC;AAAE,oBAAG,KAAG,CAAC,EAAEF,EAAC,EAAE,KAAK,CAAC,GAAE;AAAC,wBAAM,IAAI,UAAU,aAAa,OAAOE,GAAE,MAAK,cAAc,EAAE,OAAOA,GAAE,SAAQ,cAAc,EAAE,OAAO,GAAE,GAAG,CAAC;AAAA,gBAAC;AAAC,gBAAAC,MAAGD,GAAE,SAAO,IAAEA,GAAE;AAAO;AAAA,cAAQ;AAAC,kBAAG,EAAE;AAAS,kBAAI,IAAE,IAAE,aAAW;AAAW,oBAAM,IAAI,UAAU,aAAa,OAAOA,GAAE,MAAK,UAAU,EAAE,OAAO,CAAC,CAAC;AAAA,YAAC;AAAC,mBAAOC;AAAA,UAAC;AAAA,QAAC;AAAC,UAAE,mBAAiB;AAAiB,iBAAS,MAAML,IAAEC,IAAE;AAAC,cAAI,IAAE,CAAC;AAAE,cAAI,IAAE,aAAaD,IAAE,GAAEC,EAAC;AAAE,iBAAO,iBAAiB,GAAE,GAAEA,EAAC;AAAA,QAAC;AAAC,UAAE,QAAM;AAAM,iBAAS,iBAAiBD,IAAEC,IAAE,GAAE;AAAC,cAAG,MAAI,QAAO;AAAC,gBAAE,CAAC;AAAA,UAAC;AAAC,cAAI,IAAE,EAAE,QAAO,IAAE,MAAI,SAAO,SAASD,IAAE;AAAC,mBAAOA;AAAA,UAAC,IAAE;AAAE,iBAAO,SAASK,IAAE;AAAC,gBAAIH,KAAEF,GAAE,KAAKK,EAAC;AAAE,gBAAG,CAACH,GAAE,QAAO;AAAM,gBAAI,IAAEA,GAAE,CAAC,GAAE,IAAEA,GAAE;AAAM,gBAAI,IAAE,uBAAO,OAAO,IAAI;AAAE,gBAAI,UAAQ,SAASF,IAAE;AAAC,kBAAGE,GAAEF,EAAC,MAAI,OAAU,QAAM;AAAW,kBAAIK,KAAEJ,GAAED,KAAE,CAAC;AAAE,kBAAGK,GAAE,aAAW,OAAKA,GAAE,aAAW,KAAI;AAAC,kBAAEA,GAAE,IAAI,IAAEH,GAAEF,EAAC,EAAE,MAAMK,GAAE,SAAOA,GAAE,MAAM,EAAE,KAAK,SAASL,IAAE;AAAC,yBAAO,EAAEA,IAAEK,EAAC;AAAA,gBAAC,EAAE;AAAA,cAAC,OAAK;AAAC,kBAAEA,GAAE,IAAI,IAAE,EAAEH,GAAEF,EAAC,GAAEK,EAAC;AAAA,cAAC;AAAA,YAAC;AAAE,qBAAQ,IAAE,GAAE,IAAEH,GAAE,QAAO,KAAI;AAAC,sBAAQ,CAAC;AAAA,YAAC;AAAC,mBAAM,EAAC,MAAK,GAAE,OAAM,GAAE,QAAO,EAAC;AAAA,UAAC;AAAA,QAAC;AAAC,UAAE,mBAAiB;AAAiB,iBAAS,aAAaF,IAAE;AAAC,iBAAOA,GAAE,QAAQ,6BAA4B,MAAM;AAAA,QAAC;AAAC,iBAAS,MAAMA,IAAE;AAAC,iBAAOA,MAAGA,GAAE,YAAU,KAAG;AAAA,QAAG;AAAC,iBAAS,eAAeA,IAAEC,IAAE;AAAC,cAAG,CAACA,GAAE,QAAOD;AAAE,cAAI,IAAE;AAA0B,cAAI,IAAE;AAAE,cAAI,IAAE,EAAE,KAAKA,GAAE,MAAM;AAAE,iBAAM,GAAE;AAAC,YAAAC,GAAE,KAAK,EAAC,MAAK,EAAE,CAAC,KAAG,KAAI,QAAO,IAAG,QAAO,IAAG,UAAS,IAAG,SAAQ,GAAE,CAAC;AAAE,gBAAE,EAAE,KAAKD,GAAE,MAAM;AAAA,UAAC;AAAC,iBAAOA;AAAA,QAAC;AAAC,iBAAS,cAAcA,IAAEC,IAAE,GAAE;AAAC,cAAI,IAAED,GAAE,KAAK,SAASA,IAAE;AAAC,mBAAO,aAAaA,IAAEC,IAAE,CAAC,EAAE;AAAA,UAAM,EAAE;AAAE,iBAAO,IAAI,OAAO,MAAM,OAAO,EAAE,KAAK,GAAG,GAAE,GAAG,GAAE,MAAM,CAAC,CAAC;AAAA,QAAC;AAAC,iBAAS,eAAeD,IAAEC,IAAE,GAAE;AAAC,iBAAO,eAAe,MAAMD,IAAE,CAAC,GAAEC,IAAE,CAAC;AAAA,QAAC;AAAC,iBAAS,eAAeD,IAAEC,IAAE,GAAE;AAAC,cAAG,MAAI,QAAO;AAAC,gBAAE,CAAC;AAAA,UAAC;AAAC,cAAI,IAAE,EAAE,QAAO,IAAE,MAAI,SAAO,QAAM,GAAE,IAAE,EAAE,OAAM,IAAE,MAAI,SAAO,OAAK,GAAE,IAAE,EAAE,KAAI,IAAE,MAAI,SAAO,OAAK,GAAE,IAAE,EAAE,QAAO,IAAE,MAAI,SAAO,SAASD,IAAE;AAAC,mBAAOA;AAAA,UAAC,IAAE,GAAE,IAAE,EAAE,WAAU,IAAE,MAAI,SAAO,QAAM,GAAE,IAAE,EAAE,UAAS,IAAE,MAAI,SAAO,KAAG;AAAE,cAAI,IAAE,IAAI,OAAO,aAAa,CAAC,GAAE,KAAK;AAAE,cAAI,IAAE,IAAI,OAAO,aAAa,CAAC,GAAE,GAAG;AAAE,cAAI,IAAE,IAAE,MAAI;AAAG,mBAAQ,IAAE,GAAE,IAAEA,IAAE,IAAE,EAAE,QAAO,KAAI;AAAC,gBAAI,IAAE,EAAE,CAAC;AAAE,gBAAG,OAAO,MAAI,UAAS;AAAC,mBAAG,aAAa,EAAE,CAAC,CAAC;AAAA,YAAC,OAAK;AAAC,kBAAI,IAAE,aAAa,EAAE,EAAE,MAAM,CAAC;AAAE,kBAAI,IAAE,aAAa,EAAE,EAAE,MAAM,CAAC;AAAE,kBAAG,EAAE,SAAQ;AAAC,oBAAGC,GAAE,CAAAA,GAAE,KAAK,CAAC;AAAE,oBAAG,KAAG,GAAE;AAAC,sBAAG,EAAE,aAAW,OAAK,EAAE,aAAW,KAAI;AAAC,wBAAI,IAAE,EAAE,aAAW,MAAI,MAAI;AAAG,yBAAG,MAAM,OAAO,GAAE,MAAM,EAAE,OAAO,EAAE,SAAQ,MAAM,EAAE,OAAO,CAAC,EAAE,OAAO,GAAE,KAAK,EAAE,OAAO,EAAE,SAAQ,MAAM,EAAE,OAAO,GAAE,GAAG,EAAE,OAAO,CAAC;AAAA,kBAAC,OAAK;AAAC,yBAAG,MAAM,OAAO,GAAE,GAAG,EAAE,OAAO,EAAE,SAAQ,GAAG,EAAE,OAAO,GAAE,GAAG,EAAE,OAAO,EAAE,QAAQ;AAAA,kBAAC;AAAA,gBAAC,OAAK;AAAC,sBAAG,EAAE,aAAW,OAAK,EAAE,aAAW,KAAI;AAAC,0BAAM,IAAI,UAAU,mBAAmB,OAAO,EAAE,MAAK,+BAA+B,CAAC;AAAA,kBAAC;AAAC,uBAAG,IAAI,OAAO,EAAE,SAAQ,GAAG,EAAE,OAAO,EAAE,QAAQ;AAAA,gBAAC;AAAA,cAAC,OAAK;AAAC,qBAAG,MAAM,OAAO,CAAC,EAAE,OAAO,GAAE,GAAG,EAAE,OAAO,EAAE,QAAQ;AAAA,cAAC;AAAA,YAAC;AAAA,UAAC;AAAC,cAAG,GAAE;AAAC,gBAAG,CAAC,EAAE,MAAG,GAAG,OAAO,GAAE,GAAG;AAAE,iBAAG,CAAC,EAAE,WAAS,MAAI,MAAM,OAAO,GAAE,GAAG;AAAA,UAAC,OAAK;AAAC,gBAAI,IAAED,GAAEA,GAAE,SAAO,CAAC;AAAE,gBAAI,IAAE,OAAO,MAAI,WAAS,EAAE,QAAQ,EAAE,EAAE,SAAO,CAAC,CAAC,IAAE,KAAG,MAAI;AAAU,gBAAG,CAAC,GAAE;AAAC,mBAAG,MAAM,OAAO,GAAE,KAAK,EAAE,OAAO,GAAE,KAAK;AAAA,YAAC;AAAC,gBAAG,CAAC,GAAE;AAAC,mBAAG,MAAM,OAAO,GAAE,GAAG,EAAE,OAAO,GAAE,GAAG;AAAA,YAAC;AAAA,UAAC;AAAC,iBAAO,IAAI,OAAO,GAAE,MAAM,CAAC,CAAC;AAAA,QAAC;AAAC,UAAE,iBAAe;AAAe,iBAAS,aAAaA,IAAEC,IAAE,GAAE;AAAC,cAAGD,cAAa,OAAO,QAAO,eAAeA,IAAEC,EAAC;AAAE,cAAG,MAAM,QAAQD,EAAC,EAAE,QAAO,cAAcA,IAAEC,IAAE,CAAC;AAAE,iBAAO,eAAeD,IAAEC,IAAE,CAAC;AAAA,QAAC;AAAC,UAAE,eAAa;AAAA,MAAY,GAAG;AAAE,aAAO,UAAQ;AAAA,IAAC,GAAG;AAAA;AAAA;;;;;;;;;;;;;;;;MCgB/nOK,iBAAe,WAAA;eAAfA;;MAKGC,4BAA0B,WAAA;eAA1BA;;MAuBAC,6BAA2B,WAAA;eAA3BA;;MAuBAC,0BAAwB,WAAA;eAAxBA;;MA2CAC,2BAAyB,WAAA;eAAzBA;;MAWAC,0BAAwB,WAAA;eAAxBA;;;AAzGT,QAAML,kBAAkB;AAKxB,aAASC,2BAA2BK,OAAa;AACtD,UAAI,OAAOA,UAAU,SAAU,QAAO;AAKtC,UAAI,wBAAwBC,KAAKD,KAAAA,GAAQ;AACvC,eAAO;MACT;AAIA,UAAI,iDAAiDC,KAAKD,KAAAA,GAAQ;AAChE,eAAO;MACT;AAEA,aAAO;IACT;AAMO,aAASJ,4BAA4BI,OAAa;AACvD,UAAIE,aAAaF;AAGjBE,mBAAaA,WAAWC,QACtB,0BACA,KAAKT,eAAAA,KAAoB;AAI3BQ,mBAAaA,WAAWC,QAAQ,sBAAsB,MAAMT,eAAAA,EAAiB;AAE7E,aAAOQ;IACT;AAUO,aAASL,yBAAyBO,QAAe;AACtD,aAAOA,OAAOC,IAAI,CAACC,UAAAA;AAGjB,YACE,OAAOA,UAAU,YACjBA,UAAU;QAEV,cAAcA;;SAGbA,MAAMC,aAAa,OAAOD,MAAMC,aAAa;QAE9C,YAAYD,SACZ,YAAYA;;QAGZA,MAAME,WAAW,MACjBF,MAAMG,WAAW,IACjB;AAIA,iBAAO;YACL,GAAGH;YACHE,QAAQ;UACV;QACF;AACA,eAAOF;MACT,CAAA;IACF;AAaO,aAASR,0BAA0BY,UAAgB;AAIxD,aAAOA,SAASP,QAAQ,IAAIQ,OAAO,MAAMjB,eAAAA,IAAmB,GAAA,GAAM,GAAA;IACpE;AAMO,aAASK,yBACda,QAA2B;AAE3B,YAAMC,UAA+B,CAAC;AAEtC,iBAAW,CAACC,KAAKC,KAAAA,KAAUC,OAAOC,QAAQL,MAAAA,GAAS;AACjD,YAAI,OAAOG,UAAU,UAAU;AAE7BF,kBAAQC,GAAAA,IAAOC,MAAMZ,QAAQ,IAAIQ,OAAO,IAAIjB,eAAAA,EAAiB,GAAG,EAAA;QAClE,WAAWwB,MAAMC,QAAQJ,KAAAA,GAAQ;AAE/BF,kBAAQC,GAAAA,IAAOC,MAAMV,IAAI,CAACe,SACxB,OAAOA,SAAS,WACZA,KAAKjB,QAAQ,IAAIQ,OAAO,IAAIjB,eAAAA,EAAiB,GAAG,EAAA,IAChD0B,IAAAA;QAER,OAAO;AACLP,kBAAQC,GAAAA,IAAOC;QACjB;MACF;AAEA,aAAOF;IACT;;;;;AC/IA;;;;;;;;;;;;;MAiEgBQ,aAAW,WAAA;eAAXA;;MAtCAC,kBAAgB,WAAA;eAAhBA;;MAoFAC,sBAAoB,WAAA;eAApBA;;MAqBAC,kBAAgB,WAAA;eAAhBA;;;;;AAzGT,aAASF,iBACdG,OACAC,MACAC,SAA8C;AAE9C,UAAI,OAAOF,UAAU,UAAU;AAC7B,gBAAOG,GAAAA,cAAAA,cAAaH,OAAOC,MAAMC,OAAAA;MACnC;AAGA,YAAME,sBAAqBC,GAAAA,wBAAAA,4BAA2BL,KAAAA;AACtD,YAAMM,aAAaF,sBACfG,GAAAA,wBAAAA,6BAA4BP,KAAAA,IAC5BA;AAEJ,UAAI;AACF,gBAAOG,GAAAA,cAAAA,cAAaG,YAAYL,MAAMC,OAAAA;MACxC,SAASM,OAAO;AAEd,YAAI,CAACJ,oBAAoB;AACvB,cAAI;AACF,kBAAMK,mBAAkBF,GAAAA,wBAAAA,6BAA4BP,KAAAA;AACpD,oBAAOG,GAAAA,cAAAA,cAAaM,iBAAiBR,MAAMC,OAAAA;UAC7C,SAASQ,YAAY;AAEnB,kBAAMF;UACR;QACF;AACA,cAAMA;MACR;IACF;AAQO,aAASZ,YACdI,OACAE,SAAgD;AAGhD,YAAME,sBAAqBC,GAAAA,wBAAAA,4BAA2BL,KAAAA;AACtD,YAAMM,aAAaF,sBACfG,GAAAA,wBAAAA,6BAA4BP,KAAAA,IAC5BA;AAEJ,UAAI;AACF,cAAMW,YAAWC,GAAAA,cAAAA,SAAQN,YAAYJ,OAAAA;AAKrC,YAAIE,oBAAoB;AACtB,iBAAO,CAACS,WAAAA;AACN,oBAAOC,GAAAA,wBAAAA,2BAA0BH,SAASE,MAAAA,CAAAA;UAC5C;QACF;AAEA,eAAOF;MACT,SAASH,OAAO;AAEd,YAAI,CAACJ,oBAAoB;AACvB,cAAI;AACF,kBAAMK,mBAAkBF,GAAAA,wBAAAA,6BAA4BP,KAAAA;AACpD,kBAAMW,YAAWC,GAAAA,cAAAA,SAAQH,iBAAiBP,OAAAA;AAG1C,mBAAO,CAACW,WAAAA;AACN,sBAAOC,GAAAA,wBAAAA,2BAA0BH,SAASE,MAAAA,CAAAA;YAC5C;UACF,SAASH,YAAY;AAEnB,kBAAMF;UACR;QACF;AACA,cAAMA;MACR;IACF;AAKO,aAASV,qBAEdiB,QAAgBd,MAAY;AAC5B,YAAMe,mBAAkBC,GAAAA,cAAAA,kBAAoBF,QAAQd,QAAQ,CAAA,CAAE;AAE9D,aAAO,CAACiB,aAAAA;AACN,cAAMC,SAASH,gBAAgBE,QAAAA;AAC/B,YAAI,CAACC,OAAQ,QAAO;AAGpB,eAAO;UACL,GAAGA;UACHN,SAAQO,GAAAA,wBAAAA,0BAAyBD,OAAON,MAAM;QAChD;MACF;IACF;AAMO,aAASd,iBACdsB,WAA0C;AAE1C,aAAO,CAACH,aAAAA;AACN,cAAMC,SAASE,UAAUH,QAAAA;AACzB,YAAI,CAACC,OAAQ,QAAO;AAGpB,gBAAOC,GAAAA,wBAAAA,0BAAyBD,MAAAA;MAClC;IACF;;;;;;;;;;;mCC9HgBG,mBAAAA;;;eAAAA;;;;;AAAT,aAASA,gBAAgB,EAC9BC,IACAC,OAAM,GACc;AACpB,YAAMC,aAAa,CAACC,aAAAA;AAClB,cAAMC,aAAaJ,GAAGK,KAAKF,QAAAA;AAC3B,YAAI,CAACC,WAAY,QAAO;AAExB,cAAME,SAAS,CAACC,UAAAA;AACd,cAAI;AACF,mBAAOC,mBAAmBD,KAAAA;UAC5B,QAAQ;AACN,kBAAM,OAAA,eAAA,IAAIE,OAAAA,YAAY,wBAAA,GAAhB,qBAAA;qBAAA;0BAAA;4BAAA;YAAwC,CAAA;UAChD;QACF;AAEA,cAAMC,SAAiB,CAAC;AACxB,mBAAW,CAACC,KAAKC,KAAAA,KAAUC,OAAOC,QAAQb,MAAAA,GAAS;AACjD,gBAAMc,QAAQX,WAAWQ,MAAMI,GAAG;AAClC,cAAID,UAAUE,QAAW;AACvB,gBAAIL,MAAMM,QAAQ;AAChBR,qBAAOC,GAAAA,IAAOI,MAAMI,MAAM,GAAA,EAAKC,IAAI,CAACC,UAAUf,OAAOe,KAAAA,CAAAA;YACvD,OAAO;AACLX,qBAAOC,GAAAA,IAAOL,OAAOS,KAAAA;YACvB;UACF;QACF;AAEA,eAAOL;MACT;AAGA,cAAOY,GAAAA,iBAAAA,kBAAiBpB,UAAAA;IAC1B;;;;;;;;;;;;;;;;;;MChCaqB,eAAa,WAAA;eAAbA;;MA2CAC,eAAa,WAAA;eAAbA;;MAvBAC,gBAAc,WAAA;eAAdA;;MAqBAC,gBAAc,WAAA;eAAdA;;MAwCAC,qBAAmB,WAAA;eAAnBA;;MAfAC,uBAAqB,WAAA;eAArBA;;MASAC,6BAA2B,WAAA;eAA3BA;;MAPAC,wBAAsB,WAAA;eAAtBA;;MAlFAC,0BAAwB,WAAA;eAAxBA;;MAuCAC,gBAAc,WAAA;eAAdA;;MAWAC,+BAA6B,WAAA;eAA7BA;;MAjDAC,0BAAwB,WAAA;eAAxBA;;MAIAC,qBAAmB,WAAA;eAAnBA;;MAqCAC,qBAAmB,WAAA;eAAnBA;;MACAC,4BAA0B,WAAA;eAA1BA;;MA1BAC,kBAAgB,WAAA;eAAhBA;;MAcAC,4BAA0B,WAAA;eAA1BA;;MAXAC,oCAAkC,WAAA;eAAlCA;;MACAC,wCAAsC,WAAA;eAAtCA;;MASAC,gCAA8B,WAAA;eAA9BA;;MAXAC,wBAAsB,WAAA;eAAtBA;;MASAC,0BAAwB,WAAA;eAAxBA;;MACAC,2BAAyB,WAAA;eAAzBA;;MAdAC,kBAAgB,WAAA;eAAhBA;;MAZAC,iCAA+B,WAAA;eAA/BA;;MAaAC,kBAAgB,WAAA;eAAhBA;;MAdAC,yBAAuB,WAAA;eAAvBA;;MAsBAC,oBAAkB,WAAA;eAAlBA;;MAmEAC,uBAAqB,WAAA;eAArBA;;MArCAC,iBAAe,WAAA;eAAfA;;MAhDAC,6BAA2B,WAAA;eAA3BA;;MACAC,4CAA0C,WAAA;eAA1CA;;MAuCAC,gBAAc,WAAA;eAAdA;;MACAC,uBAAqB,WAAA;eAArBA;;MAqBAC,gCAA8B,WAAA;eAA9BA;;MAZAC,gBAAc,WAAA;eAAdA;;MASAC,iCAA+B,WAAA;eAA/BA;;MADAC,6BAA2B,WAAA;eAA3BA;;MAJAC,wBAAsB,WAAA;eAAtBA;;MADAC,2BAAyB,WAAA;eAAzBA;;MAEAC,yBAAuB,WAAA;eAAvBA;;MACAC,kCAAgC,WAAA;eAAhCA;;MAJAC,yBAAuB,WAAA;eAAvBA;;MAhDAC,qBAAmB,WAAA;eAAnBA;;MACAC,yBAAuB,WAAA;eAAvBA;;MACAC,oBAAkB,WAAA;eAAlBA;;MACAC,YAAU,WAAA;eAAVA;;MAiEAC,2BAAyB,WAAA;eAAzBA;;MANAC,sCAAoC,WAAA;eAApCA;;MAEAC,2BAAyB,WAAA;eAAzBA;;MAuBAC,gBAAc,WAAA;eAAdA;;MAJAC,2BAAyB,WAAA;eAAzBA;;MAvBAC,gCAA8B,WAAA;eAA9BA;;MAMAC,4CAA0C,WAAA;eAA1CA;;MA7EAC,gCAA8B,WAAA;eAA9BA;;MAsFAC,kCAAgC,WAAA;eAAhCA;;MAmIJC,gBAAc,WAAA;eAAdA;;MAAgBC,0BAAwB,WAAA;eAAxBA;;MAjHZC,8BAA4B,WAAA;eAA5BA;;;AAxGN,QAAMJ,iCAAiC;AACvC,QAAM9C,2BAA2B;AACjC,QAAMG,2BAA2B;AACjC,QAAMe,0BAA0B;AAChC,QAAMF,kCAAkC;AAExC,QAAMZ,sBAAsB;AAC5B,QAAMkB,8BAA8B;AACpC,QAAMC,6CACX;AAEK,QAAMY,sBAAsB;AAC5B,QAAMC,0BAA0B;AAChC,QAAMC,qBAAqB;AAC3B,QAAMC,aAAa;AACnB,QAAM9C,gBAAgB;AACtB,QAAMuB,mBAAmB;AACzB,QAAME,mBAAmB;AACzB,QAAMV,mBAAmB;AAEzB,QAAMK,yBAAyB;AAC/B,QAAMH,qCAAqC;AAC3C,QAAMC,yCACX;AAEK,QAAMS,qBAAqB;AAI3B,QAAMN,2BAA2B;AACjC,QAAMC,4BAA4B;AAClC,QAAMH,iCAAiC;AACvC,QAAMH,6BAA6B;AAGnC,QAAMd,iBAAiB;AAKvB,QAAMO,iBAAiB;AAGvB,QAAMI,sBAAsB;AAC5B,QAAMC,6BAA6B,YAAYD,mBAAAA;AAG/C,QAAMmB,iBAAiB;AACvB,QAAMC,wBAAwB,YAAYD,cAAAA;AAG1C,QAAMtB,gCAAgC;AAItC,QAAMmB,kBAAkB;AACxB,QAAM1B,iBAAiB;AACvB,QAAMgC,iBAAiB;AACvB,QAAMlC,gBAAgB;AACtB,QAAMyC,0BAA0B;AAChC,QAAMH,4BAA4B;AAClC,QAAMD,yBAAyB;AAC/B,QAAME,0BAA0B;AAChC,QAAMC,mCACX;AACK,QAAMJ,8BAA8B;AACpC,QAAMD,kCACX;AAEK,QAAMF,iCAAiC;AAEvC,QAAMkB,iCAAiC;AAEvC,QAAMJ,uCAAuC;AAE7C,QAAMC,4BAA4B;AAElC,QAAMI,6CAA6C;AAEnD,QAAMN,4BAA4B;AAElC,QAAM1C,wBACX;AACK,QAAME,yBACX;AAEK,QAAMgD,mCACX;AAGK,QAAMjD,8BAA8B;AAEpC,QAAMsB,wBAAwB;AAE9B,QAAMuB,4BAA4B;AAElC,QAAM/C,sBAAsB;MAAC;MAAO;MAAS;MAAc;MAAO;;AAElE,QAAM8C,iBAAgD;MAC3DS,MAAM;MACNC,kBAAkB;MAClBC,QAAQ;IACV;AAEO,QAAMH,+BAA+B;AAM5C,QAAMI,uBAAuB;;;;MAI3BC,QAAQ;;;;;MAKRC,uBAAuB;;;;MAIvBC,qBAAqB;;;;MAIrBC,eAAe;;;;MAIfC,SAAS;;;;MAITC,SAAS;;;;MAITC,YAAY;;;;MAIZC,YAAY;;;;MAIZC,WAAW;;;;MAIXC,iBAAiB;;;;MAIjBC,iBAAiB;;;;MAIjBC,cAAc;;;;MAIdC,cAAc;IAChB;AAKA,QAAMnB,iBAAiB;MACrB,GAAGM;MACHc,OAAO;QACLC,cAAc;UACZf,qBAAqBE;UACrBF,qBAAqBI;;QAEvBY,YAAY;UACVhB,qBAAqBE;UACrBF,qBAAqBI;UACrBJ,qBAAqBQ;UACrBR,qBAAqBO;;QAEvBU,eAAe;;UAEbjB,qBAAqBK;UACrBL,qBAAqBM;;QAEvBY,YAAY;UACVlB,qBAAqBG;UACrBH,qBAAqBU;;QAEvBS,SAAS;UACPnB,qBAAqBE;UACrBF,qBAAqBI;UACrBJ,qBAAqBG;UACrBH,qBAAqBU;UACrBV,qBAAqBC;UACrBD,qBAAqBQ;UACrBR,qBAAqBO;;QAEvBa,UAAU;;UAERpB,qBAAqBE;UACrBF,qBAAqBG;UACrBH,qBAAqBU;UACrBV,qBAAqBI;;MAEzB;IACF;AAEA,QAAMT,2BAA2B;MAC/B0B,cAAc;MACdC,UAAU;MACVC,eAAe;MACfC,mBAAmB;IACrB;;;;;ACzNA;;;;;;mCAIgBC,sBAAAA;;;eAAAA;;;AAHhB,QAAMC,cAAc;AACpB,QAAMC,kBAAkB;AAEjB,aAASF,mBAAmBG,KAAW;AAE5C,UAAIF,YAAYG,KAAKD,GAAAA,GAAM;AACzB,eAAOA,IAAIE,QAAQH,iBAAiB,MAAA;MACtC;AACA,aAAOC;IACT;;;;;;;;;;;mCCPgBG,mBAAAA;;;eAAAA;;;;AAAT,aAASA,gBAAgBC,MAAgB;AAC9C,YAAM,CAACC,SAASC,gBAAgBC,OAAAA,IAAWH;AAC3C,YAAM,EAAEI,QAAQC,SAAQ,IAAKF;AAC7B,UAAI,EAAEG,KAAI,IAAKH;AAGfG,aAAOL,YAAYM,SAAAA,sBAAsBJ,QAAQK,cAAcF;AAE/D,YAAMG,kBAAiBL,iCAAS,QAAMC,qCAAW,QAAMC,6BAAO;AAE9D,aAAO;QACLA;QACAL;QACAE;;QAEAM;QACAP;MACF;IACF;;;;;;;;;;;;;;;;;;MCmCgBQ,oBAAkB,WAAA;eAAlBA;;MAlDAC,iBAAe,WAAA;eAAfA;;MAwCAC,YAAU,WAAA;eAAVA;;;;AAxCT,aAASD,gBAAgBE,SAAe;AAI7C,YAAMC,qBAAqBC,oBAAAA,2BAA2BC,KAAK,CAACC,WAC1DJ,QAAQK,WAAWD,MAAAA,CAAAA;AAKrB,UAAIH,oBAAoB;AACtBD,kBAAUA,QAAQM,MAAML,mBAAmBM,MAAM;MACnD;AAEA,UAAIP,QAAQK,WAAW,OAAA,KAAYL,QAAQQ,SAAS,IAAA,GAAO;AACzD,eAAO;;;UAGLC,MAAM;UACNC,OAAOV,QAAQM,MAAM,GAAG,EAAC;QAC3B;MACF;AAEA,UAAIN,QAAQK,WAAW,MAAA,KAAWL,QAAQQ,SAAS,GAAA,GAAM;AACvD,eAAO;UACLC,MAAMR,qBAAqB,yBAAyB;UACpDS,OAAOV,QAAQM,MAAM,GAAG,EAAC;QAC3B;MACF;AAEA,UAAIN,QAAQK,WAAW,GAAA,KAAQL,QAAQQ,SAAS,GAAA,GAAM;AACpD,eAAO;UACLC,MAAMR,qBAAqB,wBAAwB;UACnDS,OAAOV,QAAQM,MAAM,GAAG,EAAC;QAC3B;MACF;AAEA,aAAO;IACT;AAEO,aAASP,WACdU,MAAuB;AAEvB,aACEA,SAAS,cACTA,SAAS,0BACTA,SAAS;IAEb;AAEO,aAASZ,mBAAmBc,WAA4B;AAI7D,UAAIC,SAAS;AACb,UAAIC,WAAW;AAEf,cAAQF,WAAAA;QACN,KAAK;QACL,KAAK;AACHC,mBAAS;AACT;QACF,KAAK;AACHA,mBAAS;AACTC,qBAAW;AACX;QACF,KAAK;QACL,KAAK;AACH;QACF;AACEF;MACJ;AAEA,aAAO;QAAEC;QAAQC;MAAS;IAC5B;;;;;;;;;;;;;;;;;;MC6GaC,mBAAiB,WAAA;eAAjBA;;MApDGC,iBAAe,WAAA;eAAfA;;MAjGAC,gCAA8B,WAAA;eAA9BA;;MAwLAC,uBAAqB,WAAA;eAArBA;;MArBAC,gBAAc,WAAA;eAAdA;;;;;;AAxLhB,aAASC,cACPC,oBACAC,YACAC,qBAAqD;AAErD,UAAIC,QAAQH,mBAAmBC,UAAAA;AAE/B,UAAIC,2DAAqBE,IAAIH,aAAa;AAGxC,cAAM,CAACI,WAAAA,IAAeH,oBAAoBI,IAAIL,UAAAA;AAC9CE,gBAAQE;MACV,WAAWE,MAAMC,QAAQL,KAAAA,GAAQ;AAC/BA,gBAAQA,MAAMM,IAAI,CAACC,MAAMC,mBAAmBD,CAAAA,CAAAA;MAC9C,WAAW,OAAOP,UAAU,UAAU;AACpCA,gBAAQQ,mBAAmBR,KAAAA;MAC7B;AAEA,aAAOA;IACT;AAEO,aAASP,+BACdgB,YACAC,QACAC,UACAZ,qBAAqD;AAErD,YAAMa,eAAeC,gBAAgBH,MAAAA;AAGrC,YAAMI,QAAoD;QACxD;UAAEC,MAAMN;UAAYO,OAAO;QAAE;;AAI/B,YAAMC,eAAeN,SAASO,MAAM,GAAA,EAAKC,MAAM,CAAA;AAE/C,aAAOL,MAAMM,SAAS,GAAG;AACvB,cAAM,EAAEL,MAAMC,MAAK,IAAKF,MAAMO,IAAG;AACjC,cAAM,EAAEC,SAASC,eAAc,KAAKC,GAAAA,iBAAAA,iBAAgBT,IAAAA;AAGpD,cAAMU,gBAAeC,GAAAA,iBAAAA,iBAAgBJ,OAAAA;AACrC,YACEG,gBACA,CAACb,aAAae,eAAeF,aAAaG,KAAK;;QAG/C,EAAC7B,2DAAqBE,IAAIwB,aAAaG,SACvC;AACA,kBAAQH,aAAaI,MAAI;YACvB,KAAK;YACL,KAAK;YACL,KAAK;AAEH,oBAAMC,oBAAoBb,aAAaE,MAAMH,KAAAA;AAG7C,oBAAMe,oBAAoBD,kBACvBE,QAAQ,CAACC,gBAAAA;AACR,sBAAML,SAAQF,GAAAA,iBAAAA,iBAAgBO,WAAAA;AAM9B,uBAAOL,QAAQhB,aAAagB,MAAMA,KAAK,IAAIK;cAC7C,CAAA,EACCC,OAAO,CAACC,MAAMA,MAAMC,MAAAA;AAEvB,kBAAIL,kBAAkBX,SAAS,GAAG;AAChCR,6BAAaa,aAAaG,KAAK,IAAIG;cACrC;AACA;YACF,KAAK;YACL,KAAK;AAEH,kBAAIf,QAAQC,aAAaG,QAAQ;AAC/B,sBAAMa,cAAchB,aAAaD,KAAAA;AACjC,sBAAMY,SAAQF,GAAAA,iBAAAA,iBAAgBO,WAAAA;AAE9BrB,6BAAaa,aAAaG,KAAK,IAAIA,QAC/BhB,aAAagB,MAAMA,KAAK,IACxBK;cACN;AACA;YACF;AACER,2BAAaI;UACjB;QACF;AAGA,YAAIQ,YAAYrB;AAChB,cAAMsB,eAAehB,QAAQiB,WAAW,GAAA,KAAQjB,QAAQkB,SAAS,GAAA;AACjE,YAAI,CAACF,gBAAgBhB,YAAY,IAAI;AACnCe;QACF;AAGA,mBAAWI,SAASC,OAAOC,OAAOpB,cAAAA,GAAiB;AACjDT,gBAAM8B,KAAK;YAAE7B,MAAM0B;YAAOzB,OAAOqB;UAAU,CAAA;QAC7C;MACF;AAEA,aAAOzB;IACT;AAaO,aAASpB,gBACdK,oBACAC,YACA+C,kBACA9C,qBAAqD;AAErD,UAAIC,QAAuCJ,cACzCC,oBACAC,YACAC,mBAAAA;AAKF,UAAI,CAACC,SAASA,MAAMoB,WAAW,GAAG;AAChC,YAAIyB,qBAAqB,MAAM;AAC7B,iBAAO;YACLjB,OAAO9B;YACPE,OAAO;YACP6B,MAAMgB;YACNC,aAAa;cAAChD;cAAY;cAAI+C;;UAChC;QACF;AAEA,cAAM,OAAA,eAAA,IAAIE,gBAAAA,eACR,mCAAmCjD,UAAAA,8BAAwC+C,gBAAAA,EAAkB,GADzF,qBAAA;iBAAA;sBAAA;wBAAA;QAEN,CAAA;MACF;AAEA,aAAO;QACLjB,OAAO9B;;QAEPE;;QAEA8C,aAAa;UACXhD;UACAM,MAAMC,QAAQL,KAAAA,IAASA,MAAMgD,KAAK,GAAA,IAAOhD;UACzC6C;;QAEFhB,MAAMgB;MACR;IACF;AAWO,QAAMtD,oBAAoB;AAc1B,aAASI,eAAeiC,OAAa;AAC1C,YAAMqB,QAAQrB,MAAMqB,MAAM1D,iBAAAA;AAE1B,UAAI,CAAC0D,OAAO;AACV,eAAOvD,sBAAsBkC,KAAAA;MAC/B;AAEA,aAAOlC,sBAAsBuD,MAAM,CAAA,CAAE;IACvC;AAaO,aAASvD,sBAAsBkC,OAAa;AACjD,YAAMsB,WAAWtB,MAAMW,WAAW,GAAA,KAAQX,MAAMY,SAAS,GAAA;AACzD,UAAIU,UAAU;AACZtB,gBAAQA,MAAMT,MAAM,GAAG,EAAC;MAC1B;AACA,YAAMgC,SAASvB,MAAMW,WAAW,KAAA;AAChC,UAAIY,QAAQ;AACVvB,gBAAQA,MAAMT,MAAM,CAAA;MACtB;AACA,aAAO;QAAEiC,KAAKxB;QAAOuB;QAAQD;MAAS;IACxC;;;;;;;;;;;;;;;;;;MC8KgBG,yBAAuB,WAAA;eAAvBA;;MA/BAC,oBAAkB,WAAA;eAAlBA;;MArOAC,eAAa,WAAA;eAAbA;;;;;;;;AAxDhB,aAASC,qBACPC,OACAC,eACAC,eAAsB;AAEtB,YAAMC,SAAyC,CAAC;AAChD,UAAIC,aAAa;AAEjB,YAAMC,WAAqB,CAAA;AAC3B,iBAAWC,YAAWC,GAAAA,qBAAAA,qBAAoBP,KAAAA,EAAOQ,MAAM,CAAA,EAAGC,MAAM,GAAA,GAAM;AACpE,cAAMC,cAAcC,oBAAAA,2BAA2BC,KAAK,CAACC,MACnDP,QAAQQ,WAAWD,CAAAA,CAAAA;AAErB,cAAME,eAAeT,QAAQU,MAAMC,iBAAAA,iBAAiB;AAEpD,YAAIP,eAAeK,gBAAgBA,aAAa,CAAA,GAAI;AAClD,gBAAM,EAAEG,KAAKC,UAAUC,OAAM,KAAKC,GAAAA,iBAAAA,uBAAsBN,aAAa,CAAA,CAAE;AACvEZ,iBAAOe,GAAAA,IAAO;YAAEI,KAAKlB;YAAcgB;YAAQD;UAAS;AACpDd,mBAASkB,KAAK,KAAIC,GAAAA,cAAAA,oBAAmBd,WAAAA,CAAAA,UAAsB;QAC7D,WAAWK,gBAAgBA,aAAa,CAAA,GAAI;AAC1C,gBAAM,EAAEG,KAAKE,QAAQD,SAAQ,KAAKE,GAAAA,iBAAAA,uBAAsBN,aAAa,CAAA,CAAE;AACvEZ,iBAAOe,GAAAA,IAAO;YAAEI,KAAKlB;YAAcgB;YAAQD;UAAS;AAEpD,cAAIjB,iBAAiBa,aAAa,CAAA,GAAI;AACpCV,qBAASkB,KAAK,KAAIC,GAAAA,cAAAA,oBAAmBT,aAAa,CAAA,CAAE,CAAA,EAAG;UACzD;AAEA,cAAIU,IAAIL,SAAUD,WAAW,gBAAgB,WAAY;AAGzD,cAAIjB,iBAAiBa,aAAa,CAAA,GAAI;AACpCU,gBAAIA,EAAEC,UAAU,CAAA;UAClB;AAEArB,mBAASkB,KAAKE,CAAAA;QAChB,OAAO;AACLpB,mBAASkB,KAAK,KAAIC,GAAAA,cAAAA,oBAAmBlB,OAAAA,CAAAA,EAAU;QACjD;AAGA,YAAIL,iBAAiBc,gBAAgBA,aAAa,CAAA,GAAI;AACpDV,mBAASkB,MAAKC,GAAAA,cAAAA,oBAAmBT,aAAa,CAAA,CAAE,CAAA;QAClD;MACF;AAEA,aAAO;QACLY,oBAAoBtB,SAASuB,KAAK,EAAA;QAClCzB;MACF;IACF;AAOO,aAASL,cACd+B,iBACA,EACE5B,gBAAgB,OAChBC,gBAAgB,OAChB4B,+BAA+B,MAAK,IACZ,CAAC,GAAC;AAE5B,YAAM,EAAEH,oBAAoBxB,OAAM,IAAKJ,qBACrC8B,iBACA5B,eACAC,aAAAA;AAGF,UAAI6B,KAAKJ;AACT,UAAI,CAACG,8BAA8B;AACjCC,cAAM;MACR;AAEA,aAAO;QACLA,IAAI,IAAIC,OAAO,IAAID,EAAAA,GAAK;QACxB5B;MACF;IACF;AAMA,aAAS8B,uBAAAA;AACP,UAAIC,IAAI;AAER,aAAO,MAAA;AACL,YAAIC,WAAW;AACf,YAAIC,IAAI,EAAEF;AACV,eAAOE,IAAI,GAAG;AACZD,sBAAYE,OAAOC,aAAa,MAAOF,IAAI,KAAK,EAAA;AAChDA,cAAIG,KAAKC,OAAOJ,IAAI,KAAK,EAAA;QAC3B;AACA,eAAOD;MACT;IACF;AAEA,aAASM,sBAAsB,EAC7BC,oBACAC,iBACArC,SACAsC,WACAC,WACAC,2BAA0B,GAQ3B;AACC,YAAM,EAAE5B,KAAKC,UAAUC,OAAM,KAAKC,GAAAA,iBAAAA,uBAAsBf,OAAAA;AAIxD,UAAIyC,aAAa7B,IAAI8B,QAAQ,OAAO,EAAA;AAEpC,UAAIH,WAAW;AACbE,qBAAa,GAAGF,SAAAA,GAAYE,UAAAA;MAC9B;AACA,UAAIE,aAAa;AAIjB,UAAIF,WAAWG,WAAW,KAAKH,WAAWG,SAAS,IAAI;AACrDD,qBAAa;MACf;AACA,UAAI,CAACE,MAAMC,SAASL,WAAWvC,MAAM,GAAG,CAAA,CAAA,CAAA,GAAM;AAC5CyC,qBAAa;MACf;AAEA,UAAIA,YAAY;AACdF,qBAAaJ,gBAAAA;MACf;AAEA,YAAMU,eAAeN,cAAcH;AAEnC,UAAIC,WAAW;AACbD,kBAAUG,UAAAA,IAAc,GAAGF,SAAAA,GAAY3B,GAAAA;MACzC,OAAO;AACL0B,kBAAUG,UAAAA,IAAc7B;MAC1B;AAKA,YAAMoC,qBAAqBZ,sBACvBlB,GAAAA,cAAAA,oBAAmBkB,kBAAAA,IACnB;AAEJ,UAAIa;AACJ,UAAIF,gBAAgBP,4BAA4B;AAG9CS,kBAAU,OAAOR,UAAAA;MACnB,WAAW3B,QAAQ;AACjBmC,kBAAU,MAAMR,UAAAA;MAClB,OAAO;AACLQ,kBAAU,MAAMR,UAAAA;MAClB;AAEA,aAAO;QACL7B;QACAqC,SAASpC,WACL,OAAOmC,kBAAAA,GAAqBC,OAAAA,OAC5B,IAAID,kBAAAA,GAAqBC,OAAAA;QAC7BR;QACA5B;QACAC;MACF;IACF;AAEA,aAASoC,0BACPxD,OACAyD,iBACAxD,eACAC,eACA4C,4BACAY,YAA4B;MAAEC,OAAO,CAAC;MAAGC,aAAa,CAAC;IAAE,GAAC;;AAE1D,YAAMjB,kBAAkBV,qBAAAA;AACxB,YAAMW,YAAyC,CAAC;AAEhD,YAAMvC,WAAqB,CAAA;AAC3B,YAAMwD,eAAyB,CAAA;AAG/BH,kBAAYI,gBAAgBJ,SAAAA;AAE5B,iBAAWpD,YAAWC,GAAAA,qBAAAA,qBAAoBP,KAAAA,EAAOQ,MAAM,CAAA,EAAGC,MAAM,GAAA,GAAM;AACpE,cAAMsD,wBAAwBpD,oBAAAA,2BAA2BqD,KAAK,CAACnD,MAC7DP,QAAQQ,WAAWD,CAAAA,CAAAA;AAGrB,cAAME,eAAeT,QAAQU,MAAMC,iBAAAA,iBAAiB;AAEpD,cAAMyB,qBAAqBqB,wBACvBhD,6CAAe,KACfkD;AAEJ,YAAIpB;AACJ,YAAIH,uBAAsB3B,6CAAe,KAAI;AAC3C8B,sBAAYY,kBAAkBS,WAAAA,kCAAkCD;AAChEP,oBAAUE,YAAY7C,aAAa,CAAA,CAAE,IAAI2B;QAC3C,YAAW3B,6CAAe,OAAM2C,UAAUE,YAAY7C,aAAa,CAAA,CAAE,GAAG;AACtE8B,sBAAYY,kBAAkBS,WAAAA,kCAAkCD;QAClE,OAAO;AACLpB,sBAAYY,kBAAkBU,WAAAA,0BAA0BF;QAC1D;AAEA,YAAIvB,sBAAsB3B,gBAAgBA,aAAa,CAAA,GAAI;AAEzD,gBAAM,EAAEG,KAAKqC,SAASR,YAAY3B,QAAQD,SAAQ,IAChDsB,sBAAsB;YACpBE;YACAD;YACApC,SAASS,aAAa,CAAA;YACtB6B;YACAC;YACAC;UACF,CAAA;AAEFzC,mBAASkB,KAAKgC,OAAAA;AACdM,uBAAatC,KACX,IAAIR,aAAa,CAAA,CAAE,IAAI2C,UAAUC,MAAMzC,GAAAA,KAAQ6B,UAAAA,GAAa3B,SAAUD,WAAW,MAAM,MAAO,EAAA,EAAI;AAEpGuC,0BAAUC,OAAVD,mBAAyBX;QAC3B,WAAWhC,gBAAgBA,aAAa,CAAA,GAAI;AAE1C,cAAIb,iBAAiBa,aAAa,CAAA,GAAI;AACpCV,qBAASkB,KAAK,KAAIC,GAAAA,cAAAA,oBAAmBT,aAAa,CAAA,CAAE,CAAA,EAAG;AACvD8C,yBAAatC,KAAK,IAAIR,aAAa,CAAA,CAAE,EAAE;UACzC;AAEA,gBAAM,EAAEG,KAAKqC,SAASR,YAAY3B,QAAQD,SAAQ,IAChDsB,sBAAsB;YACpBE;YACArC,SAASS,aAAa,CAAA;YACtB6B;YACAC;YACAC;UACF,CAAA;AAGF,cAAIrB,IAAI8B;AACR,cAAIrD,iBAAiBa,aAAa,CAAA,GAAI;AACpCU,gBAAIA,EAAEC,UAAU,CAAA;UAClB;AAEArB,mBAASkB,KAAKE,CAAAA;AACdoC,uBAAatC,KACX,KAAKmC,UAAUC,MAAMzC,GAAAA,KAAQ6B,UAAAA,GAAa3B,SAAUD,WAAW,MAAM,MAAO,EAAA,EAAI;AAElFuC,0BAAUC,OAAVD,mBAAyBX;QAC3B,OAAO;AACL1C,mBAASkB,KAAK,KAAIC,GAAAA,cAAAA,oBAAmBlB,OAAAA,CAAAA,EAAU;AAC/CuD,uBAAatC,KAAK,IAAIjB,OAAAA,EAAS;QACjC;AAGA,YAAIL,iBAAiBc,gBAAgBA,aAAa,CAAA,GAAI;AACpDV,mBAASkB,MAAKC,GAAAA,cAAAA,oBAAmBT,aAAa,CAAA,CAAE,CAAA;AAChD8C,uBAAatC,KAAKR,aAAa,CAAA,CAAE;QACnC;MACF;AAEA,aAAO;QACLqD,yBAAyB/D,SAASuB,KAAK,EAAA;QACvCgB;QACAyB,qBAAqBR,aAAajC,KAAK,EAAA;QACvC8B;MACF;IACF;AAUO,aAAS7D,mBACdgC,iBACAyC,SAAkC;AAElC,YAAMC,SAASf,0BACb3B,iBACAyC,QAAQb,iBACRa,QAAQrE,iBAAiB,OACzBqE,QAAQpE,iBAAiB,OACzBoE,QAAQxB,8BAA8B,OACtCwB,QAAQZ,SAAS;AAGnB,UAAIc,aAAaD,OAAOH;AACxB,UAAI,CAACE,QAAQxC,8BAA8B;AACzC0C,sBAAc;MAChB;AAEA,aAAO;QACL,GAAG1E,cAAc+B,iBAAiByC,OAAAA;QAClCE,YAAY,IAAIA,UAAAA;QAChB5B,WAAW2B,OAAO3B;QAClByB,qBAAqBE,OAAOF;QAC5BX,WAAWa,OAAOb;MACpB;IACF;AAMO,aAAS9D,wBACdiC,iBACAyC,SAEC;AAED,YAAM,EAAE3C,mBAAkB,IAAK5B,qBAC7B8B,iBACA,OACA,KAAA;AAEF,YAAM,EAAE4C,WAAW,KAAI,IAAKH;AAC5B,UAAI3C,uBAAuB,KAAK;AAC9B,YAAI+C,gBAAgBD,WAAW,OAAO;AACtC,eAAO;UACLD,YAAY,KAAKE,aAAAA;QACnB;MACF;AAEA,YAAM,EAAEN,wBAAuB,IAAKZ,0BAClC3B,iBACA,OACA,OACA,OACA,OACAoC,MAAAA;AAEF,UAAIU,uBAAuBF,WAAW,eAAe;AACrD,aAAO;QACLD,YAAY,IAAIJ,uBAAAA,GAA0BO,oBAAAA;MAC5C;IACF;;;;;;;;;;;mCClbgBC,iBAAAA;;;eAAAA;;;;;AAAT,aAASA,cACdC,OACAC,YACAC,OAAqB;AAErB,UAAIC,oBAAoB;AAExB,YAAMC,gBAAeC,GAAAA,YAAAA,eAAcL,KAAAA;AACnC,YAAMM,gBAAgBF,aAAaG;AACnC,YAAMC;;SAEHP,eAAeD,SAAQS,GAAAA,cAAAA,iBAAgBL,YAAAA,EAAcH,UAAAA,IAAc;;QAGpEC;;AAEFC,0BAAoBH;AACpB,YAAMU,SAASC,OAAOC,KAAKN,aAAAA;AAE3B,UACE,CAACI,OAAOG,MAAM,CAACC,UAAAA;AACb,YAAIC,QAAQP,eAAeM,KAAAA,KAAU;AACrC,cAAM,EAAEE,QAAQC,SAAQ,IAAKX,cAAcQ,KAAAA;AAI3C,YAAII,WAAW,IAAIF,SAAS,QAAQ,EAAA,GAAKF,KAAAA;AACzC,YAAIG,UAAU;AACZC,qBAAW,GAAG,CAACH,QAAQ,MAAM,EAAA,IAAMG,QAAAA;QACrC;AACA,YAAIF,UAAU,CAACG,MAAMC,QAAQL,KAAAA,EAAQA,SAAQ;UAACA;;AAE9C,gBACGE,YAAYH,SAASN;SAErBL,oBACCA,kBAAmBkB,QACjBH,UACAF,SACKD,MACEO;;;;;UAKC,CAACC,YAAYC,mBAAmBD,OAAAA;QAAAA,EAEjCE,KAAK,GAAA,IACRD,mBAAmBT,KAAAA,CAAAA,KACpB;MAEX,CAAA,GACA;AACAZ,4BAAoB;MAItB;AACA,aAAO;QACLO;QACAgB,QAAQvB;MACV;IACF;;;;;;;;;;;mCCxCgBwB,eAAAA;;;eAAAA;;;;;;;;;;;;;AAAT,aAASA,YACdC,QACAC,MACAC,WAAmB;AAGnB,UAAIC;AACJ,UAAIC,cAAc,OAAOH,SAAS,WAAWA,QAAOI,GAAAA,WAAAA,sBAAqBJ,IAAAA;AAKzE,YAAMK,gBAAgBF,YAAYG,MAAM,0BAAA;AACxC,YAAMC,qBAAqBF,gBACvBF,YAAYK,MAAMH,cAAc,CAAA,EAAGI,MAAM,IACzCN;AAEJ,YAAMO,WAAWH,mBAAmBI,MAAM,KAAK,CAAA;AAE/C,WAAKD,SAAS,CAAA,KAAM,IAAIJ,MAAM,WAAA,GAAc;AAC1CM,gBAAQC,MACN,iBAAiBV,WAAAA,qCAAgDJ,OAAOe,QAAQ,+EAA+E;AAEjK,cAAMC,iBAAgBC,GAAAA,OAAAA,0BAAyBT,kBAAAA;AAC/CJ,uBAAeE,gBAAgBA,cAAc,CAAA,IAAK,MAAMU;MAC1D;AAGA,UAAI,EAACE,GAAAA,YAAAA,YAAWd,WAAAA,GAAc;AAC5B,eAAQF,YAAY;UAACE;YAAeA;MACtC;AAEA,UAAI;AACF,YAAIe,WAAWf,YAAYgB,WAAW,GAAA,IAAOpB,OAAOqB,SAASrB,OAAOe;AAIpE,YAAIX,YAAYgB,WAAW,GAAA,GAAM;AAC/BD,qBAAWnB,OAAOqB;AAIlB,eAAIC,GAAAA,QAAAA,gBAAetB,OAAOe,QAAQ,GAAG;AACnCI,uBAAWnB,OAAOe;AAElB,kBAAMQ,cAAaC,GAAAA,YAAAA,eAAcxB,OAAOe,QAAQ;AAChD,kBAAMR,SAAQkB,GAAAA,cAAAA,iBAAgBF,UAAAA,EAAYvB,OAAOqB,MAAM;AAIvD,gBAAI,CAACd,OAAO;AACVY,yBAAWnB,OAAOqB;YACpB;UAUF;QACF;AAEAlB,eAAO,IAAIuB,IAAIP,UAAU,UAAA;MAC3B,SAASQ,GAAG;AAEVxB,eAAO,IAAIuB,IAAI,KAAK,UAAA;MACtB;AAEA,UAAI;AACF,cAAME,WAAW,IAAIF,IAAItB,aAAaD,IAAAA;AACtCyB,iBAASb,YAAWc,GAAAA,wBAAAA,4BAA2BD,SAASb,QAAQ;AAChE,YAAIe,iBAAiB;AAErB,aACER,GAAAA,QAAAA,gBAAeM,SAASb,QAAQ,KAChCa,SAASG,gBACT7B,WACA;AACA,gBAAM8B,SAAQC,GAAAA,aAAAA,wBAAuBL,SAASG,YAAY;AAE1D,gBAAM,EAAEG,QAAQC,OAAM,KAAKC,GAAAA,eAAAA,eACzBR,SAASb,UACTa,SAASb,UACTiB,KAAAA;AAGF,cAAIE,QAAQ;AACVJ,8BAAiBzB,GAAAA,WAAAA,sBAAqB;cACpCU,UAAUmB;cACVG,MAAMT,SAASS;cACfL,QAAOM,GAAAA,MAAAA,MAAKN,OAAOG,MAAAA;YACrB,CAAA;UACF;QACF;AAGA,cAAMI,eACJX,SAASY,WAAWrC,KAAKqC,SACrBZ,SAAS3B,KAAKQ,MAAMmB,SAASY,OAAO9B,MAAM,IAC1CkB,SAAS3B;AAEf,eAAOC,YACH;UAACqC;UAAcT,kBAAkBS;YACjCA;MACN,SAASZ,GAAG;AACV,eAAOzB,YAAY;UAACE;YAAeA;MACrC;IACF;;;;;;;;;;;;;;;;mCCnIgBqC,iBAAAA;;;eAAAA;;;;AAAT,aAASA,cAAcC,MAAcC,QAAe;AACzD,UAAI,CAACD,KAAKE,WAAW,GAAA,KAAQ,CAACD,QAAQ;AACpC,eAAOD;MACT;AAEA,YAAM,EAAEG,UAAUC,OAAOC,KAAI,KAAKC,GAAAA,WAAAA,WAAUN,IAAAA;AAC5C,aAAO,GAAGC,MAAAA,GAASE,QAAAA,GAAWC,KAAAA,GAAQC,IAAAA;IACxC;;;;;;;;;;;mCCLgBE,aAAAA;;;eAAAA;;;;;AAAT,aAASA,UACdC,MACAC,QACAC,eACAC,cAAsB;AAItB,UAAI,CAACF,UAAUA,WAAWC,cAAe,QAAOF;AAEhD,YAAMI,QAAQJ,KAAKK,YAAW;AAI9B,UAAI,CAACF,cAAc;AACjB,aAAIG,GAAAA,eAAAA,eAAcF,OAAO,MAAA,EAAS,QAAOJ;AACzC,aAAIM,GAAAA,eAAAA,eAAcF,OAAO,IAAIH,OAAOI,YAAW,CAAA,EAAI,EAAG,QAAOL;MAC/D;AAGA,cAAOO,GAAAA,eAAAA,eAAcP,MAAM,IAAIC,MAAAA,EAAQ;IACzC;;;;;;;;;;;mCC1BaO,aAAAA;;;eAAAA;;;;AAAN,QAAMA,YAAuB,CAACC,SAASC,SAAAA;AAC5C,UAAIC,QAAQC,IAAIC,qBAAqB;AACnC,gBAAOC,GAAAA,wBAAAA,4BAEHC,qBACAP,UAAUC,MAAAA,GAASC,IAAAA,CAAAA;MAEzB;AACA,aAAOD;IACT;;;;;;;;;;;;;;;;mCCTaO,iBAAAA;;;eAAAA;;;;2DAHK;AAGX,QAAMA,gBAAgBC,OAAAA,QAAMC,cAAiC,IAAA;AAEpE,QAAIC,MAAuC;AACzCH,oBAAcI,cAAc;IAC9B;;;;;;;;;;;;;;;;;;MCSaC,oBAAkB,WAAA;eAAlBA;;MAhBAC,qBAAmB,WAAA;eAAnBA;;;AAAN,QAAMA,sBACV,OAAOC,SAAS,eACfA,KAAKD,uBACLC,KAAKD,oBAAoBE,KAAKC,MAAAA,KAChC,SAAUC,IAAuB;AAC/B,UAAIC,QAAQC,KAAKC,IAAG;AACpB,aAAON,KAAKO,WAAW,WAAA;AACrBJ,WAAG;UACDK,YAAY;UACZC,eAAe,WAAA;AACb,mBAAOC,KAAKC,IAAI,GAAG,MAAMN,KAAKC,IAAG,IAAKF,MAAI;UAC5C;QACF,CAAA;MACF,GAAG,CAAA;IACL;AAEK,QAAMN,qBACV,OAAOE,SAAS,eACfA,KAAKF,sBACLE,KAAKF,mBAAmBG,KAAKC,MAAAA,KAC/B,SAAUU,IAAU;AAClB,aAAOC,aAAaD,EAAAA;IACtB;;;;;;;;;;;;;;;;mCCyEcE,mBAAAA;;;eAAAA;;;;;AAtEhB,QAAMC,0BAA0B,OAAOC,yBAAyB;AAEhE,QAAMC,YAAY,oBAAIC,IAAAA;AACtB,QAAMC,SAAuB,CAAA;AAE7B,aAASC,eAAeC,SAAoC;AAC1D,YAAMC,KAAK;QACTC,MAAMF,QAAQE,QAAQ;QACtBC,QAAQH,QAAQI,cAAc;MAChC;AACA,YAAMC,WAAWP,OAAOQ,KACtB,CAACC,QAAQA,IAAIL,SAASD,GAAGC,QAAQK,IAAIJ,WAAWF,GAAGE,MAAM;AAE3D,UAAIK;AAEJ,UAAIH,UAAU;AACZG,mBAAWZ,UAAUa,IAAIJ,QAAAA;AACzB,YAAIG,UAAU;AACZ,iBAAOA;QACT;MACF;AAEA,YAAME,WAAW,oBAAIb,IAAAA;AACrB,YAAMc,WAAW,IAAIhB,qBAAqB,CAACiB,YAAAA;AACzCA,gBAAQC,QAAQ,CAACC,UAAAA;AACf,gBAAMC,WAAWL,SAASD,IAAIK,MAAME,MAAM;AAC1C,gBAAMC,YAAYH,MAAMI,kBAAkBJ,MAAMK,oBAAoB;AACpE,cAAIJ,YAAYE,WAAW;AACzBF,qBAASE,SAAAA;UACX;QACF,CAAA;MACF,GAAGjB,OAAAA;AACHQ,iBAAW;QACTP;QACAU;QACAD;MACF;AAEAZ,aAAOsB,KAAKnB,EAAAA;AACZL,gBAAUyB,IAAIpB,IAAIO,QAAAA;AAClB,aAAOA;IACT;AAEA,aAASc,QACPC,SACAR,UACAf,SAAoC;AAEpC,YAAM,EAAEC,IAAIU,UAAUD,SAAQ,IAAKX,eAAeC,OAAAA;AAClDU,eAASW,IAAIE,SAASR,QAAAA;AAEtBJ,eAASW,QAAQC,OAAAA;AACjB,aAAO,SAASC,YAAAA;AACdd,iBAASe,OAAOF,OAAAA;AAChBZ,iBAASa,UAAUD,OAAAA;AAGnB,YAAIb,SAASgB,SAAS,GAAG;AACvBf,mBAASgB,WAAU;AACnB/B,oBAAU6B,OAAOxB,EAAAA;AACjB,gBAAM2B,QAAQ9B,OAAO+B,UACnB,CAACtB,QAAQA,IAAIL,SAASD,GAAGC,QAAQK,IAAIJ,WAAWF,GAAGE,MAAM;AAE3D,cAAIyB,QAAQ,IAAI;AACd9B,mBAAOgC,OAAOF,OAAO,CAAA;UACvB;QACF;MACF;IACF;AAEO,aAASnC,gBAAmC,EACjDsC,SACA3B,YACA4B,SAAQ,GACQ;AAChB,YAAMC,aAAsBD,YAAY,CAACtC;AAEzC,YAAM,CAACwC,SAASC,UAAAA,KAAcC,GAAAA,OAAAA,UAAS,KAAA;AACvC,YAAMC,cAAaC,GAAAA,OAAAA,QAAiB,IAAA;AACpC,YAAMC,cAAaC,GAAAA,OAAAA,aAAY,CAACjB,YAAAA;AAC9Bc,mBAAWI,UAAUlB;MACvB,GAAG,CAAA,CAAE;AAELmB,OAAAA,GAAAA,OAAAA,WAAU,MAAA;AACR,YAAIhD,yBAAyB;AAC3B,cAAIuC,cAAcC,QAAS;AAE3B,gBAAMX,UAAUc,WAAWI;AAC3B,cAAIlB,WAAWA,QAAQoB,SAAS;AAC9B,kBAAMnB,YAAYF,QAChBC,SACA,CAACN,cAAcA,aAAakB,WAAWlB,SAAAA,GACvC;cAAEf,MAAM6B,mCAASU;cAASrC;YAAW,CAAA;AAGvC,mBAAOoB;UACT;QACF,OAAO;AACL,cAAI,CAACU,SAAS;AACZ,kBAAMU,gBAAeC,GAAAA,qBAAAA,qBAAoB,MAAMV,WAAW,IAAA,CAAA;AAC1D,mBAAO,OAAMW,GAAAA,qBAAAA,oBAAmBF,YAAAA;UAClC;QACF;MAEF,GAAG;QAACX;QAAY7B;QAAY2B;QAASG;QAASG,WAAWI;OAAQ;AAEjE,YAAMM,gBAAeP,GAAAA,OAAAA,aAAY,MAAA;AAC/BL,mBAAW,KAAA;MACb,GAAG,CAAA,CAAE;AAEL,aAAO;QAACI;QAAYL;QAASa;;IAC/B;;;;;;;;;;;;;;;;mCCnHgBC,uBAAAA;;;eAAAA;;;AAXhB,QAAMC,QAAQ,oBAAIC,QAAAA;AAWX,aAASF,oBACdG,UACAC,SAA2B;AAG3B,UAAI,CAACA,QAAS,QAAO;QAAED;MAAS;AAGhC,UAAIE,oBAAoBJ,MAAMK,IAAIF,OAAAA;AAClC,UAAI,CAACC,mBAAmB;AACtBA,4BAAoBD,QAAQG,IAAI,CAACC,WAAWA,OAAOC,YAAW,CAAA;AAC9DR,cAAMS,IAAIN,SAASC,iBAAAA;MACrB;AAEA,UAAIM;AAIJ,YAAMC,WAAWT,SAASU,MAAM,KAAK,CAAA;AAIrC,UAAI,CAACD,SAAS,CAAA,EAAI,QAAO;QAAET;MAAS;AAGpC,YAAMW,UAAUF,SAAS,CAAA,EAAGH,YAAW;AAIvC,YAAMM,QAAQV,kBAAkBW,QAAQF,OAAAA;AACxC,UAAIC,QAAQ,EAAG,QAAO;QAAEZ;MAAS;AAGjCQ,uBAAiBP,QAAQW,KAAAA;AAGzBZ,iBAAWA,SAASc,MAAMN,eAAeO,SAAS,CAAA,KAAM;AAExD,aAAO;QAAEf;QAAUQ;MAAe;IACpC;;;;;;;;;;;mCC1DaQ,uBAAAA;;;eAAAA;;;AAAN,QAAMA,sBAAiC,CAACC,UAAUC,YAAAA;AACvD,UAAIC,QAAQC,IAAIC,qBAAqB;AACnC,eACEC,gCACAN,oBAAoBC,UAAUC,OAAAA;MAClC;AACA,aAAO;QAAED;QAAUM,gBAAgBC;MAAU;IAC/C;;;;;;;;;;;;;;;;mCCPgBC,sBAAAA;;;eAAAA;;;AAAT,aAASA,mBACdC,aACAC,UACAC,gBAAuB;;AAEvB,UAAI,CAACF,YAAa;AAElB,UAAIE,gBAAgB;AAClBA,yBAAiBA,eAAeC,YAAW;MAC7C;AAEA,iBAAWC,QAAQJ,aAAa;AAE9B,cAAMK,kBAAiBD,UAAKE,WAALF,mBAAaG,MAAM,KAAK,GAAG,GAAGJ;AACrD,YACEF,aAAaI,kBACbH,mBAAmBE,KAAKI,cAAcL,YAAW,OACjDC,UAAKK,YAALL,mBAAcM,KAAK,CAACC,WAAWA,OAAOR,YAAW,MAAOD,kBACxD;AACA,iBAAOE;QACT;MACF;IACF;;;;;;;;;;;mCCtBaQ,sBAAAA;;;eAAAA;;;AAAN,QAAMA,qBAAgC,IAAIC,SAAAA;AAC/C,UAAIC,QAAQC,IAAIC,qBAAqB;AACnC,eACEC,+BACAL,mBAAkB,GAAIC,IAAAA;MAC1B;IACF;;;;;;;;;;;;;;;;mCCDgBK,mBAAAA;;;eAAAA;;;;AAFhB,QAAMC,WAAYC,QAAQC,IAAIC,0BAAqC;AAE5D,aAASJ,gBACdK,MACAC,QACAC,SACAC,eAAuC;AAEvC,UAAIN,QAAQC,IAAIM,qBAAqB;AACnC,cAAMC,sBACJC,iCACAD;AACF,cAAME,qBACJD,gCACAC;AAEF,cAAMC,SAASP,UAAUI,oBAAoBL,MAAME,OAAAA,EAASO;AAC5D,cAAMC,SAASH,mBAAmBJ,eAAeQ,QAAWH,MAAAA;AAC5D,YAAIE,QAAQ;AACV,gBAAME,QAAQ,OAAOF,OAAOG,OAAO,KAAK,GAAA;AACxC,gBAAMC,cAAcN,WAAWE,OAAOK,gBAAgB,KAAK,IAAIP,MAAAA;AAC/D,iBAAO,GAAGI,KAAAA,GAAQF,OAAOA,MAAM,IAAGM,GAAAA,wBAAAA,4BAChC,GAAGpB,QAAAA,GAAWkB,WAAAA,GAAcd,IAAAA,EAAM,CAAA;QAEtC;AACA,eAAO;MACT,OAAO;AACL,eAAO;MACT;IACF;;;;;;;;;;;;;;;;mCC7BgBiB,eAAAA;;;eAAAA;;;;;AAFhB,QAAMC,WAAYC,QAAQC,IAAIC,0BAAqC;AAE5D,aAASJ,YAAYK,MAAcC,UAAkB;AAC1D,cAAOC,GAAAA,wBAAAA,4BACLL,QAAQC,IAAIK,kCAAkC,CAACF,WAC3CD,QACAI,GAAAA,eAAAA,eAAcJ,MAAMJ,QAAAA,CAAAA;IAE5B;;;;;;;;;;;;;;;;mCCFgBS,gBAAAA;;;eAAAA;;;;AAAT,aAASA,aACdC,MACAC,MAAmB;AAEnB,YAAMC,YAAWC,GAAAA,OAAAA,QAA4B,IAAA;AAC7C,YAAMC,YAAWD,GAAAA,OAAAA,QAA4B,IAAA;AAS7C,cAAOE,GAAAA,OAAAA,aACL,CAACC,YAAAA;AACC,YAAIA,YAAY,MAAM;AACpB,gBAAMC,aAAaL,SAASI;AAC5B,cAAIC,YAAY;AACdL,qBAASI,UAAU;AACnBC,uBAAAA;UACF;AACA,gBAAMC,aAAaJ,SAASE;AAC5B,cAAIE,YAAY;AACdJ,qBAASE,UAAU;AACnBE,uBAAAA;UACF;QACF,OAAO;AACL,cAAIR,MAAM;AACRE,qBAASI,UAAUG,SAAST,MAAMM,OAAAA;UACpC;AACA,cAAIL,MAAM;AACRG,qBAASE,UAAUG,SAASR,MAAMK,OAAAA;UACpC;QACF;MACF,GACA;QAACN;QAAMC;OAAK;IAEhB;AAEA,aAASQ,SACPT,MACAM,SAAiB;AAEjB,UAAI,OAAON,SAAS,YAAY;AAC9B,cAAMU,UAAUV,KAAKM,OAAAA;AACrB,YAAI,OAAOI,YAAY,YAAY;AACjC,iBAAOA;QACT,OAAO;AACL,iBAAO,MAAMV,KAAK,IAAA;QACpB;MACF,OAAO;AACLA,aAAKM,UAAUA;AACf,eAAO,MAAA;AACLN,eAAKM,UAAU;QACjB;MACF;IACF;;;;;;;;;;;;;;;;mCCvDSK,aAAAA;;;eAAAA;;;AAXT,QAAIA,YAAY,CAACC,MAAAA;IAAe;AAChC,QAAIC,MAAuC;AACzC,YAAMC,SAAS,oBAAIC,IAAAA;AACnBJ,kBAAY,CAACK,QAAAA;AACX,YAAI,CAACF,OAAOG,IAAID,GAAAA,GAAM;AACpBE,kBAAQC,MAAMH,GAAAA;QAChB;AACAF,eAAOM,IAAIJ,GAAAA;MACb;IACF;;;;;ACTA;;;;;;;;;;;;;;MAwsBA,SAAmB,WAAA;eAAnB;;MANaK,eAAa,WAAA;eAAbA;;;;;4DA3rBoC;;;;;;;;;;;;AA2HjD,QAAMC,aAAa,oBAAIC,IAAAA;AAUvB,aAASC,SACPC,QACAC,MACAC,IACAC,SAAwB;AAExB,UAAI,OAAOC,WAAW,aAAa;AACjC;MACF;AAEA,UAAI,EAACC,GAAAA,YAAAA,YAAWJ,IAAAA,GAAO;AACrB;MACF;AAIA,UAAI,CAACE,QAAQG,uBAAuB;AAClC,cAAMC;;UAEJ,OAAOJ,QAAQI,WAAW,cACtBJ,QAAQI,SAER,YAAYP,SACVA,OAAOO,SACPC;;AAER,cAAMC,gBAAgBR,OAAO,MAAMC,KAAK,MAAMK;AAG9C,YAAIV,WAAWa,IAAID,aAAAA,GAAgB;AACjC;QACF;AAGAZ,mBAAWc,IAAIF,aAAAA;MACjB;AAMAT,aAAOD,SAASE,MAAMC,IAAIC,OAAAA,EAASS,MAAM,CAACC,QAAAA;AACxC,YAAIC,MAAuC;AAEzC,gBAAMD;QACR;MACF,CAAA;IACF;AAEA,aAASE,gBAAgBC,OAAuB;AAC9C,YAAMC,cAAcD,MAAME;AAC1B,YAAMC,SAASF,YAAYG,aAAa,QAAA;AACxC,aACGD,UAAUA,WAAW,WACtBH,MAAMK,WACNL,MAAMM,WACNN,MAAMO,YACNP,MAAMQ;MACLR,MAAMS,eAAeT,MAAMS,YAAYC,UAAU;IAEtD;AAEA,aAASC,YACPC,GACA5B,QACAC,MACAC,IACA2B,SACAC,SACAC,QACAxB,QACAyB,YAAmC;AAEnC,YAAM,EAAEC,SAAQ,IAAKL,EAAEV;AAGvB,YAAMgB,mBAAmBD,SAASE,YAAW,MAAO;AAEpD,UACGD,oBAAoBnB,gBAAgBa,CAAAA,KACrCA,EAAEV,cAAckB,aAAa,UAAA,GAC7B;AAEA;MACF;AAEA,UAAI,EAAC/B,GAAAA,YAAAA,YAAWJ,IAAAA,GAAO;AACrB,YAAI4B,SAAS;AAGXD,YAAES,eAAc;AAChBC,mBAAST,QAAQ5B,IAAAA;QACnB;AAGA;MACF;AAEA2B,QAAES,eAAc;AAEhB,YAAME,WAAW,MAAA;AACf,YAAIP,YAAY;AACd,cAAIQ,qBAAqB;AAEzBR,qBAAW;YACTK,gBAAgB,MAAA;AACdG,mCAAqB;YACvB;UACF,CAAA;AAEA,cAAIA,oBAAoB;AACtB;UACF;QACF;AAGA,cAAMC,eAAeV,UAAU;AAC/B,YAAI,oBAAoB/B,QAAQ;AAC9BA,iBAAO6B,UAAU,YAAY,MAAA,EAAQ5B,MAAMC,IAAI;YAC7C4B;YACAvB;YACAwB,QAAQU;UACV,CAAA;QACF,OAAO;AACLzC,iBAAO6B,UAAU,YAAY,MAAA,EAAQ3B,MAAMD,MAAM;YAC/C8B,QAAQU;UACV,CAAA;QACF;MACF;AAEAF,eAAAA;IACF;AAOA,aAASG,kBAAkBC,gBAAkC;AAC3D,UAAI,OAAOA,mBAAmB,UAAU;AACtC,eAAOA;MACT;AAEA,cAAOC,GAAAA,WAAAA,WAAUD,cAAAA;IACnB;AAUA,QAAME,OAAOC,OAAAA,QAAMC,WACjB,SAASC,cAAcC,OAAOC,cAAY;AACxC,UAAIC;AAEJ,YAAM,EACJlD,MAAMmD,UACNlD,IAAImD,QACJF,UAAUG,cACVvD,UAAUwD,eAAe,MACzBC,UACA3B,SACAC,SACAC,QACAxB,QACAkD,SACAzB,YACA0B,cAAcC,kBACdC,cAAcC,kBACdC,iBAAiB,OACjB,GAAGC,UAAAA,IACDd;AAEJE,iBAAWG;AAEX,UACEQ,mBACC,OAAOX,aAAa,YAAY,OAAOA,aAAa,WACrD;AACAA,oBAAW,GAAA,YAAA,KAACa,KAAAA;;;MACd;AAEA,YAAMhE,SAAS8C,OAAAA,QAAMmB,WAAWC,4BAAAA,aAAa;AAE7C,YAAMC,kBAAkBZ,iBAAiB;AAEzC,UAAIzC,MAAuC;AACzC,YAASsD,kBAAT,SAAyBC,MAIxB;AACC,iBAAO,OAAA,eAAA,IAAIC,MACT,gCAAgCD,KAAKE,GAAG,gBAAgBF,KAAKG,QAAQ,6BAA6BH,KAAKI,MAAM,iBAC1G,OAAOrE,WAAW,cAEf,qEACA,GAAC,GALF,qBAAA;mBAAA;wBAAA;0BAAA;UAMP,CAAA;QACF;AAGA,cAAMsE,qBAAsD;UAC1DzE,MAAM;QACR;AACA,cAAM0E,gBAAqCC,OAAOC,KAChDH,kBAAAA;AAEFC,sBAAcG,QAAQ,CAACP,QAAAA;AACrB,cAAIA,QAAQ,QAAQ;AAClB,gBACEtB,MAAMsB,GAAAA,KAAQ,QACb,OAAOtB,MAAMsB,GAAAA,MAAS,YAAY,OAAOtB,MAAMsB,GAAAA,MAAS,UACzD;AACA,oBAAMH,gBAAgB;gBACpBG;gBACAC,UAAU;gBACVC,QAAQxB,MAAMsB,GAAAA,MAAS,OAAO,SAAS,OAAOtB,MAAMsB,GAAAA;cACtD,CAAA;YACF;UACF,OAAO;AAEL,kBAAMQ,IAAWR;UACnB;QACF,CAAA;AAGA,cAAMS,qBAAsD;UAC1D9E,IAAI;UACJ2B,SAAS;UACTE,QAAQ;UACRD,SAAS;UACT0B,UAAU;UACVzD,UAAU;UACVQ,QAAQ;UACRkD,SAAS;UACTC,cAAc;UACdE,cAAc;UACdE,gBAAgB;UAChB9B,YAAY;QACd;AACA,cAAMiD,gBAAqCL,OAAOC,KAChDG,kBAAAA;AAEFC,sBAAcH,QAAQ,CAACP,QAAAA;AACrB,gBAAMW,UAAU,OAAOjC,MAAMsB,GAAAA;AAE7B,cAAIA,QAAQ,MAAM;AAChB,gBAAItB,MAAMsB,GAAAA,KAAQW,YAAY,YAAYA,YAAY,UAAU;AAC9D,oBAAMd,gBAAgB;gBACpBG;gBACAC,UAAU;gBACVC,QAAQS;cACV,CAAA;YACF;UACF,WAAWX,QAAQ,UAAU;AAC3B,gBAAItB,MAAMsB,GAAAA,KAAQW,YAAY,UAAU;AACtC,oBAAMd,gBAAgB;gBACpBG;gBACAC,UAAU;gBACVC,QAAQS;cACV,CAAA;YACF;UACF,WACEX,QAAQ,aACRA,QAAQ,kBACRA,QAAQ,kBACRA,QAAQ,cACR;AACA,gBAAItB,MAAMsB,GAAAA,KAAQW,YAAY,YAAY;AACxC,oBAAMd,gBAAgB;gBACpBG;gBACAC,UAAU;gBACVC,QAAQS;cACV,CAAA;YACF;UACF,WACEX,QAAQ,aACRA,QAAQ,YACRA,QAAQ,aACRA,QAAQ,cACRA,QAAQ,kBACR;AACA,gBAAItB,MAAMsB,GAAAA,KAAQ,QAAQW,YAAY,WAAW;AAC/C,oBAAMd,gBAAgB;gBACpBG;gBACAC,UAAU;gBACVC,QAAQS;cACV,CAAA;YACF;UACF,WAAWX,QAAQ,YAAY;AAC7B,gBACEtB,MAAMsB,GAAAA,KAAQ,QACdW,YAAY,aACZjC,MAAMsB,GAAAA,MAAS,QACf;AACA,oBAAMH,gBAAgB;gBACpBG;gBACAC,UAAU;gBACVC,QAAQS;cACV,CAAA;YACF;UACF,OAAO;AAEL,kBAAMH,IAAWR;UACnB;QACF,CAAA;MACF;AAEA,YAAM,EAAEtE,MAAMC,GAAE,IAAK4C,OAAAA,QAAMqC,QAAQ,MAAA;AACjC,YAAI,CAACnF,QAAQ;AACX,gBAAMoF,gBAAe1C,kBAAkBU,QAAAA;AACvC,iBAAO;YACLnD,MAAMmF;YACNlF,IAAImD,SAASX,kBAAkBW,MAAAA,IAAU+B;UAC3C;QACF;AAEA,cAAM,CAACA,cAAcC,UAAAA,KAAcC,GAAAA,aAAAA,aAAYtF,QAAQoD,UAAU,IAAA;AAEjE,eAAO;UACLnD,MAAMmF;UACNlF,IAAImD,UAASiC,GAAAA,aAAAA,aAAYtF,QAAQqD,MAAAA,IAAUgC,cAAcD;QAC3D;MACF,GAAG;QAACpF;QAAQoD;QAAUC;OAAO;AAE7B,YAAMkC,eAAezC,OAAAA,QAAM0C,OAAevF,IAAAA;AAC1C,YAAMwF,aAAa3C,OAAAA,QAAM0C,OAAetF,EAAAA;AAGxC,UAAIwF;AACJ,UAAI5B,gBAAgB;AAClB,YAAIhD,MAAwC;AAC1C,cAAI2C,SAAS;AACXkC,oBAAQC,KACN,qDAAqDxC,QAAAA,wGAAgH;UAEzK;AACA,cAAIO,kBAAkB;AACpBgC,oBAAQC,KACN,0DAA0DxC,QAAAA,6GAAqH;UAEnL;AACA,cAAI;AACFsC,oBAAQ5C,OAAAA,QAAM+C,SAASC,KAAK3C,QAAAA;UAC9B,SAAStC,KAAK;AACZ,gBAAI,CAACsC,UAAU;AACb,oBAAM,OAAA,eAAA,IAAImB,MACR,wDAAwDlB,QAAAA,gFAAwF,GAD5I,qBAAA;uBAAA;4BAAA;8BAAA;cAEN,CAAA;YACF;AACA,kBAAM,OAAA,eAAA,IAAIkB,MACR,8DAA8DlB,QAAAA,gGAC3D,OAAOhD,WAAW,cACf,sEACA,GAAC,GAJH,qBAAA;qBAAA;0BAAA;4BAAA;YAKN,CAAA;UACF;QACF,OAAO;AACLsF,kBAAQ5C,OAAAA,QAAM+C,SAASC,KAAK3C,QAAAA;QAC9B;MACF,OAAO;AACL,YAAIrC,MAAwC;AAC1C,eAAKqC,qCAAkB4C,UAAS,KAAK;AACnC,kBAAM,OAAA,eAAA,IAAIzB,MACR,iKAAA,GADI,qBAAA;qBAAA;0BAAA;4BAAA;YAEN,CAAA;UACF;QACF;MACF;AAEA,YAAM0B,WAAgBlC,iBAClB4B,SAAS,OAAOA,UAAU,YAAYA,MAAMO,MAC5C/C;AAEJ,YAAM,CAACgD,oBAAoBC,WAAWC,YAAAA,KAAgBC,GAAAA,iBAAAA,iBAAgB;QACpEC,YAAY;MACd,CAAA;AACA,YAAMC,8BAA8BzD,OAAAA,QAAM0D,YACxC,CAACC,OAAAA;AAEC,YAAIhB,WAAWiB,YAAYxG,MAAMqF,aAAamB,YAAYzG,MAAM;AAC9DmG,uBAAAA;AACAX,qBAAWiB,UAAUxG;AACrBqF,uBAAamB,UAAUzG;QACzB;AAEAiG,2BAAmBO,EAAAA;MACrB,GACA;QAACvG;QAAID;QAAMmG;QAAcF;OAAmB;AAG9C,YAAMS,UAASC,GAAAA,cAAAA,cAAaL,6BAA6BP,QAAAA;AAGzDlD,aAAAA,QAAM+D,UAAU,MAAA;AAEd,YAAI/F,MAAuC;AACzC;QACF;AAEA,YAAI,CAACd,QAAQ;AACX;QACF;AAGA,YAAI,CAACmG,aAAa,CAAChC,iBAAiB;AAClC;QACF;AAGApE,iBAASC,QAAQC,MAAMC,IAAI;UAAEK;QAAO,CAAA;MACtC,GAAG;QAACL;QAAID;QAAMkG;QAAW5F;QAAQ4D;QAAiBnE,iCAAQO;QAAQP;OAAO;AAEzE,YAAM8G,aAMF;QACFb,KAAKU;QACLlD,QAAQ7B,GAAC;AACP,cAAId,MAAuC;AACzC,gBAAI,CAACc,GAAG;AACN,oBAAM,OAAA,eAAA,IAAI0C,MACR,gFAAgF,GAD5E,qBAAA;uBAAA;4BAAA;8BAAA;cAEN,CAAA;YACF;UACF;AAEA,cAAI,CAACR,kBAAkB,OAAOL,YAAY,YAAY;AACpDA,oBAAQ7B,CAAAA;UACV;AAEA,cACEkC,kBACA4B,MAAMzC,SACN,OAAOyC,MAAMzC,MAAMQ,YAAY,YAC/B;AACAiC,kBAAMzC,MAAMQ,QAAQ7B,CAAAA;UACtB;AAEA,cAAI,CAAC5B,QAAQ;AACX;UACF;AAEA,cAAI4B,EAAEmF,kBAAkB;AACtB;UACF;AAEApF,sBACEC,GACA5B,QACAC,MACAC,IACA2B,SACAC,SACAC,QACAxB,QACAyB,UAAAA;QAEJ;QACA0B,aAAa9B,GAAC;AACZ,cAAI,CAACkC,kBAAkB,OAAOH,qBAAqB,YAAY;AAC7DA,6BAAiB/B,CAAAA;UACnB;AAEA,cACEkC,kBACA4B,MAAMzC,SACN,OAAOyC,MAAMzC,MAAMS,iBAAiB,YACpC;AACAgC,kBAAMzC,MAAMS,aAAa9B,CAAAA;UAC3B;AAEA,cAAI,CAAC5B,QAAQ;AACX;UACF;AAEAD,mBAASC,QAAQC,MAAMC,IAAI;YACzBK;YACAyG,UAAU;;YAEV1G,uBAAuB;UACzB,CAAA;QACF;QACAsD,cAAc9C,QAAQmG,IAAIC,6BACtB1G,SACA,SAASoD,aAAahC,GAAC;AACrB,cAAI,CAACkC,kBAAkB,OAAOD,qBAAqB,YAAY;AAC7DA,6BAAiBjC,CAAAA;UACnB;AAEA,cACEkC,kBACA4B,MAAMzC,SACN,OAAOyC,MAAMzC,MAAMW,iBAAiB,YACpC;AACA8B,kBAAMzC,MAAMW,aAAahC,CAAAA;UAC3B;AAEA,cAAI,CAAC5B,QAAQ;AACX;UACF;AAEAD,mBAASC,QAAQC,MAAMC,IAAI;YACzBK;YACAyG,UAAU;;YAEV1G,uBAAuB;UACzB,CAAA;QACF;MACN;AAGA,WAAI6G,GAAAA,OAAAA,eAAcjH,EAAAA,GAAK;AACrB4G,mBAAW7G,OAAOC;MACpB,WACE,CAAC4D,kBACDN,YACCkC,MAAMK,SAAS,OAAO,EAAE,UAAUL,MAAMzC,QACzC;AACA,cAAMmE,YAAY,OAAO7G,WAAW,cAAcA,SAASP,iCAAQO;AAInE,cAAM8G,gBACJrH,iCAAQsH,oBACRC,GAAAA,iBAAAA,iBAAgBrH,IAAIkH,WAAWpH,iCAAQwH,SAASxH,iCAAQyH,aAAAA;AAE1DX,mBAAW7G,OACToH,iBACAK,GAAAA,aAAAA,cAAYC,GAAAA,WAAAA,WAAUzH,IAAIkH,WAAWpH,iCAAQ4H,aAAAA,CAAAA;MACjD;AAEA,UAAI9D,gBAAgB;AAClB,YAAIhD,MAAwC;AAC1C+G,WAAAA,GAAAA,WAAAA,WACE,8RAGE;QAEN;AACA,eAAO/E,OAAAA,QAAMgF,aAAapC,OAAOoB,UAAAA;MACnC;AAEA,cACE,GAAA,YAAA,KAAC9C,KAAAA;QAAG,GAAGD;QAAY,GAAG+C;;;IAI1B,CAAA;AAGF,QAAMiB,qBAAoBC,GAAAA,OAAAA,eAEvB;;MAEDC,SAAS;IACX,CAAA;AAEO,QAAMrI,gBAAgB,MAAA;AAG3B,cAAOqE,GAAAA,OAAAA,YAAW8D,iBAAAA;IACpB;QAEA,WAAelF;;;;;;;;;;ACxsBf,IAAAqF,gBAAA;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;",
  "names": ["assign", "searchParamsToUrlQuery", "urlQueryToSearchParams", "searchParams", "query", "key", "value", "entries", "existing", "Array", "isArray", "push", "stringifyUrlQueryParam", "param", "isNaN", "String", "URLSearchParams", "Object", "item", "append", "set", "target", "searchParamsList", "keys", "delete", "formatUrl", "formatWithValidation", "urlObjectKeys", "slashedProtocols", "urlObj", "auth", "hostname", "protocol", "pathname", "hash", "query", "host", "encodeURIComponent", "replace", "indexOf", "port", "String", "querystring", "urlQueryToSearchParams", "search", "endsWith", "slashes", "test", "url", "process", "Object", "keys", "forEach", "key", "includes", "console", "warn", "omit", "object", "keys", "omitted", "Object", "forEach", "key", "includes", "DecodeError", "MiddlewareNotFoundError", "MissingStaticPage", "NormalizeError", "PageNotFoundError", "SP", "ST", "WEB_VITALS", "execOnce", "getDisplayName", "getLocationOrigin", "getURL", "isAbsoluteUrl", "isResSent", "loadGetInitialProps", "normalizeRepeatedSlashes", "stringifyError", "fn", "used", "result", "args", "ABSOLUTE_URL_REGEX", "url", "test", "protocol", "hostname", "port", "window", "location", "href", "origin", "substring", "length", "Component", "displayName", "name", "res", "finished", "headersSent", "urlParts", "split", "urlNoQuery", "replace", "slice", "join", "App", "ctx", "process", "prototype", "getInitialProps", "message", "Error", "pageProps", "props", "Object", "keys", "console", "warn", "performance", "every", "method", "constructor", "page", "code", "error", "JSON", "stringify", "stack", "removeTrailingSlash", "route", "replace", "parsePath", "path", "hashIndex", "indexOf", "queryIndex", "hasQuery", "pathname", "substring", "query", "undefined", "hash", "slice", "normalizePathTrailingSlash", "path", "startsWith", "process", "env", "__NEXT_MANUAL_TRAILING_SLASH", "pathname", "query", "hash", "parsePath", "__NEXT_TRAILING_SLASH", "test", "removeTrailingSlash", "endsWith", "pathHasPrefix", "path", "prefix", "pathname", "parsePath", "startsWith", "hasBasePath", "basePath", "process", "env", "__NEXT_ROUTER_BASEPATH", "path", "pathHasPrefix", "isLocalURL", "url", "isAbsoluteUrl", "locationOrigin", "getLocationOrigin", "resolved", "URL", "origin", "hasBasePath", "pathname", "_", "getSortedRouteObjects", "getSortedRoutes", "UrlNode", "insert", "urlPath", "_insert", "split", "filter", "Boolean", "smoosh", "_smoosh", "prefix", "childrenPaths", "children", "keys", "sort", "slugName", "splice", "indexOf", "restSlugName", "optionalRestSlugName", "routes", "map", "c", "get", "reduce", "prev", "curr", "push", "placeholder", "r", "slice", "Error", "unshift", "urlPaths", "slugNames", "isCatchAll", "length", "nextSegment", "startsWith", "endsWith", "handleSlug", "previousSlug", "nextSlug", "forEach", "slug", "replace", "segmentName", "isOptional", "substring", "has", "set", "Map", "normalizedPages", "root", "pagePath", "objects", "getter", "indexes", "pathnames", "i", "pathname", "sorted", "ensureLeadingSlash", "path", "startsWith", "normalizeAppPath", "normalizeRscURL", "route", "ensureLeadingSlash", "split", "reduce", "pathname", "segment", "index", "segments", "isGroupSegment", "length", "url", "replace", "INTERCEPTION_ROUTE_MARKERS", "extractInterceptionRouteInformation", "isInterceptionRouteAppPath", "path", "split", "find", "segment", "m", "startsWith", "undefined", "interceptingRoute", "marker", "interceptedRoute", "Error", "normalizeAppPath", "slice", "concat", "join", "splitInterceptingRoute", "length", "isDynamicRoute", "TEST_ROUTE", "TEST_STRICT_ROUTE", "route", "strict", "isInterceptionRouteAppPath", "extractInterceptionRouteInformation", "interceptedRoute", "test", "getSortedRouteObjects", "getSortedRoutes", "isDynamicRoute", "e", "n", "t", "a", "i", "r", "PARAM_SEPARATOR", "hasAdjacentParameterIssues", "normalizeAdjacentParameters", "normalizeTokensForRegexp", "stripNormalizedSeparators", "stripParameterSeparators", "route", "test", "normalized", "replace", "tokens", "map", "token", "modifier", "prefix", "suffix", "pathname", "RegExp", "params", "cleaned", "key", "value", "Object", "entries", "Array", "isArray", "item", "safeCompile", "safePathToRegexp", "safeRegexpToFunction", "safeRouteMatcher", "route", "keys", "options", "pathToRegexp", "needsNormalization", "hasAdjacentParameterIssues", "routeToUse", "normalizeAdjacentParameters", "error", "normalizedRoute", "retryError", "compiler", "compile", "params", "stripNormalizedSeparators", "regexp", "originalMatcher", "regexpToFunction", "pathname", "result", "stripParameterSeparators", "matcherFn", "getRouteMatcher", "re", "groups", "rawMatcher", "pathname", "routeMatch", "exec", "decode", "param", "decodeURIComponent", "DecodeError", "params", "key", "group", "Object", "entries", "match", "pos", "undefined", "repeat", "split", "map", "entry", "safeRouteMatcher", "ACTION_SUFFIX", "APP_DIR_ALIAS", "CACHE_ONE_YEAR", "DOT_NEXT_ALIAS", "ESLINT_DEFAULT_DIRS", "GSP_NO_RETURNED_VALUE", "GSSP_COMPONENT_MEMBER_ERROR", "GSSP_NO_RETURNED_VALUE", "HTML_CONTENT_TYPE_HEADER", "INFINITE_CACHE", "INSTRUMENTATION_HOOK_FILENAME", "JSON_CONTENT_TYPE_HEADER", "MATCHED_PATH_HEADER", "MIDDLEWARE_FILENAME", "MIDDLEWARE_LOCATION_REGEXP", "NEXT_BODY_SUFFIX", "NEXT_CACHE_IMPLICIT_TAG_ID", "NEXT_CACHE_REVALIDATED_TAGS_HEADER", "NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER", "NEXT_CACHE_SOFT_TAG_MAX_LENGTH", "NEXT_CACHE_TAGS_HEADER", "NEXT_CACHE_TAG_MAX_ITEMS", "NEXT_CACHE_TAG_MAX_LENGTH", "NEXT_DATA_SUFFIX", "NEXT_INTERCEPTION_MARKER_PREFIX", "NEXT_META_SUFFIX", "NEXT_QUERY_PARAM_PREFIX", "NEXT_RESUME_HEADER", "NON_STANDARD_NODE_ENV", "PAGES_DIR_ALIAS", "PRERENDER_REVALIDATE_HEADER", "PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER", "PROXY_FILENAME", "PROXY_LOCATION_REGEXP", "PUBLIC_DIR_MIDDLEWARE_CONFLICT", "ROOT_DIR_ALIAS", "RSC_ACTION_CLIENT_WRAPPER_ALIAS", "RSC_ACTION_ENCRYPTION_ALIAS", "RSC_ACTION_PROXY_ALIAS", "RSC_ACTION_VALIDATE_ALIAS", "RSC_CACHE_WRAPPER_ALIAS", "RSC_DYNAMIC_IMPORT_WRAPPER_ALIAS", "RSC_MOD_REF_PROXY_ALIAS", "RSC_PREFETCH_SUFFIX", "RSC_SEGMENTS_DIR_SUFFIX", "RSC_SEGMENT_SUFFIX", "RSC_SUFFIX", "SERVER_PROPS_EXPORT_ERROR", "SERVER_PROPS_GET_INIT_PROPS_CONFLICT", "SERVER_PROPS_SSG_CONFLICT", "SERVER_RUNTIME", "SSG_FALLBACK_EXPORT_ERROR", "SSG_GET_INITIAL_PROPS_CONFLICT", "STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR", "TEXT_PLAIN_CONTENT_TYPE_HEADER", "UNSTABLE_REVALIDATE_RENAME_ERROR", "WEBPACK_LAYERS", "WEBPACK_RESOURCE_QUERIES", "WEB_SOCKET_MAX_RECONNECTIONS", "edge", "experimentalEdge", "nodejs", "WEBPACK_LAYERS_NAMES", "shared", "reactServerComponents", "serverSideRendering", "actionBrowser", "apiNode", "apiEdge", "middleware", "instrument", "edgeAsset", "appPagesBrowser", "pagesDirBrowser", "pagesDirEdge", "pagesDirNode", "GROUP", "builtinReact", "serverOnly", "neutralTarget", "clientOnly", "bundled", "appPages", "edgeSSREntry", "metadata", "metadataRoute", "metadataImageMeta", "escapeStringRegexp", "reHasRegExp", "reReplaceRegExp", "str", "test", "replace", "parseLoaderTree", "tree", "segment", "parallelRoutes", "modules", "layout", "template", "page", "DEFAULT_SEGMENT_KEY", "defaultPage", "conventionPath", "getParamProperties", "getSegmentParam", "isCatchAll", "segment", "interceptionMarker", "INTERCEPTION_ROUTE_MARKERS", "find", "marker", "startsWith", "slice", "length", "endsWith", "type", "param", "paramType", "repeat", "optional", "PARAMETER_PATTERN", "getDynamicParam", "interpolateParallelRouteParams", "parseMatchedParameter", "parseParameter", "getParamValue", "interpolatedParams", "segmentKey", "fallbackRouteParams", "value", "has", "searchValue", "get", "Array", "isArray", "map", "i", "encodeURIComponent", "loaderTree", "params", "pagePath", "interpolated", "structuredClone", "stack", "tree", "depth", "pathSegments", "split", "slice", "length", "pop", "segment", "parallelRoutes", "parseLoaderTree", "segmentParam", "getSegmentParam", "hasOwnProperty", "param", "type", "remainingSegments", "processedSegments", "flatMap", "pathSegment", "filter", "s", "undefined", "nextDepth", "isRouteGroup", "startsWith", "endsWith", "route", "Object", "values", "push", "dynamicParamType", "treeSegment", "InvariantError", "join", "match", "optional", "repeat", "key", "getNamedMiddlewareRegex", "getNamedRouteRegex", "getRouteRegex", "getParametrizedRoute", "route", "includeSuffix", "includePrefix", "groups", "groupIndex", "segments", "segment", "removeTrailingSlash", "slice", "split", "markerMatch", "INTERCEPTION_ROUTE_MARKERS", "find", "m", "startsWith", "paramMatches", "match", "PARAMETER_PATTERN", "key", "optional", "repeat", "parseMatchedParameter", "pos", "push", "escapeStringRegexp", "s", "substring", "parameterizedRoute", "join", "normalizedRoute", "excludeOptionalTrailingSlash", "re", "RegExp", "buildGetSafeRouteKey", "i", "routeKey", "j", "String", "fromCharCode", "Math", "floor", "getSafeKeyFromSegment", "interceptionMarker", "getSafeRouteKey", "routeKeys", "keyPrefix", "backreferenceDuplicateKeys", "cleanedKey", "replace", "invalidKey", "length", "isNaN", "parseInt", "duplicateKey", "interceptionPrefix", "pattern", "getNamedParametrizedRoute", "prefixRouteKeys", "reference", "names", "intercepted", "inverseParts", "structuredClone", "hasInterceptionMarker", "some", "undefined", "NEXT_INTERCEPTION_MARKER_PREFIX", "NEXT_QUERY_PARAM_PREFIX", "namedParameterizedRoute", "pathToRegexpPattern", "options", "result", "namedRegex", "catchAll", "catchAllRegex", "catchAllGroupedRegex", "interpolateAs", "route", "asPathname", "query", "interpolatedRoute", "dynamicRegex", "getRouteRegex", "dynamicGroups", "groups", "dynamicMatches", "getRouteMatcher", "params", "Object", "keys", "every", "param", "value", "repeat", "optional", "replaced", "Array", "isArray", "replace", "map", "segment", "encodeURIComponent", "join", "result", "resolveHref", "router", "href", "resolveAs", "base", "urlAsString", "formatWithValidation", "urlProtoMatch", "match", "urlAsStringNoProto", "slice", "length", "urlParts", "split", "console", "error", "pathname", "normalizedUrl", "normalizeRepeatedSlashes", "isLocalURL", "baseBase", "startsWith", "asPath", "isDynamicRoute", "routeRegex", "getRouteRegex", "getRouteMatcher", "URL", "_", "finalUrl", "normalizePathTrailingSlash", "interpolatedAs", "searchParams", "query", "searchParamsToUrlQuery", "result", "params", "interpolateAs", "hash", "omit", "resolvedHref", "origin", "addPathPrefix", "path", "prefix", "startsWith", "pathname", "query", "hash", "parsePath", "addLocale", "path", "locale", "defaultLocale", "ignorePrefix", "lower", "toLowerCase", "pathHasPrefix", "addPathPrefix", "addLocale", "path", "args", "process", "env", "__NEXT_I18N_SUPPORT", "normalizePathTrailingSlash", "require", "RouterContext", "React", "createContext", "process", "displayName", "cancelIdleCallback", "requestIdleCallback", "self", "bind", "window", "cb", "start", "Date", "now", "setTimeout", "didTimeout", "timeRemaining", "Math", "max", "id", "clearTimeout", "useIntersection", "hasIntersectionObserver", "IntersectionObserver", "observers", "Map", "idList", "createObserver", "options", "id", "root", "margin", "rootMargin", "existing", "find", "obj", "instance", "get", "elements", "observer", "entries", "forEach", "entry", "callback", "target", "isVisible", "isIntersecting", "intersectionRatio", "push", "set", "observe", "element", "unobserve", "delete", "size", "disconnect", "index", "findIndex", "splice", "rootRef", "disabled", "isDisabled", "visible", "setVisible", "useState", "elementRef", "useRef", "setElement", "useCallback", "current", "useEffect", "tagName", "idleCallback", "requestIdleCallback", "cancelIdleCallback", "resetVisible", "normalizeLocalePath", "cache", "WeakMap", "pathname", "locales", "lowercasedLocales", "get", "map", "locale", "toLowerCase", "set", "detectedLocale", "segments", "split", "segment", "index", "indexOf", "slice", "length", "normalizeLocalePath", "pathname", "locales", "process", "env", "__NEXT_I18N_SUPPORT", "require", "detectedLocale", "undefined", "detectDomainLocale", "domainItems", "hostname", "detectedLocale", "toLowerCase", "item", "domainHostname", "domain", "split", "defaultLocale", "locales", "some", "locale", "detectDomainLocale", "args", "process", "env", "__NEXT_I18N_SUPPORT", "require", "getDomainLocale", "basePath", "process", "env", "__NEXT_ROUTER_BASEPATH", "path", "locale", "locales", "domainLocales", "__NEXT_I18N_SUPPORT", "normalizeLocalePath", "require", "detectDomainLocale", "target", "detectedLocale", "domain", "undefined", "proto", "http", "finalLocale", "defaultLocale", "normalizePathTrailingSlash", "addBasePath", "basePath", "process", "env", "__NEXT_ROUTER_BASEPATH", "path", "required", "normalizePathTrailingSlash", "__NEXT_MANUAL_CLIENT_BASE_PATH", "addPathPrefix", "useMergedRef", "refA", "refB", "cleanupA", "useRef", "cleanupB", "useCallback", "current", "cleanupFnA", "cleanupFnB", "applyRef", "cleanup", "errorOnce", "_", "process", "errors", "Set", "msg", "has", "console", "error", "add", "useLinkStatus", "prefetched", "Set", "prefetch", "router", "href", "as", "options", "window", "isLocalURL", "bypassPrefetchedCheck", "locale", "undefined", "prefetchedKey", "has", "add", "catch", "err", "process", "isModifiedEvent", "event", "eventTarget", "currentTarget", "target", "getAttribute", "metaKey", "ctrlKey", "shiftKey", "altKey", "nativeEvent", "which", "linkClicked", "e", "replace", "shallow", "scroll", "onNavigate", "nodeName", "isAnchorNodeName", "toUpperCase", "hasAttribute", "preventDefault", "location", "navigate", "isDefaultPrevented", "routerScroll", "formatStringOrUrl", "urlObjOrString", "formatUrl", "Link", "React", "forwardRef", "LinkComponent", "props", "forwardedRef", "children", "hrefProp", "asProp", "childrenProp", "prefetchProp", "passHref", "onClick", "onMouseEnter", "onMouseEnterProp", "onTouchStart", "onTouchStartProp", "legacyBehavior", "restProps", "a", "useContext", "RouterContext", "prefetchEnabled", "createPropError", "args", "Error", "key", "expected", "actual", "requiredPropsGuard", "requiredProps", "Object", "keys", "forEach", "_", "optionalPropsGuard", "optionalProps", "valType", "useMemo", "resolvedHref", "resolvedAs", "resolveHref", "previousHref", "useRef", "previousAs", "child", "console", "warn", "Children", "only", "type", "childRef", "ref", "setIntersectionRef", "isVisible", "resetVisible", "useIntersection", "rootMargin", "setIntersectionWithResetRef", "useCallback", "el", "current", "setRef", "useMergedRef", "useEffect", "childProps", "defaultPrevented", "priority", "env", "__NEXT_LINK_NO_TOUCH_START", "isAbsoluteUrl", "curLocale", "localeDomain", "isLocaleDomain", "getDomainLocale", "locales", "domainLocales", "addBasePath", "addLocale", "defaultLocale", "errorOnce", "cloneElement", "LinkStatusContext", "createContext", "pending", "require_link"]
}
