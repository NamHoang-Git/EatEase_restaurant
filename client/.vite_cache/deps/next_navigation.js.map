{
  "version": 3,
  "sources": ["../../node_modules/next/src/shared/lib/app-router-context.shared-runtime.ts", "../../node_modules/next/src/shared/lib/hooks-client-context.shared-runtime.ts", "../../node_modules/next/src/client/components/readonly-url-search-params.ts", "../../node_modules/next/src/shared/lib/server-inserted-html.shared-runtime.tsx", "../../node_modules/next/src/client/components/unrecognized-action-error.ts", "../../node_modules/next/src/client/components/redirect-status-code.ts", "../../node_modules/next/src/client/components/redirect-error.ts", "../../node_modules/next/src/server/app-render/async-local-storage.ts", "../../node_modules/next/src/server/app-render/action-async-storage-instance.ts", "../../node_modules/next/src/server/app-render/action-async-storage.external.ts", "../../node_modules/next/src/client/components/redirect.ts", "../../node_modules/next/src/client/components/http-access-fallback/http-access-fallback.ts", "../../node_modules/next/src/client/components/not-found.ts", "../../node_modules/next/src/client/components/forbidden.ts", "../../node_modules/next/src/client/components/unauthorized.ts", "../../node_modules/next/src/server/dynamic-rendering-utils.ts", "../../node_modules/next/src/server/lib/router-utils/is-postpone.ts", "../../node_modules/next/src/shared/lib/lazy-dynamic/bailout-to-csr.ts", "../../node_modules/next/src/client/components/is-next-router-error.ts", "../../node_modules/next/src/client/components/hooks-server-context.ts", "../../node_modules/next/src/client/components/static-generation-bailout.ts", "../../node_modules/next/src/server/app-render/work-unit-async-storage-instance.ts", "../../node_modules/next/src/client/components/app-router-headers.ts", "../../node_modules/next/src/server/app-render/work-unit-async-storage.external.ts", "../../node_modules/next/src/server/app-render/work-async-storage-instance.ts", "../../node_modules/next/src/server/app-render/work-async-storage.external.ts", "../../node_modules/next/src/lib/framework/boundary-constants.tsx", "../../node_modules/next/src/lib/scheduler.ts", "../../node_modules/next/src/shared/lib/promise-with-resolvers.ts", "../../node_modules/next/src/server/app-render/staged-rendering.ts", "../../node_modules/next/src/server/app-render/dynamic-rendering.ts", "../../node_modules/next/src/client/components/unstable-rethrow.server.ts", "../../node_modules/next/src/client/components/unstable-rethrow.browser.ts", "../../node_modules/next/src/client/components/unstable-rethrow.ts", "../../node_modules/next/src/client/components/navigation.react-server.ts", "../../node_modules/next/src/client/components/navigation.ts", "../../node_modules/next/navigation.js"],
  "sourcesContent": ["'use client'\n\nimport type {\n  FocusAndScrollRef,\n  PrefetchKind,\n} from '../../client/components/router-reducer/router-reducer-types'\nimport type { Params } from '../../server/request/params'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n  CacheNode,\n} from './app-router-types'\nimport React from 'react'\n\nexport interface NavigateOptions {\n  scroll?: boolean\n}\n\nexport interface PrefetchOptions {\n  kind: PrefetchKind\n  onInvalidate?: () => void\n}\n\nexport interface AppRouterInstance {\n  /**\n   * Navigate to the previous history entry.\n   */\n  back(): void\n  /**\n   * Navigate to the next history entry.\n   */\n  forward(): void\n  /**\n   * Refresh the current page.\n   */\n  refresh(): void\n  /**\n   * Refresh the current page. Use in development only.\n   * @internal\n   */\n  hmrRefresh(): void\n  /**\n   * Navigate to the provided href.\n   * Pushes a new history entry.\n   */\n  push(href: string, options?: NavigateOptions): void\n  /**\n   * Navigate to the provided href.\n   * Replaces the current history entry.\n   */\n  replace(href: string, options?: NavigateOptions): void\n  /**\n   * Prefetch the provided href.\n   */\n  prefetch(href: string, options?: PrefetchOptions): void\n}\n\nexport const AppRouterContext = React.createContext<AppRouterInstance | null>(\n  null\n)\nexport const LayoutRouterContext = React.createContext<{\n  parentTree: FlightRouterState\n  parentCacheNode: CacheNode\n  parentSegmentPath: FlightSegmentPath | null\n  parentParams: Params\n  debugNameContext: string\n  url: string\n  isActive: boolean\n} | null>(null)\n\nexport const GlobalLayoutRouterContext = React.createContext<{\n  tree: FlightRouterState\n  focusAndScrollRef: FocusAndScrollRef\n  nextUrl: string | null\n  previousNextUrl: string | null\n}>(null as any)\n\nexport const TemplateContext = React.createContext<React.ReactNode>(null as any)\n\nif (process.env.NODE_ENV !== 'production') {\n  AppRouterContext.displayName = 'AppRouterContext'\n  LayoutRouterContext.displayName = 'LayoutRouterContext'\n  GlobalLayoutRouterContext.displayName = 'GlobalLayoutRouterContext'\n  TemplateContext.displayName = 'TemplateContext'\n}\n\nexport const MissingSlotContext = React.createContext<Set<string>>(new Set())\n", "'use client'\n\nimport { createContext } from 'react'\nimport type { Params } from '../../server/request/params'\n\nexport const SearchParamsContext = createContext<URLSearchParams | null>(null)\nexport const PathnameContext = createContext<string | null>(null)\nexport const PathParamsContext = createContext<Params | null>(null)\n\n// Dev-only context for Suspense DevTools instrumentation\n// These promises are used to track navigation hook usage in React DevTools\nexport type InstrumentedPromise<T> = Promise<T> & {\n  status: 'fulfilled'\n  value: T\n  displayName: string\n}\n\nexport type NavigationPromises = {\n  pathname: InstrumentedPromise<string>\n  searchParams: InstrumentedPromise<any> // ReadonlyURLSearchParams\n  params: InstrumentedPromise<any> // Params\n  // Layout segment hooks (updated at each layout boundary)\n  selectedLayoutSegmentPromises?: Map<\n    string,\n    InstrumentedPromise<string | null>\n  >\n  selectedLayoutSegmentsPromises?: Map<string, InstrumentedPromise<string[]>>\n}\n\nexport const NavigationPromisesContext =\n  createContext<NavigationPromises | null>(null)\n\n// Creates an instrumented promise for Suspense DevTools\n// These promises are always fulfilled and exist purely for\n// tracking in React's Suspense DevTools.\nexport function createDevToolsInstrumentedPromise<T>(\n  displayName: string,\n  value: T\n): InstrumentedPromise<T> {\n  const promise = Promise.resolve(value) as InstrumentedPromise<T>\n  promise.status = 'fulfilled'\n  promise.value = value\n  promise.displayName = `${displayName} (SSR)`\n  return promise\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  SearchParamsContext.displayName = 'SearchParamsContext'\n  PathnameContext.displayName = 'PathnameContext'\n  PathParamsContext.displayName = 'PathParamsContext'\n  NavigationPromisesContext.displayName = 'NavigationPromisesContext'\n}\n", "/**\n * ReadonlyURLSearchParams implementation shared between client and server.\n * This file is intentionally not marked as 'use client' or 'use server'\n * so it can be imported by both environments.\n */\n\n/** @internal */\nclass ReadonlyURLSearchParamsError extends Error {\n  constructor() {\n    super(\n      'Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams'\n    )\n  }\n}\n\n/**\n * A read-only version of URLSearchParams that throws errors when mutation methods are called.\n * This ensures that the URLSearchParams returned by useSearchParams() cannot be mutated.\n */\nexport class ReadonlyURLSearchParams extends URLSearchParams {\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  append() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  delete() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  set() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  sort() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n}\n", "'use client'\n\nimport React, { useContext } from 'react'\n\nexport type ServerInsertedHTMLHook = (callbacks: () => React.ReactNode) => void\n\n// Use `React.createContext` to avoid errors from the RSC checks because\n// it can't be imported directly in Server Components:\n//\n//   import { createContext } from 'react'\n//\n// More info: https://github.com/vercel/next.js/pull/40686\nexport const ServerInsertedHTMLContext =\n  React.createContext<ServerInsertedHTMLHook | null>(null as any)\n\nexport function useServerInsertedHTML(callback: () => React.ReactNode): void {\n  const addInsertedServerHTMLCallback = useContext(ServerInsertedHTMLContext)\n  // Should have no effects on client where there's no flush effects provider\n  if (addInsertedServerHTMLCallback) {\n    addInsertedServerHTMLCallback(callback)\n  }\n}\n", "export class UnrecognizedActionError extends Error {\n  constructor(...args: ConstructorParameters<typeof Error>) {\n    super(...args)\n    this.name = 'UnrecognizedActionError'\n  }\n}\n\n/**\n * Check whether a server action call failed because the server action was not recognized by the server.\n * This can happen if the client and the server are not from the same deployment.\n *\n * Example usage:\n * ```ts\n * try {\n *   await myServerAction();\n * } catch (err) {\n *   if (unstable_isUnrecognizedActionError(err)) {\n *     // The client is from a different deployment than the server.\n *     // Reloading the page will fix this mismatch.\n *     window.alert(\"Please refresh the page and try again\");\n *     return;\n *   }\n * }\n * ```\n * */\nexport function unstable_isUnrecognizedActionError(\n  error: unknown\n): error is UnrecognizedActionError {\n  return !!(\n    error &&\n    typeof error === 'object' &&\n    error instanceof UnrecognizedActionError\n  )\n}\n", "export enum RedirectStatusCode {\n  SeeOther = 303,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n}\n", "import { RedirectStatusCode } from './redirect-status-code'\n\nexport const REDIRECT_ERROR_CODE = 'NEXT_REDIRECT'\n\nexport enum RedirectType {\n  push = 'push',\n  replace = 'replace',\n}\n\nexport type RedirectError = Error & {\n  digest: `${typeof REDIRECT_ERROR_CODE};${RedirectType};${string};${RedirectStatusCode};`\n}\n\n/**\n * Checks an error to determine if it's an error generated by the\n * `redirect(url)` helper.\n *\n * @param error the error that may reference a redirect error\n * @returns true if the error is a redirect error\n */\nexport function isRedirectError(error: unknown): error is RedirectError {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('digest' in error) ||\n    typeof error.digest !== 'string'\n  ) {\n    return false\n  }\n\n  const digest = error.digest.split(';')\n  const [errorCode, type] = digest\n  const destination = digest.slice(2, -2).join(';')\n  const status = digest.at(-2)\n\n  const statusCode = Number(status)\n\n  return (\n    errorCode === REDIRECT_ERROR_CODE &&\n    (type === 'replace' || type === 'push') &&\n    typeof destination === 'string' &&\n    !isNaN(statusCode) &&\n    statusCode in RedirectStatusCode\n  )\n}\n", "import type { AsyncLocalStorage } from 'async_hooks'\n\nconst sharedAsyncLocalStorageNotAvailableError = new Error(\n  'Invariant: AsyncLocalStorage accessed in runtime where it is not available'\n)\n\nclass FakeAsyncLocalStorage<Store extends {}>\n  implements AsyncLocalStorage<Store>\n{\n  disable(): void {\n    throw sharedAsyncLocalStorageNotAvailableError\n  }\n\n  getStore(): Store | undefined {\n    // This fake implementation of AsyncLocalStorage always returns `undefined`.\n    return undefined\n  }\n\n  run<R>(): R {\n    throw sharedAsyncLocalStorageNotAvailableError\n  }\n\n  exit<R>(): R {\n    throw sharedAsyncLocalStorageNotAvailableError\n  }\n\n  enterWith(): void {\n    throw sharedAsyncLocalStorageNotAvailableError\n  }\n\n  static bind<T>(fn: T): T {\n    return fn\n  }\n}\n\nconst maybeGlobalAsyncLocalStorage =\n  typeof globalThis !== 'undefined' && (globalThis as any).AsyncLocalStorage\n\nexport function createAsyncLocalStorage<\n  Store extends {},\n>(): AsyncLocalStorage<Store> {\n  if (maybeGlobalAsyncLocalStorage) {\n    return new maybeGlobalAsyncLocalStorage()\n  }\n  return new FakeAsyncLocalStorage()\n}\n\nexport function bindSnapshot<T>(\n  // WARNING: Don't pass a named function to this argument! See: https://github.com/facebook/react/pull/34911\n  fn: T\n): T {\n  if (maybeGlobalAsyncLocalStorage) {\n    return maybeGlobalAsyncLocalStorage.bind(fn)\n  }\n  return FakeAsyncLocalStorage.bind(fn)\n}\n\nexport function createSnapshot(): <R, TArgs extends any[]>(\n  fn: (...args: TArgs) => R,\n  ...args: TArgs\n) => R {\n  if (maybeGlobalAsyncLocalStorage) {\n    return maybeGlobalAsyncLocalStorage.snapshot()\n  }\n  return function (fn: any, ...args: any[]) {\n    return fn(...args)\n  }\n}\n", "import type { ActionAsyncStorage } from './action-async-storage.external'\nimport { createAsyncLocalStorage } from './async-local-storage'\n\nexport const actionAsyncStorageInstance: ActionAsyncStorage =\n  createAsyncLocalStorage()\n", "import type { AsyncLocalStorage } from 'async_hooks'\n\n// Share the instance module in the next-shared layer\nimport { actionAsyncStorageInstance } from './action-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\nexport interface ActionStore {\n  readonly isAction?: boolean\n  readonly isAppRoute?: boolean\n}\n\nexport type ActionAsyncStorage = AsyncLocalStorage<ActionStore>\n\nexport { actionAsyncStorageInstance as actionAsyncStorage }\n", "import { RedirectStatusCode } from './redirect-status-code'\nimport {\n  RedirectType,\n  type RedirectError,\n  isRedirectError,\n  REDIRECT_ERROR_CODE,\n} from './redirect-error'\n\nconst actionAsyncStorage =\n  typeof window === 'undefined'\n    ? (\n        require('../../server/app-render/action-async-storage.external') as typeof import('../../server/app-render/action-async-storage.external')\n      ).actionAsyncStorage\n    : undefined\n\nexport function getRedirectError(\n  url: string,\n  type: RedirectType,\n  statusCode: RedirectStatusCode = RedirectStatusCode.TemporaryRedirect\n): RedirectError {\n  const error = new Error(REDIRECT_ERROR_CODE) as RedirectError\n  error.digest = `${REDIRECT_ERROR_CODE};${type};${url};${statusCode};`\n  return error\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 307/303 to the caller.\n * - In a Server Action, type defaults to 'push' and 'replace' elsewhere.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function redirect(\n  /** The URL to redirect to */\n  url: string,\n  type?: RedirectType\n): never {\n  type ??= actionAsyncStorage?.getStore()?.isAction\n    ? RedirectType.push\n    : RedirectType.replace\n\n  throw getRedirectError(url, type, RedirectStatusCode.TemporaryRedirect)\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 308/303 to the caller.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function permanentRedirect(\n  /** The URL to redirect to */\n  url: string,\n  type: RedirectType = RedirectType.replace\n): never {\n  throw getRedirectError(url, type, RedirectStatusCode.PermanentRedirect)\n}\n\n/**\n * Returns the encoded URL from the error if it's a RedirectError, null\n * otherwise. Note that this does not validate the URL returned.\n *\n * @param error the error that may be a redirect error\n * @return the url if the error was a redirect error\n */\nexport function getURLFromRedirectError(error: RedirectError): string\nexport function getURLFromRedirectError(error: unknown): string | null {\n  if (!isRedirectError(error)) return null\n\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';')\n}\n\nexport function getRedirectTypeFromError(error: RedirectError): RedirectType {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return error.digest.split(';', 2)[1] as RedirectType\n}\n\nexport function getRedirectStatusCodeFromError(error: RedirectError): number {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return Number(error.digest.split(';').at(-2))\n}\n", "export const HTTPAccessErrorStatus = {\n  NOT_FOUND: 404,\n  FORBIDDEN: 403,\n  UNAUTHORIZED: 401,\n}\n\nconst ALLOWED_CODES = new Set(Object.values(HTTPAccessErrorStatus))\n\nexport const HTTP_ERROR_FALLBACK_ERROR_CODE = 'NEXT_HTTP_ERROR_FALLBACK'\n\nexport type HTTPAccessFallbackError = Error & {\n  digest: `${typeof HTTP_ERROR_FALLBACK_ERROR_CODE};${string}`\n}\n\n/**\n * Checks an error to determine if it's an error generated by\n * the HTTP navigation APIs `notFound()`, `forbidden()` or `unauthorized()`.\n *\n * @param error the error that may reference a HTTP access error\n * @returns true if the error is a HTTP access error\n */\nexport function isHTTPAccessFallbackError(\n  error: unknown\n): error is HTTPAccessFallbackError {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('digest' in error) ||\n    typeof error.digest !== 'string'\n  ) {\n    return false\n  }\n  const [prefix, httpStatus] = error.digest.split(';')\n\n  return (\n    prefix === HTTP_ERROR_FALLBACK_ERROR_CODE &&\n    ALLOWED_CODES.has(Number(httpStatus))\n  )\n}\n\nexport function getAccessFallbackHTTPStatus(\n  error: HTTPAccessFallbackError\n): number {\n  const httpStatus = error.digest.split(';')[1]\n  return Number(httpStatus)\n}\n\nexport function getAccessFallbackErrorTypeByStatus(\n  status: number\n): 'not-found' | 'forbidden' | 'unauthorized' | undefined {\n  switch (status) {\n    case 401:\n      return 'unauthorized'\n    case 403:\n      return 'forbidden'\n    case 404:\n      return 'not-found'\n    default:\n      return\n  }\n}\n", "import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n/**\n * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\n * within a route segment as well as inject a tag.\n *\n * `notFound()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a `<meta name=\"robots\" content=\"noindex\" />` meta tag and set the status code to 404.\n * - In a Route Handler or Server Action, it will serve a 404 to the caller.\n *\n * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};404`\n\nexport function notFound(): never {\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n\n  throw error\n}\n", "import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `forbidden` docs\n/**\n * @experimental\n * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)\n * within a route segment as well as inject a tag.\n *\n * `forbidden()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};403`\n\nexport function forbidden(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`forbidden()\\` is experimental and only allowed to be enabled when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n", "import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `unauthorized` docs\n/**\n * @experimental\n * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)\n * within a route segment as well as inject a tag.\n *\n * `unauthorized()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n *\n * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};401`\n\nexport function unauthorized(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`unauthorized()\\` is experimental and only allowed to be used when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n", "import type { NonStaticRenderStage } from './app-render/staged-rendering'\nimport type { RequestStore } from './app-render/work-unit-async-storage.external'\n\nexport function isHangingPromiseRejectionError(\n  err: unknown\n): err is HangingPromiseRejectionError {\n  if (typeof err !== 'object' || err === null || !('digest' in err)) {\n    return false\n  }\n\n  return err.digest === HANGING_PROMISE_REJECTION\n}\n\nconst HANGING_PROMISE_REJECTION = 'HANGING_PROMISE_REJECTION'\n\nclass HangingPromiseRejectionError extends Error {\n  public readonly digest = HANGING_PROMISE_REJECTION\n\n  constructor(\n    public readonly route: string,\n    public readonly expression: string\n  ) {\n    super(\n      `During prerendering, ${expression} rejects when the prerender is complete. Typically these errors are handled by React but if you move ${expression} to a different context by using \\`setTimeout\\`, \\`after\\`, or similar functions you may observe this error and you should handle it in that context. This occurred at route \"${route}\".`\n    )\n  }\n}\n\ntype AbortListeners = Array<(err: unknown) => void>\nconst abortListenersBySignal = new WeakMap<AbortSignal, AbortListeners>()\n\n/**\n * This function constructs a promise that will never resolve. This is primarily\n * useful for cacheComponents where we use promise resolution timing to determine which\n * parts of a render can be included in a prerender.\n *\n * @internal\n */\nexport function makeHangingPromise<T>(\n  signal: AbortSignal,\n  route: string,\n  expression: string\n): Promise<T> {\n  if (signal.aborted) {\n    return Promise.reject(new HangingPromiseRejectionError(route, expression))\n  } else {\n    const hangingPromise = new Promise<T>((_, reject) => {\n      const boundRejection = reject.bind(\n        null,\n        new HangingPromiseRejectionError(route, expression)\n      )\n      let currentListeners = abortListenersBySignal.get(signal)\n      if (currentListeners) {\n        currentListeners.push(boundRejection)\n      } else {\n        const listeners = [boundRejection]\n        abortListenersBySignal.set(signal, listeners)\n        signal.addEventListener(\n          'abort',\n          () => {\n            for (let i = 0; i < listeners.length; i++) {\n              listeners[i]()\n            }\n          },\n          { once: true }\n        )\n      }\n    })\n    // We are fine if no one actually awaits this promise. We shouldn't consider this an unhandled rejection so\n    // we attach a noop catch handler here to suppress this warning. If you actually await somewhere or construct\n    // your own promise out of it you'll need to ensure you handle the error when it rejects.\n    hangingPromise.catch(ignoreReject)\n    return hangingPromise\n  }\n}\n\nfunction ignoreReject() {}\n\nexport function makeDevtoolsIOAwarePromise<T>(\n  underlying: T,\n  requestStore: RequestStore,\n  stage: NonStaticRenderStage\n): Promise<T> {\n  if (requestStore.stagedRendering) {\n    // We resolve each stage in a timeout, so React DevTools will pick this up as IO.\n    return requestStore.stagedRendering.delayUntilStage(\n      stage,\n      undefined,\n      underlying\n    )\n  }\n  // in React DevTools if we resolve in a setTimeout we will observe\n  // the promise resolution as something that can suspend a boundary or root.\n  return new Promise<T>((resolve) => {\n    // Must use setTimeout to be considered IO React DevTools. setImmediate will not work.\n    setTimeout(() => {\n      resolve(underlying)\n    }, 0)\n  })\n}\n", "const REACT_POSTPONE_TYPE: symbol = Symbol.for('react.postpone')\n\nexport function isPostpone(error: any): boolean {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    error.$$typeof === REACT_POSTPONE_TYPE\n  )\n}\n", "// This has to be a shared module which is shared between client component error boundary and dynamic component\nconst BAILOUT_TO_CSR = 'BAILOUT_TO_CLIENT_SIDE_RENDERING'\n\n/** An error that should be thrown when we want to bail out to client-side rendering. */\nexport class BailoutToCSRError extends Error {\n  public readonly digest = BAILOUT_TO_CSR\n\n  constructor(public readonly reason: string) {\n    super(`Bail out to client-side rendering: ${reason}`)\n  }\n}\n\n/** Checks if a passed argument is an error that is thrown if we want to bail out to client-side rendering. */\nexport function isBailoutToCSRError(err: unknown): err is BailoutToCSRError {\n  if (typeof err !== 'object' || err === null || !('digest' in err)) {\n    return false\n  }\n\n  return err.digest === BAILOUT_TO_CSR\n}\n", "import {\n  isHTTPAccessFallbackError,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\nimport { isRedirectError, type RedirectError } from './redirect-error'\n\n/**\n * Returns true if the error is a navigation signal error. These errors are\n * thrown by user code to perform navigation operations and interrupt the React\n * render.\n */\nexport function isNextRouterError(\n  error: unknown\n): error is RedirectError | HTTPAccessFallbackError {\n  return isRedirectError(error) || isHTTPAccessFallbackError(error)\n}\n", "const DYNAMIC_ERROR_CODE = 'DYNAMIC_SERVER_USAGE'\n\nexport class DynamicServerError extends Error {\n  digest: typeof DYNAMIC_ERROR_CODE = DYNAMIC_ERROR_CODE\n\n  constructor(public readonly description: string) {\n    super(`Dynamic server usage: ${description}`)\n  }\n}\n\nexport function isDynamicServerError(err: unknown): err is DynamicServerError {\n  if (\n    typeof err !== 'object' ||\n    err === null ||\n    !('digest' in err) ||\n    typeof err.digest !== 'string'\n  ) {\n    return false\n  }\n\n  return err.digest === DYNAMIC_ERROR_CODE\n}\n", "const NEXT_STATIC_GEN_BAILOUT = 'NEXT_STATIC_GEN_BAILOUT'\n\nexport class StaticGenBailoutError extends Error {\n  public readonly code = NEXT_STATIC_GEN_BAILOUT\n}\n\nexport function isStaticGenBailoutError(\n  error: unknown\n): error is StaticGenBailoutError {\n  if (typeof error !== 'object' || error === null || !('code' in error)) {\n    return false\n  }\n\n  return error.code === NEXT_STATIC_GEN_BAILOUT\n}\n", "import { createAsyncLocalStorage } from './async-local-storage'\nimport type { WorkUnitAsyncStorage } from './work-unit-async-storage.external'\n\nexport const workUnitAsyncStorageInstance: WorkUnitAsyncStorage =\n  createAsyncLocalStorage()\n", "export const RSC_HEADER = 'rsc' as const\nexport const ACTION_HEADER = 'next-action' as const\n// TODO: Instead of sending the full router state, we only need to send the\n// segment path. Saves bytes. Then we could also use this field for segment\n// prefetches, which also need to specify a particular segment.\nexport const NEXT_ROUTER_STATE_TREE_HEADER = 'next-router-state-tree' as const\nexport const NEXT_ROUTER_PREFETCH_HEADER = 'next-router-prefetch' as const\n// This contains the path to the segment being prefetched.\n// TODO: If we change next-router-state-tree to be a segment path, we can use\n// that instead. Then next-router-prefetch and next-router-segment-prefetch can\n// be merged into a single enum.\nexport const NEXT_ROUTER_SEGMENT_PREFETCH_HEADER =\n  'next-router-segment-prefetch' as const\nexport const NEXT_HMR_REFRESH_HEADER = 'next-hmr-refresh' as const\nexport const NEXT_HMR_REFRESH_HASH_COOKIE = '__next_hmr_refresh_hash__' as const\nexport const NEXT_URL = 'next-url' as const\nexport const RSC_CONTENT_TYPE_HEADER = 'text/x-component' as const\n\nexport const FLIGHT_HEADERS = [\n  RSC_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n] as const\n\nexport const NEXT_RSC_UNION_QUERY = '_rsc' as const\n\nexport const NEXT_ROUTER_STALE_TIME_HEADER = 'x-nextjs-stale-time' as const\nexport const NEXT_DID_POSTPONE_HEADER = 'x-nextjs-postponed' as const\nexport const NEXT_REWRITTEN_PATH_HEADER = 'x-nextjs-rewritten-path' as const\nexport const NEXT_REWRITTEN_QUERY_HEADER = 'x-nextjs-rewritten-query' as const\nexport const NEXT_IS_PRERENDER_HEADER = 'x-nextjs-prerender' as const\nexport const NEXT_ACTION_NOT_FOUND_HEADER = 'x-nextjs-action-not-found' as const\nexport const NEXT_REQUEST_ID_HEADER = 'x-nextjs-request-id' as const\nexport const NEXT_HTML_REQUEST_ID_HEADER = 'x-nextjs-html-request-id' as const\n", "import type { AsyncLocalStorage } from 'async_hooks'\nimport type { DraftModeProvider } from '../async-storage/draft-mode-provider'\nimport type { ResponseCookies } from '../web/spec-extension/cookies'\nimport type { ReadonlyHeaders } from '../web/spec-extension/adapters/headers'\nimport type { ReadonlyRequestCookies } from '../web/spec-extension/adapters/request-cookies'\nimport type { CacheSignal } from './cache-signal'\nimport type { DynamicTrackingState } from './dynamic-rendering'\nimport type { OpaqueFallbackRouteParams } from '../request/fallback-params'\n\n// Share the instance module in the next-shared layer\nimport { workUnitAsyncStorageInstance } from './work-unit-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type {\n  RenderResumeDataCache,\n  PrerenderResumeDataCache,\n} from '../resume-data-cache/resume-data-cache'\nimport type { Params } from '../request/params'\nimport type { ImplicitTags } from '../lib/implicit-tags'\nimport type { WorkStore } from './work-async-storage.external'\nimport { NEXT_HMR_REFRESH_HASH_COOKIE } from '../../client/components/app-router-headers'\nimport { InvariantError } from '../../shared/lib/invariant-error'\nimport type { StagedRenderingController } from './staged-rendering'\n\nexport type WorkUnitPhase = 'action' | 'render' | 'after'\n\nexport interface CommonWorkUnitStore {\n  /** NOTE: Will be mutated as phases change */\n  phase: WorkUnitPhase\n  readonly implicitTags: ImplicitTags\n}\n\nexport interface RequestStore extends CommonWorkUnitStore {\n  readonly type: 'request'\n\n  /**\n   * The URL of the request. This only specifies the pathname and the search\n   * part of the URL.\n   */\n  readonly url: {\n    /**\n     * The pathname of the requested URL.\n     */\n    readonly pathname: string\n\n    /**\n     * The search part of the requested URL. If the request did not provide a\n     * search part, this will be an empty string.\n     */\n    readonly search: string\n  }\n\n  readonly headers: ReadonlyHeaders\n  // This is mutable because we need to reassign it when transitioning from the action phase to the render phase.\n  // The cookie object itself is deliberately read only and thus can't be updated.\n  cookies: ReadonlyRequestCookies\n  readonly mutableCookies: ResponseCookies\n  readonly userspaceMutableCookies: ResponseCookies\n  readonly draftMode: DraftModeProvider\n  readonly isHmrRefresh?: boolean\n  readonly serverComponentsHmrCache?: ServerComponentsHmrCache\n\n  readonly rootParams: Params\n\n  /**\n   * The resume data cache for this request. This will be a immutable cache.\n   */\n  renderResumeDataCache: RenderResumeDataCache | null\n\n  // DEV-only\n  usedDynamic?: boolean\n  devFallbackParams?: OpaqueFallbackRouteParams | null\n  stagedRendering?: StagedRenderingController | null\n  asyncApiPromises?: DevAsyncApiPromises\n  cacheSignal?: CacheSignal | null\n  prerenderResumeDataCache?: PrerenderResumeDataCache | null\n}\n\ntype DevAsyncApiPromises = {\n  cookies: Promise<ReadonlyRequestCookies>\n  mutableCookies: Promise<ReadonlyRequestCookies>\n  headers: Promise<ReadonlyHeaders>\n\n  sharedParamsParent: Promise<string>\n  sharedSearchParamsParent: Promise<string>\n\n  connection: Promise<undefined>\n}\n\n/**\n * The Prerender store is for tracking information related to prerenders.\n *\n * It can be used for both RSC and SSR prerendering and should be scoped as close\n * to the individual `renderTo...` API call as possible. To keep the type simple\n * we don't distinguish between RSC and SSR prerendering explicitly but instead\n * use conditional object properties to infer which mode we are in. For instance cache tracking\n * only needs to happen during the RSC prerender when we are prospectively prerendering\n * to fill all caches.\n */\nexport type PrerenderStoreModern =\n  | PrerenderStoreModernClient\n  | PrerenderStoreModernServer\n  | PrerenderStoreModernRuntime\n\n/** Like `PrerenderStoreModern`, but only including static prerenders (i.e. not runtime prerenders) */\nexport type StaticPrerenderStoreModern = Exclude<\n  PrerenderStoreModern,\n  PrerenderStoreModernRuntime\n>\n\nexport interface PrerenderStoreModernClient\n  extends PrerenderStoreModernCommon,\n    StaticPrerenderStoreCommon {\n  readonly type: 'prerender-client'\n}\n\nexport interface PrerenderStoreModernServer\n  extends PrerenderStoreModernCommon,\n    StaticPrerenderStoreCommon {\n  readonly type: 'prerender'\n}\n\nexport interface PrerenderStoreModernRuntime\n  extends PrerenderStoreModernCommon {\n  readonly type: 'prerender-runtime'\n\n  /**\n   * A runtime prerender resolves APIs in two tasks:\n   *\n   * 1. Static data (available in a static prerender)\n   * 2. Runtime data (available in a runtime prerender)\n   *\n   * This separation is achieved by awaiting this promise in \"runtime\" APIs.\n   * In the final prerender, the promise will be resolved during the second task,\n   * and the render will be aborted in the task that follows it.\n   */\n  readonly runtimeStagePromise: Promise<void> | null\n\n  readonly headers: RequestStore['headers']\n  readonly cookies: RequestStore['cookies']\n  readonly draftMode: RequestStore['draftMode']\n}\n\nexport interface RevalidateStore {\n  // Collected revalidate times and tags for this document during the prerender.\n  revalidate: number // in seconds. 0 means dynamic. INFINITE_CACHE and higher means never revalidate.\n  expire: number // server expiration time\n  stale: number // client expiration time\n  tags: null | string[]\n}\n\ninterface PrerenderStoreModernCommon\n  extends CommonWorkUnitStore,\n    RevalidateStore {\n  /**\n   * The render signal is aborted after React's `prerender` function is aborted\n   * (using a separate signal), which happens in two cases:\n   *\n   * 1. When all caches are filled during the prospective prerender.\n   * 2. When the final prerender is aborted immediately after the prerender was\n   *    started.\n   *\n   * It can be used to reject any pending I/O, including hanging promises. This\n   * allows React to properly track the async I/O in dev mode, which yields\n   * better owner stacks for dynamic validation errors.\n   */\n  readonly renderSignal: AbortSignal\n\n  /**\n   * This is the AbortController which represents the boundary between Prerender\n   * and dynamic. In some renders it is the same as the controller for React,\n   * but in others it is a separate controller. It should be aborted whenever we\n   * are no longer in the prerender phase of rendering. Typically this is after\n   * one task, or when you call a sync API which requires the prerender to end\n   * immediately.\n   */\n  readonly controller: AbortController\n\n  /**\n   * When not null, this signal is used to track cache reads during prerendering\n   * and to await all cache reads completing, before aborting the prerender.\n   */\n  readonly cacheSignal: null | CacheSignal\n\n  /**\n   * During some prerenders we want to track dynamic access.\n   */\n  readonly dynamicTracking: null | DynamicTrackingState\n\n  readonly rootParams: Params\n\n  /**\n   * A mutable resume data cache for this prerender.\n   */\n  prerenderResumeDataCache: PrerenderResumeDataCache | null\n\n  /**\n   * An immutable resume data cache for this prerender. This may be provided\n   * instead of the `prerenderResumeDataCache` if the prerender is not supposed\n   * to fill caches, and only read from prefilled caches, e.g. when prerendering\n   * an optional fallback shell.\n   */\n  renderResumeDataCache: RenderResumeDataCache | null\n\n  /**\n   * The HMR refresh hash is only provided in dev mode. It is needed for the dev\n   * warmup render to ensure that the cache keys will be identical for the\n   * subsequent dynamic render.\n   */\n  readonly hmrRefreshHash: string | undefined\n\n  /**\n   * Only available in dev mode.\n   */\n  readonly captureOwnerStack: undefined | (() => string | null)\n}\n\ninterface StaticPrerenderStoreCommon {\n  /**\n   * The set of unknown route parameters. Accessing these will be tracked as\n   * a dynamic access.\n   */\n  readonly fallbackRouteParams: OpaqueFallbackRouteParams | null\n\n  /**\n   * When true, the page is prerendered as a fallback shell, while allowing any\n   * dynamic accesses to result in an empty shell. This is the case when there\n   * are also routes prerendered with a more complete set of params.\n   * Prerendering those routes would catch any invalid dynamic accesses.\n   */\n  readonly allowEmptyStaticShell: boolean\n}\n\nexport interface PrerenderStorePPR\n  extends CommonWorkUnitStore,\n    RevalidateStore {\n  readonly type: 'prerender-ppr'\n  readonly rootParams: Params\n  readonly dynamicTracking: null | DynamicTrackingState\n\n  /**\n   * The set of unknown route parameters. Accessing these will be tracked as\n   * a dynamic access.\n   */\n  readonly fallbackRouteParams: OpaqueFallbackRouteParams | null\n\n  /**\n   * The resume data cache for this prerender.\n   */\n  prerenderResumeDataCache: PrerenderResumeDataCache\n}\n\nexport interface PrerenderStoreLegacy\n  extends CommonWorkUnitStore,\n    RevalidateStore {\n  readonly type: 'prerender-legacy'\n  readonly rootParams: Params\n}\n\nexport type PrerenderStore =\n  | PrerenderStoreLegacy\n  | PrerenderStorePPR\n  | PrerenderStoreModern\n\n// /** Like `PrerenderStoreModern`, but only including static prerenders (i.e. not runtime prerenders) */\nexport type StaticPrerenderStore = Exclude<\n  PrerenderStore,\n  PrerenderStoreModernRuntime\n>\n\nexport interface CommonCacheStore\n  extends Omit<CommonWorkUnitStore, 'implicitTags'> {\n  /**\n   * A cache work unit store might not always have an outer work unit store,\n   * from which implicit tags could be inherited.\n   */\n  readonly implicitTags: ImplicitTags | undefined\n  /**\n   * Draft mode is only available if the outer work unit store is a request\n   * store and draft mode is enabled.\n   */\n  readonly draftMode: DraftModeProvider | undefined\n}\n\nexport interface CommonUseCacheStore extends CommonCacheStore, RevalidateStore {\n  explicitRevalidate: undefined | number // explicit revalidate time from cacheLife() calls\n  explicitExpire: undefined | number // server expiration time\n  explicitStale: undefined | number // client expiration time\n  readonly hmrRefreshHash: string | undefined\n  readonly isHmrRefresh: boolean\n  readonly serverComponentsHmrCache: ServerComponentsHmrCache | undefined\n  readonly forceRevalidate: boolean\n}\n\nexport interface PublicUseCacheStore extends CommonUseCacheStore {\n  readonly type: 'cache'\n}\n\nexport interface PrivateUseCacheStore extends CommonUseCacheStore {\n  readonly type: 'private-cache'\n\n  /**\n   * A runtime prerender resolves APIs in two tasks:\n   *\n   * 1. Static data (available in a static prerender)\n   * 2. Runtime data (available in a runtime prerender)\n   *\n   * This separation is achieved by awaiting this promise in \"runtime\" APIs.\n   * In the final prerender, the promise will be resolved during the second task,\n   * and the render will be aborted in the task that follows it.\n   */\n  readonly runtimeStagePromise: Promise<void> | null\n\n  readonly headers: ReadonlyHeaders\n  readonly cookies: ReadonlyRequestCookies\n\n  /**\n   * Private caches don't currently need to track root params in the cache key\n   * because they're not persisted anywhere, so we can allow root params access\n   * (unlike public caches)\n   */\n  readonly rootParams: Params\n}\n\nexport type UseCacheStore = PublicUseCacheStore | PrivateUseCacheStore\n\nexport interface UnstableCacheStore extends CommonCacheStore {\n  readonly type: 'unstable-cache'\n}\n\n/**\n * The Cache store is for tracking information inside a \"use cache\" or\n * unstable_cache context. A cache store shadows an outer request store (if\n * present) as a work unit, so that we never accidentally expose any request or\n * page specific information to cache functions, unless it's explicitly desired.\n * For those exceptions, the data is copied over from the request store to the\n * cache store, instead of generally making the request store available to cache\n * functions.\n */\nexport type CacheStore = UseCacheStore | UnstableCacheStore\n\nexport type WorkUnitStore = RequestStore | CacheStore | PrerenderStore\n\nexport type WorkUnitAsyncStorage = AsyncLocalStorage<WorkUnitStore>\n\nexport { workUnitAsyncStorageInstance as workUnitAsyncStorage }\n\nexport function throwForMissingRequestStore(callingExpression: string): never {\n  throw new Error(\n    `\\`${callingExpression}\\` was called outside a request scope. Read more: https://nextjs.org/docs/messages/next-dynamic-api-wrong-context`\n  )\n}\n\nexport function throwInvariantForMissingStore(): never {\n  throw new InvariantError('Expected workUnitAsyncStorage to have a store.')\n}\n\nexport function getPrerenderResumeDataCache(\n  workUnitStore: WorkUnitStore\n): PrerenderResumeDataCache | null {\n  switch (workUnitStore.type) {\n    case 'prerender':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n      return workUnitStore.prerenderResumeDataCache\n    case 'prerender-client':\n      // TODO eliminate fetch caching in client scope and stop exposing this data\n      // cache during SSR.\n      return workUnitStore.prerenderResumeDataCache\n    case 'request': {\n      // In dev, we might fill caches even during a dynamic request.\n      if (workUnitStore.prerenderResumeDataCache) {\n        return workUnitStore.prerenderResumeDataCache\n      }\n      // fallthrough\n    }\n    case 'prerender-legacy':\n    case 'cache':\n    case 'private-cache':\n    case 'unstable-cache':\n      return null\n    default:\n      return workUnitStore satisfies never\n  }\n}\n\nexport function getRenderResumeDataCache(\n  workUnitStore: WorkUnitStore\n): RenderResumeDataCache | null {\n  switch (workUnitStore.type) {\n    case 'request':\n    case 'prerender':\n    case 'prerender-runtime':\n    case 'prerender-client':\n      if (workUnitStore.renderResumeDataCache) {\n        // If we are in a prerender, we might have a render resume data cache\n        // that is used to read from prefilled caches.\n        return workUnitStore.renderResumeDataCache\n      }\n    // fallthrough\n    case 'prerender-ppr':\n      // Otherwise we return the mutable resume data cache here as an immutable\n      // version of the cache as it can also be used for reading.\n      return workUnitStore.prerenderResumeDataCache ?? null\n    case 'cache':\n    case 'private-cache':\n    case 'unstable-cache':\n    case 'prerender-legacy':\n      return null\n    default:\n      return workUnitStore satisfies never\n  }\n}\n\nexport function getHmrRefreshHash(\n  workStore: WorkStore,\n  workUnitStore: WorkUnitStore\n): string | undefined {\n  if (workStore.dev) {\n    switch (workUnitStore.type) {\n      case 'cache':\n      case 'private-cache':\n      case 'prerender':\n      case 'prerender-runtime':\n        return workUnitStore.hmrRefreshHash\n      case 'request':\n        return workUnitStore.cookies.get(NEXT_HMR_REFRESH_HASH_COOKIE)?.value\n      case 'prerender-client':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n      case 'unstable-cache':\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n\n  return undefined\n}\n\nexport function isHmrRefresh(\n  workStore: WorkStore,\n  workUnitStore: WorkUnitStore\n): boolean {\n  if (workStore.dev) {\n    switch (workUnitStore.type) {\n      case 'cache':\n      case 'private-cache':\n      case 'request':\n        return workUnitStore.isHmrRefresh ?? false\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-runtime':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n      case 'unstable-cache':\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n\n  return false\n}\n\nexport function getServerComponentsHmrCache(\n  workStore: WorkStore,\n  workUnitStore: WorkUnitStore\n): ServerComponentsHmrCache | undefined {\n  if (workStore.dev) {\n    switch (workUnitStore.type) {\n      case 'cache':\n      case 'private-cache':\n      case 'request':\n        return workUnitStore.serverComponentsHmrCache\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-runtime':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n      case 'unstable-cache':\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Returns a draft mode provider only if draft mode is enabled.\n */\nexport function getDraftModeProviderForCacheScope(\n  workStore: WorkStore,\n  workUnitStore: WorkUnitStore\n): DraftModeProvider | undefined {\n  if (workStore.isDraftMode) {\n    switch (workUnitStore.type) {\n      case 'cache':\n      case 'private-cache':\n      case 'unstable-cache':\n      case 'prerender-runtime':\n      case 'request':\n        return workUnitStore.draftMode\n      case 'prerender':\n      case 'prerender-client':\n      case 'prerender-ppr':\n      case 'prerender-legacy':\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n\n  return undefined\n}\n\nexport function getCacheSignal(\n  workUnitStore: WorkUnitStore\n): CacheSignal | null {\n  switch (workUnitStore.type) {\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n      return workUnitStore.cacheSignal\n    case 'request': {\n      // In dev, we might fill caches even during a dynamic request.\n      if (workUnitStore.cacheSignal) {\n        return workUnitStore.cacheSignal\n      }\n      // fallthrough\n    }\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'cache':\n    case 'private-cache':\n    case 'unstable-cache':\n      return null\n    default:\n      return workUnitStore satisfies never\n  }\n}\n\nexport function getRuntimeStagePromise(\n  workUnitStore: WorkUnitStore\n): Promise<void> | null {\n  switch (workUnitStore.type) {\n    case 'prerender-runtime':\n    case 'private-cache':\n      return workUnitStore.runtimeStagePromise\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'request':\n    case 'cache':\n    case 'unstable-cache':\n      return null\n    default:\n      return workUnitStore satisfies never\n  }\n}\n", "import type { WorkAsyncStorage } from './work-async-storage.external'\nimport { createAsyncLocalStorage } from './async-local-storage'\n\nexport const workAsyncStorageInstance: WorkAsyncStorage =\n  createAsyncLocalStorage()\n", "import type { AsyncLocalStorage } from 'async_hooks'\nimport type { IncrementalCache } from '../lib/incremental-cache'\nimport type { FetchMetrics } from '../base-http'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { AppSegmentConfig } from '../../build/segment-config/app/app-segment-config'\nimport type { AfterContext } from '../after/after-context'\nimport type { CacheLife } from '../use-cache/cache-life'\n\n// Share the instance module in the next-shared layer\nimport { workAsyncStorageInstance } from './work-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\nimport type { LazyResult } from '../lib/lazy-result'\n\nexport interface WorkStore {\n  readonly isStaticGeneration: boolean\n\n  /**\n   * The page that is being rendered. This relates to the path to the page file.\n   */\n  readonly page: string\n\n  /**\n   * The route that is being rendered. This is the page property without the\n   * trailing `/page` or `/route` suffix.\n   */\n  readonly route: string\n\n  readonly incrementalCache?: IncrementalCache\n  readonly cacheLifeProfiles?: { [profile: string]: CacheLife }\n\n  readonly isOnDemandRevalidate?: boolean\n  readonly isBuildTimePrerendering?: boolean\n\n  /**\n   * This is true when:\n   * - source maps are generated\n   * - source maps are applied\n   * - minification is disabled\n   */\n  readonly hasReadableErrorStacks?: boolean\n\n  forceDynamic?: boolean\n  fetchCache?: AppSegmentConfig['fetchCache']\n\n  forceStatic?: boolean\n  dynamicShouldError?: boolean\n  pendingRevalidates?: Record<string, Promise<any>>\n  pendingRevalidateWrites?: Array<Promise<void>> // This is like pendingRevalidates but isn't used for deduping.\n  readonly afterContext: AfterContext\n\n  dynamicUsageDescription?: string\n  dynamicUsageStack?: string\n\n  /**\n   * Invalid dynamic usage errors might be caught in userland. We attach them to\n   * the work store to ensure we can still fail the build, or show en error in\n   * dev mode.\n   */\n  // TODO: Collect an array of errors, and throw as AggregateError when\n  // `serializeError` and the Dev Overlay support it.\n  invalidDynamicUsageError?: Error\n\n  nextFetchId?: number\n  pathWasRevalidated?: boolean\n\n  /**\n   * Tags that were revalidated during the current request. They need to be sent\n   * to cache handlers to propagate their revalidation.\n   */\n  pendingRevalidatedTags?: Array<{\n    tag: string\n    profile?: string | { stale?: number; revalidate?: number; expire?: number }\n  }>\n\n  /**\n   * Tags that were previously revalidated (e.g. by a redirecting server action)\n   * and have already been sent to cache handlers. Retrieved cache entries that\n   * include any of these tags must be discarded.\n   */\n  readonly previouslyRevalidatedTags: readonly string[]\n\n  /**\n   * This map contains lazy results so that we can evaluate them when the first\n   * cache entry is read. It allows us to skip refreshing tags if no caches are\n   * read at all.\n   */\n  readonly refreshTagsByCacheKind: Map<string, LazyResult<void>>\n\n  fetchMetrics?: FetchMetrics\n  shouldTrackFetchMetrics: boolean\n\n  isDraftMode?: boolean\n  isUnstableNoStore?: boolean\n  isPrefetchRequest?: boolean\n\n  buildId: string\n\n  readonly reactLoadableManifest?: DeepReadonly<\n    Record<string, { files: string[] }>\n  >\n  readonly assetPrefix?: string\n  readonly nonce?: string\n\n  cacheComponentsEnabled: boolean\n  dev: boolean\n\n  /**\n   * Run the given function inside a clean AsyncLocalStorage snapshot. This is\n   * useful when generating cache entries, to ensure that the cache generation\n   * cannot read anything from the context we're currently executing in, which\n   * might include request-specific things like `cookies()` inside a\n   * `React.cache()`.\n   */\n  runInCleanSnapshot: <R, TArgs extends any[]>(\n    fn: (...args: TArgs) => R,\n    ...args: TArgs\n  ) => R\n}\n\nexport type WorkAsyncStorage = AsyncLocalStorage<WorkStore>\n\nexport { workAsyncStorageInstance as workAsyncStorage }\n", "export const METADATA_BOUNDARY_NAME = '__next_metadata_boundary__'\nexport const VIEWPORT_BOUNDARY_NAME = '__next_viewport_boundary__'\nexport const OUTLET_BOUNDARY_NAME = '__next_outlet_boundary__'\nexport const ROOT_LAYOUT_BOUNDARY_NAME = '__next_root_layout_boundary__'\n", "export type ScheduledFn<T = void> = () => T | PromiseLike<T>\nexport type SchedulerFn<T = void> = (cb: ScheduledFn<T>) => void\n\n/**\n * Schedules a function to be called on the next tick after the other promises\n * have been resolved.\n *\n * @param cb the function to schedule\n */\nexport const scheduleOnNextTick = (cb: ScheduledFn<void>) => {\n  // We use Promise.resolve().then() here so that the operation is scheduled at\n  // the end of the promise job queue, we then add it to the next process tick\n  // to ensure it's evaluated afterwards.\n  //\n  // This was inspired by the implementation of the DataLoader interface: https://github.com/graphql/dataloader/blob/d336bd15282664e0be4b4a657cb796f09bafbc6b/src/index.js#L213-L255\n  //\n  Promise.resolve().then(() => {\n    if (process.env.NEXT_RUNTIME === 'edge') {\n      setTimeout(cb, 0)\n    } else {\n      process.nextTick(cb)\n    }\n  })\n}\n\n/**\n * Schedules a function to be called using `setImmediate` or `setTimeout` if\n * `setImmediate` is not available (like in the Edge runtime).\n *\n * @param cb the function to schedule\n */\nexport const scheduleImmediate = (cb: ScheduledFn<void>): void => {\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    setTimeout(cb, 0)\n  } else {\n    setImmediate(cb)\n  }\n}\n\n/**\n * returns a promise than resolves in a future task. There is no guarantee that the task it resolves in\n * will be the next task but if you await it you can at least be sure that the current task is over and\n * most usefully that the entire microtask queue of the current task has been emptied.\n */\nexport function atLeastOneTask() {\n  return new Promise<void>((resolve) => scheduleImmediate(resolve))\n}\n\n/**\n * This utility function is extracted to make it easier to find places where we are doing\n * specific timing tricks to try to schedule work after React has rendered. This is especially\n * important at the moment because Next.js uses the edge builds of React which use setTimeout to\n * schedule work when you might expect that something like setImmediate would do the trick.\n *\n * Long term we should switch to the node versions of React rendering when possible and then\n * update this to use setImmediate rather than setTimeout\n */\nexport function waitAtLeastOneReactRenderTask(): Promise<void> {\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    return new Promise((r) => setTimeout(r, 0))\n  } else {\n    return new Promise((r) => setImmediate(r))\n  }\n}\n", "export function createPromiseWithResolvers<T>(): PromiseWithResolvers<T> {\n  // Shim of Stage 4 Promise.withResolvers proposal\n  let resolve: (value: T | PromiseLike<T>) => void\n  let reject: (reason: any) => void\n  const promise = new Promise<T>((res, rej) => {\n    resolve = res\n    reject = rej\n  })\n  return { resolve: resolve!, reject: reject!, promise }\n}\n", "import { InvariantError } from '../../shared/lib/invariant-error'\nimport { createPromiseWithResolvers } from '../../shared/lib/promise-with-resolvers'\n\nexport enum RenderStage {\n  Static = 1,\n  Runtime = 2,\n  Dynamic = 3,\n}\n\nexport type NonStaticRenderStage = RenderStage.Runtime | RenderStage.Dynamic\n\nexport class StagedRenderingController {\n  currentStage: RenderStage = RenderStage.Static\n\n  private runtimeStagePromise = createPromiseWithResolvers<void>()\n  private dynamicStagePromise = createPromiseWithResolvers<void>()\n\n  constructor(private abortSignal: AbortSignal | null = null) {\n    if (abortSignal) {\n      abortSignal.addEventListener(\n        'abort',\n        () => {\n          const { reason } = abortSignal\n          if (this.currentStage < RenderStage.Runtime) {\n            this.runtimeStagePromise.promise.catch(ignoreReject) // avoid unhandled rejections\n            this.runtimeStagePromise.reject(reason)\n          }\n          if (this.currentStage < RenderStage.Dynamic) {\n            this.dynamicStagePromise.promise.catch(ignoreReject) // avoid unhandled rejections\n            this.dynamicStagePromise.reject(reason)\n          }\n        },\n        { once: true }\n      )\n    }\n  }\n\n  advanceStage(stage: NonStaticRenderStage) {\n    // If we're already at the target stage or beyond, do nothing.\n    // (this can happen e.g. if sync IO advanced us to the dynamic stage)\n    if (this.currentStage >= stage) {\n      return\n    }\n    this.currentStage = stage\n    // Note that we might be going directly from Static to Dynamic,\n    // so we need to resolve the runtime stage as well.\n    if (stage >= RenderStage.Runtime) {\n      this.runtimeStagePromise.resolve()\n    }\n    if (stage >= RenderStage.Dynamic) {\n      this.dynamicStagePromise.resolve()\n    }\n  }\n\n  private getStagePromise(stage: NonStaticRenderStage): Promise<void> {\n    switch (stage) {\n      case RenderStage.Runtime: {\n        return this.runtimeStagePromise.promise\n      }\n      case RenderStage.Dynamic: {\n        return this.dynamicStagePromise.promise\n      }\n      default: {\n        stage satisfies never\n        throw new InvariantError(`Invalid render stage: ${stage}`)\n      }\n    }\n  }\n\n  waitForStage(stage: NonStaticRenderStage) {\n    return this.getStagePromise(stage)\n  }\n\n  delayUntilStage<T>(\n    stage: NonStaticRenderStage,\n    displayName: string | undefined,\n    resolvedValue: T\n  ) {\n    const ioTriggerPromise = this.getStagePromise(stage)\n\n    const promise = makeDevtoolsIOPromiseFromIOTrigger(\n      ioTriggerPromise,\n      displayName,\n      resolvedValue\n    )\n\n    // Analogously to `makeHangingPromise`, we might reject this promise if the signal is invoked.\n    // (e.g. in the case where we don't want want the render to proceed to the dynamic stage and abort it).\n    // We shouldn't consider this an unhandled rejection, so we attach a noop catch handler here to suppress this warning.\n    if (this.abortSignal) {\n      promise.catch(ignoreReject)\n    }\n    return promise\n  }\n}\n\nfunction ignoreReject() {}\n\n// TODO(restart-on-cache-miss): the layering of `delayUntilStage`,\n// `makeDevtoolsIOPromiseFromIOTrigger` and and `makeDevtoolsIOAwarePromise`\n// is confusing, we should clean it up.\nfunction makeDevtoolsIOPromiseFromIOTrigger<T>(\n  ioTrigger: Promise<any>,\n  displayName: string | undefined,\n  resolvedValue: T\n): Promise<T> {\n  // If we create a `new Promise` and give it a displayName\n  // (with no userspace code above us in the stack)\n  // React Devtools will use it as the IO cause when determining \"suspended by\".\n  // In particular, it should shadow any inner IO that resolved/rejected the promise\n  // (in case of staged rendering, this will be the `setTimeout` that triggers the relevant stage)\n  const promise = new Promise<T>((resolve, reject) => {\n    ioTrigger.then(resolve.bind(null, resolvedValue), reject)\n  })\n  if (displayName !== undefined) {\n    // @ts-expect-error\n    promise.displayName = displayName\n  }\n  return promise\n}\n", "/**\n * The functions provided by this module are used to communicate certain properties\n * about the currently running code so that Next.js can make decisions on how to handle\n * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.\n *\n * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.\n * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts\n * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of\n * Dynamic indications.\n *\n * The first is simply an intention to be dynamic. unstable_noStore is an example of this where\n * the currently executing code simply declares that the current scope is dynamic but if you use it\n * inside unstable_cache it can still be cached. This type of indication can be removed if we ever\n * make the default dynamic to begin with because the only way you would ever be static is inside\n * a cache scope which this indication does not affect.\n *\n * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic\n * because it means that it is inappropriate to cache this at all. using a dynamic data source inside\n * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should\n * read that data outside the cache and pass it in as an argument to the cached function.\n */\n\nimport type { WorkStore } from '../app-render/work-async-storage.external'\nimport type {\n  WorkUnitStore,\n  RequestStore,\n  PrerenderStoreLegacy,\n  PrerenderStoreModern,\n  PrerenderStoreModernRuntime,\n} from '../app-render/work-unit-async-storage.external'\n\n// Once postpone is in stable we should switch to importing the postpone export directly\nimport React from 'react'\n\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout'\nimport {\n  getRuntimeStagePromise,\n  throwForMissingRequestStore,\n  workUnitAsyncStorage,\n} from './work-unit-async-storage.external'\nimport { workAsyncStorage } from '../app-render/work-async-storage.external'\nimport { makeHangingPromise } from '../dynamic-rendering-utils'\nimport {\n  METADATA_BOUNDARY_NAME,\n  VIEWPORT_BOUNDARY_NAME,\n  OUTLET_BOUNDARY_NAME,\n  ROOT_LAYOUT_BOUNDARY_NAME,\n} from '../../lib/framework/boundary-constants'\nimport { scheduleOnNextTick } from '../../lib/scheduler'\nimport { BailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { InvariantError } from '../../shared/lib/invariant-error'\nimport { RenderStage } from './staged-rendering'\n\nconst hasPostpone = typeof React.unstable_postpone === 'function'\n\nexport type DynamicAccess = {\n  /**\n   * If debugging, this will contain the stack trace of where the dynamic access\n   * occurred. This is used to provide more information to the user about why\n   * their page is being rendered dynamically.\n   */\n  stack?: string\n\n  /**\n   * The expression that was accessed dynamically.\n   */\n  expression: string\n}\n\n// Stores dynamic reasons used during an RSC render.\nexport type DynamicTrackingState = {\n  /**\n   * When true, stack information will also be tracked during dynamic access.\n   */\n  readonly isDebugDynamicAccesses: boolean | undefined\n\n  /**\n   * The dynamic accesses that occurred during the render.\n   */\n  readonly dynamicAccesses: Array<DynamicAccess>\n\n  syncDynamicErrorWithStack: null | Error\n}\n\n// Stores dynamic reasons used during an SSR render.\nexport type DynamicValidationState = {\n  hasSuspenseAboveBody: boolean\n  hasDynamicMetadata: boolean\n  hasDynamicViewport: boolean\n  hasAllowedDynamic: boolean\n  dynamicErrors: Array<Error>\n}\n\nexport function createDynamicTrackingState(\n  isDebugDynamicAccesses: boolean | undefined\n): DynamicTrackingState {\n  return {\n    isDebugDynamicAccesses,\n    dynamicAccesses: [],\n    syncDynamicErrorWithStack: null,\n  }\n}\n\nexport function createDynamicValidationState(): DynamicValidationState {\n  return {\n    hasSuspenseAboveBody: false,\n    hasDynamicMetadata: false,\n    hasDynamicViewport: false,\n    hasAllowedDynamic: false,\n    dynamicErrors: [],\n  }\n}\n\nexport function getFirstDynamicReason(\n  trackingState: DynamicTrackingState\n): undefined | string {\n  return trackingState.dynamicAccesses[0]?.expression\n}\n\n/**\n * This function communicates that the current scope should be treated as dynamic.\n *\n * In most cases this function is a no-op but if called during\n * a PPR prerender it will postpone the current sub-tree and calling\n * it during a normal prerender will cause the entire prerender to abort\n */\nexport function markCurrentScopeAsDynamic(\n  store: WorkStore,\n  workUnitStore: undefined | Exclude<WorkUnitStore, PrerenderStoreModern>,\n  expression: string\n): void {\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'cache':\n      case 'unstable-cache':\n        // Inside cache scopes, marking a scope as dynamic has no effect,\n        // because the outer cache scope creates a cache boundary. This is\n        // subtly different from reading a dynamic data source, which is\n        // forbidden inside a cache scope.\n        return\n      case 'private-cache':\n        // A private cache scope is already dynamic by definition.\n        return\n      case 'prerender-legacy':\n      case 'prerender-ppr':\n      case 'request':\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n\n  // If we're forcing dynamic rendering or we're forcing static rendering, we\n  // don't need to do anything here because the entire page is already dynamic\n  // or it's static and it should not throw or postpone here.\n  if (store.forceDynamic || store.forceStatic) return\n\n  if (store.dynamicShouldError) {\n    throw new StaticGenBailoutError(\n      `Route ${store.route} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n    )\n  }\n\n  if (workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'prerender-ppr':\n        return postponeWithTracking(\n          store.route,\n          expression,\n          workUnitStore.dynamicTracking\n        )\n      case 'prerender-legacy':\n        workUnitStore.revalidate = 0\n\n        // We aren't prerendering, but we are generating a static page. We need\n        // to bail out of static generation.\n        const err = new DynamicServerError(\n          `Route ${store.route} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n        )\n        store.dynamicUsageDescription = expression\n        store.dynamicUsageStack = err.stack\n\n        throw err\n      case 'request':\n        if (process.env.NODE_ENV !== 'production') {\n          workUnitStore.usedDynamic = true\n        }\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n}\n\n/**\n * This function is meant to be used when prerendering without cacheComponents or PPR.\n * When called during a build it will cause Next.js to consider the route as dynamic.\n *\n * @internal\n */\nexport function throwToInterruptStaticGeneration(\n  expression: string,\n  store: WorkStore,\n  prerenderStore: PrerenderStoreLegacy\n): never {\n  // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n  const err = new DynamicServerError(\n    `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n  )\n\n  prerenderStore.revalidate = 0\n\n  store.dynamicUsageDescription = expression\n  store.dynamicUsageStack = err.stack\n\n  throw err\n}\n\n/**\n * This function should be used to track whether something dynamic happened even when\n * we are in a dynamic render. This is useful for Dev where all renders are dynamic but\n * we still track whether dynamic APIs were accessed for helpful messaging\n *\n * @internal\n */\nexport function trackDynamicDataInDynamicRender(workUnitStore: WorkUnitStore) {\n  switch (workUnitStore.type) {\n    case 'cache':\n    case 'unstable-cache':\n      // Inside cache scopes, marking a scope as dynamic has no effect,\n      // because the outer cache scope creates a cache boundary. This is\n      // subtly different from reading a dynamic data source, which is\n      // forbidden inside a cache scope.\n      return\n    case 'private-cache':\n      // A private cache scope is already dynamic by definition.\n      return\n    case 'prerender':\n    case 'prerender-runtime':\n    case 'prerender-legacy':\n    case 'prerender-ppr':\n    case 'prerender-client':\n      break\n    case 'request':\n      if (process.env.NODE_ENV !== 'production') {\n        workUnitStore.usedDynamic = true\n      }\n      break\n    default:\n      workUnitStore satisfies never\n  }\n}\n\nfunction abortOnSynchronousDynamicDataAccess(\n  route: string,\n  expression: string,\n  prerenderStore: PrerenderStoreModern\n): void {\n  const reason = `Route ${route} needs to bail out of prerendering at this point because it used ${expression}.`\n\n  const error = createPrerenderInterruptedError(reason)\n\n  prerenderStore.controller.abort(error)\n\n  const dynamicTracking = prerenderStore.dynamicTracking\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      // When we aren't debugging, we don't need to create another error for the\n      // stack trace.\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n}\n\nexport function abortOnSynchronousPlatformIOAccess(\n  route: string,\n  expression: string,\n  errorWithStack: Error,\n  prerenderStore: PrerenderStoreModern\n): void {\n  const dynamicTracking = prerenderStore.dynamicTracking\n  abortOnSynchronousDynamicDataAccess(route, expression, prerenderStore)\n  // It is important that we set this tracking value after aborting. Aborts are executed\n  // synchronously except for the case where you abort during render itself. By setting this\n  // value late we can use it to determine if any of the aborted tasks are the task that\n  // called the sync IO expression in the first place.\n  if (dynamicTracking) {\n    if (dynamicTracking.syncDynamicErrorWithStack === null) {\n      dynamicTracking.syncDynamicErrorWithStack = errorWithStack\n    }\n  }\n}\n\nexport function trackSynchronousPlatformIOAccessInDev(\n  requestStore: RequestStore\n): void {\n  // We don't actually have a controller to abort but we do the semantic equivalent by\n  // advancing the request store out of the prerender stage\n  if (requestStore.stagedRendering) {\n    // TODO: error for sync IO in the runtime stage\n    // (which is not currently covered by the validation render in `spawnDynamicValidationInDev`)\n    requestStore.stagedRendering.advanceStage(RenderStage.Dynamic)\n  }\n}\n\n/**\n * use this function when prerendering with cacheComponents. If we are doing a\n * prospective prerender we don't actually abort because we want to discover\n * all caches for the shell. If this is the actual prerender we do abort.\n *\n * This function accepts a prerenderStore but the caller should ensure we're\n * actually running in cacheComponents mode.\n *\n * @internal\n */\nexport function abortAndThrowOnSynchronousRequestDataAccess(\n  route: string,\n  expression: string,\n  errorWithStack: Error,\n  prerenderStore: PrerenderStoreModern\n): never {\n  const prerenderSignal = prerenderStore.controller.signal\n  if (prerenderSignal.aborted === false) {\n    // TODO it would be better to move this aborted check into the callsite so we can avoid making\n    // the error object when it isn't relevant to the aborting of the prerender however\n    // since we need the throw semantics regardless of whether we abort it is easier to land\n    // this way. See how this was handled with `abortOnSynchronousPlatformIOAccess` for a closer\n    // to ideal implementation\n    abortOnSynchronousDynamicDataAccess(route, expression, prerenderStore)\n    // It is important that we set this tracking value after aborting. Aborts are executed\n    // synchronously except for the case where you abort during render itself. By setting this\n    // value late we can use it to determine if any of the aborted tasks are the task that\n    // called the sync IO expression in the first place.\n    const dynamicTracking = prerenderStore.dynamicTracking\n    if (dynamicTracking) {\n      if (dynamicTracking.syncDynamicErrorWithStack === null) {\n        dynamicTracking.syncDynamicErrorWithStack = errorWithStack\n      }\n    }\n  }\n  throw createPrerenderInterruptedError(\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}.`\n  )\n}\n\n/**\n * This component will call `React.postpone` that throws the postponed error.\n */\ntype PostponeProps = {\n  reason: string\n  route: string\n}\nexport function Postpone({ reason, route }: PostponeProps): never {\n  const prerenderStore = workUnitAsyncStorage.getStore()\n  const dynamicTracking =\n    prerenderStore && prerenderStore.type === 'prerender-ppr'\n      ? prerenderStore.dynamicTracking\n      : null\n  postponeWithTracking(route, reason, dynamicTracking)\n}\n\nexport function postponeWithTracking(\n  route: string,\n  expression: string,\n  dynamicTracking: null | DynamicTrackingState\n): never {\n  assertPostpone()\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      // When we aren't debugging, we don't need to create another error for the\n      // stack trace.\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n\n  React.unstable_postpone(createPostponeReason(route, expression))\n}\n\nfunction createPostponeReason(route: string, expression: string) {\n  return (\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}. ` +\n    `React throws this special object to indicate where. It should not be caught by ` +\n    `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`\n  )\n}\n\nexport function isDynamicPostpone(err: unknown) {\n  if (\n    typeof err === 'object' &&\n    err !== null &&\n    typeof (err as any).message === 'string'\n  ) {\n    return isDynamicPostponeReason((err as any).message)\n  }\n  return false\n}\n\nfunction isDynamicPostponeReason(reason: string) {\n  return (\n    reason.includes(\n      'needs to bail out of prerendering at this point because it used'\n    ) &&\n    reason.includes(\n      'Learn more: https://nextjs.org/docs/messages/ppr-caught-error'\n    )\n  )\n}\n\nif (isDynamicPostponeReason(createPostponeReason('%%%', '^^^')) === false) {\n  throw new Error(\n    'Invariant: isDynamicPostpone misidentified a postpone reason. This is a bug in Next.js'\n  )\n}\n\nconst NEXT_PRERENDER_INTERRUPTED = 'NEXT_PRERENDER_INTERRUPTED'\n\nfunction createPrerenderInterruptedError(message: string): Error {\n  const error = new Error(message)\n  ;(error as any).digest = NEXT_PRERENDER_INTERRUPTED\n  return error\n}\n\ntype DigestError = Error & {\n  digest: string\n}\n\nexport function isPrerenderInterruptedError(\n  error: unknown\n): error is DigestError {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    (error as any).digest === NEXT_PRERENDER_INTERRUPTED &&\n    'name' in error &&\n    'message' in error &&\n    error instanceof Error\n  )\n}\n\nexport function accessedDynamicData(\n  dynamicAccesses: Array<DynamicAccess>\n): boolean {\n  return dynamicAccesses.length > 0\n}\n\nexport function consumeDynamicAccess(\n  serverDynamic: DynamicTrackingState,\n  clientDynamic: DynamicTrackingState\n): DynamicTrackingState['dynamicAccesses'] {\n  // We mutate because we only call this once we are no longer writing\n  // to the dynamicTrackingState and it's more efficient than creating a new\n  // array.\n  serverDynamic.dynamicAccesses.push(...clientDynamic.dynamicAccesses)\n  return serverDynamic.dynamicAccesses\n}\n\nexport function formatDynamicAPIAccesses(\n  dynamicAccesses: Array<DynamicAccess>\n): string[] {\n  return dynamicAccesses\n    .filter(\n      (access): access is Required<DynamicAccess> =>\n        typeof access.stack === 'string' && access.stack.length > 0\n    )\n    .map(({ expression, stack }) => {\n      stack = stack\n        .split('\\n')\n        // Remove the \"Error: \" prefix from the first line of the stack trace as\n        // well as the first 4 lines of the stack trace which is the distance\n        // from the user code and the `new Error().stack` call.\n        .slice(4)\n        .filter((line) => {\n          // Exclude Next.js internals from the stack trace.\n          if (line.includes('node_modules/next/')) {\n            return false\n          }\n\n          // Exclude anonymous functions from the stack trace.\n          if (line.includes(' (<anonymous>)')) {\n            return false\n          }\n\n          // Exclude Node.js internals from the stack trace.\n          if (line.includes(' (node:')) {\n            return false\n          }\n\n          return true\n        })\n        .join('\\n')\n      return `Dynamic API Usage Debug - ${expression}:\\n${stack}`\n    })\n}\n\nfunction assertPostpone() {\n  if (!hasPostpone) {\n    throw new Error(\n      `Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`\n    )\n  }\n}\n\n/**\n * This is a bit of a hack to allow us to abort a render using a Postpone instance instead of an Error which changes React's\n * abort semantics slightly.\n */\nexport function createRenderInBrowserAbortSignal(): AbortSignal {\n  const controller = new AbortController()\n  controller.abort(new BailoutToCSRError('Render in Browser'))\n  return controller.signal\n}\n\n/**\n * In a prerender, we may end up with hanging Promises as inputs due them\n * stalling on connection() or because they're loading dynamic data. In that\n * case we need to abort the encoding of arguments since they'll never complete.\n */\nexport function createHangingInputAbortSignal(\n  workUnitStore: WorkUnitStore\n): AbortSignal | undefined {\n  switch (workUnitStore.type) {\n    case 'prerender':\n    case 'prerender-runtime':\n      const controller = new AbortController()\n\n      if (workUnitStore.cacheSignal) {\n        // If we have a cacheSignal it means we're in a prospective render. If\n        // the input we're waiting on is coming from another cache, we do want\n        // to wait for it so that we can resolve this cache entry too.\n        workUnitStore.cacheSignal.inputReady().then(() => {\n          controller.abort()\n        })\n      } else {\n        // Otherwise we're in the final render and we should already have all\n        // our caches filled.\n        // If the prerender uses stages, we have wait until the runtime stage,\n        // at which point all runtime inputs will be resolved.\n        // (otherwise, a runtime prerender might consider `cookies()` hanging\n        //  even though they'd resolve in the next task.)\n        //\n        // We might still be waiting on some microtasks so we\n        // wait one tick before giving up. When we give up, we still want to\n        // render the content of this cache as deeply as we can so that we can\n        // suspend as deeply as possible in the tree or not at all if we don't\n        // end up waiting for the input.\n        const runtimeStagePromise = getRuntimeStagePromise(workUnitStore)\n        if (runtimeStagePromise) {\n          runtimeStagePromise.then(() =>\n            scheduleOnNextTick(() => controller.abort())\n          )\n        } else {\n          scheduleOnNextTick(() => controller.abort())\n        }\n      }\n\n      return controller.signal\n    case 'prerender-client':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'request':\n    case 'cache':\n    case 'private-cache':\n    case 'unstable-cache':\n      return undefined\n    default:\n      workUnitStore satisfies never\n  }\n}\n\nexport function annotateDynamicAccess(\n  expression: string,\n  prerenderStore: PrerenderStoreModern\n) {\n  const dynamicTracking = prerenderStore.dynamicTracking\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n}\n\nexport function useDynamicRouteParams(expression: string) {\n  const workStore = workAsyncStorage.getStore()\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workStore && workUnitStore) {\n    switch (workUnitStore.type) {\n      case 'prerender-client':\n      case 'prerender': {\n        const fallbackParams = workUnitStore.fallbackRouteParams\n\n        if (fallbackParams && fallbackParams.size > 0) {\n          // We are in a prerender with cacheComponents semantics. We are going to\n          // hang here and never resolve. This will cause the currently\n          // rendering component to effectively be a dynamic hole.\n          React.use(\n            makeHangingPromise(\n              workUnitStore.renderSignal,\n              workStore.route,\n              expression\n            )\n          )\n        }\n        break\n      }\n      case 'prerender-ppr': {\n        const fallbackParams = workUnitStore.fallbackRouteParams\n        if (fallbackParams && fallbackParams.size > 0) {\n          return postponeWithTracking(\n            workStore.route,\n            expression,\n            workUnitStore.dynamicTracking\n          )\n        }\n        break\n      }\n      case 'prerender-runtime':\n        throw new InvariantError(\n          `\\`${expression}\\` was called during a runtime prerender. Next.js should be preventing ${expression} from being included in server components statically, but did not in this case.`\n        )\n      case 'cache':\n      case 'private-cache':\n        throw new InvariantError(\n          `\\`${expression}\\` was called inside a cache scope. Next.js should be preventing ${expression} from being included in server components statically, but did not in this case.`\n        )\n      case 'prerender-legacy':\n      case 'request':\n      case 'unstable-cache':\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n}\n\nexport function useDynamicSearchParams(expression: string) {\n  const workStore = workAsyncStorage.getStore()\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  if (!workStore) {\n    // We assume pages router context and just return\n    return\n  }\n\n  if (!workUnitStore) {\n    throwForMissingRequestStore(expression)\n  }\n\n  switch (workUnitStore.type) {\n    case 'prerender-client': {\n      React.use(\n        makeHangingPromise(\n          workUnitStore.renderSignal,\n          workStore.route,\n          expression\n        )\n      )\n      break\n    }\n    case 'prerender-legacy':\n    case 'prerender-ppr': {\n      if (workStore.forceStatic) {\n        return\n      }\n      throw new BailoutToCSRError(expression)\n    }\n    case 'prerender':\n    case 'prerender-runtime':\n      throw new InvariantError(\n        `\\`${expression}\\` was called from a Server Component. Next.js should be preventing ${expression} from being included in server components statically, but did not in this case.`\n      )\n    case 'cache':\n    case 'unstable-cache':\n    case 'private-cache':\n      throw new InvariantError(\n        `\\`${expression}\\` was called inside a cache scope. Next.js should be preventing ${expression} from being included in server components statically, but did not in this case.`\n      )\n    case 'request':\n      return\n    default:\n      workUnitStore satisfies never\n  }\n}\n\nconst hasSuspenseRegex = /\\n\\s+at Suspense \\(<anonymous>\\)/\n\n// Common implicit body tags that React will treat as body when placed directly in html\nconst bodyAndImplicitTags =\n  'body|div|main|section|article|aside|header|footer|nav|form|p|span|h1|h2|h3|h4|h5|h6'\n\n// Detects when RootLayoutBoundary (our framework marker component) appears\n// after Suspense in the component stack, indicating the root layout is wrapped\n// within a Suspense boundary. Ensures no body/html/implicit-body components are in between.\n//\n// Example matches:\n//   at Suspense (<anonymous>)\n//   at __next_root_layout_boundary__ (<anonymous>)\n//\n// Or with other components in between (but not body/html/implicit-body):\n//   at Suspense (<anonymous>)\n//   at SomeComponent (<anonymous>)\n//   at __next_root_layout_boundary__ (<anonymous>)\nconst hasSuspenseBeforeRootLayoutWithoutBodyOrImplicitBodyRegex = new RegExp(\n  `\\\\n\\\\s+at Suspense \\\\(<anonymous>\\\\)(?:(?!\\\\n\\\\s+at (?:${bodyAndImplicitTags}) \\\\(<anonymous>\\\\))[\\\\s\\\\S])*?\\\\n\\\\s+at ${ROOT_LAYOUT_BOUNDARY_NAME} \\\\([^\\\\n]*\\\\)`\n)\n\nconst hasMetadataRegex = new RegExp(\n  `\\\\n\\\\s+at ${METADATA_BOUNDARY_NAME}[\\\\n\\\\s]`\n)\nconst hasViewportRegex = new RegExp(\n  `\\\\n\\\\s+at ${VIEWPORT_BOUNDARY_NAME}[\\\\n\\\\s]`\n)\nconst hasOutletRegex = new RegExp(`\\\\n\\\\s+at ${OUTLET_BOUNDARY_NAME}[\\\\n\\\\s]`)\n\nexport function trackAllowedDynamicAccess(\n  workStore: WorkStore,\n  componentStack: string,\n  dynamicValidation: DynamicValidationState,\n  clientDynamic: DynamicTrackingState\n) {\n  if (hasOutletRegex.test(componentStack)) {\n    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.\n    return\n  } else if (hasMetadataRegex.test(componentStack)) {\n    dynamicValidation.hasDynamicMetadata = true\n    return\n  } else if (hasViewportRegex.test(componentStack)) {\n    dynamicValidation.hasDynamicViewport = true\n    return\n  } else if (\n    hasSuspenseBeforeRootLayoutWithoutBodyOrImplicitBodyRegex.test(\n      componentStack\n    )\n  ) {\n    // For Suspense within body, the prelude wouldn't be empty so it wouldn't violate the empty static shells rule.\n    // But if you have Suspense above body, the prelude is empty but we allow that because having Suspense\n    // is an explicit signal from the user that they acknowledge the empty shell and want dynamic rendering.\n    dynamicValidation.hasAllowedDynamic = true\n    dynamicValidation.hasSuspenseAboveBody = true\n    return\n  } else if (hasSuspenseRegex.test(componentStack)) {\n    // this error had a Suspense boundary above it so we don't need to report it as a source\n    // of disallowed\n    dynamicValidation.hasAllowedDynamic = true\n    return\n  } else if (clientDynamic.syncDynamicErrorWithStack) {\n    // This task was the task that called the sync error.\n    dynamicValidation.dynamicErrors.push(\n      clientDynamic.syncDynamicErrorWithStack\n    )\n    return\n  } else {\n    const message =\n      `Route \"${workStore.route}\": Uncached data was accessed outside of ` +\n      '<Suspense>. This delays the entire page from rendering, resulting in a ' +\n      'slow user experience. Learn more: ' +\n      'https://nextjs.org/docs/messages/blocking-route'\n    const error = createErrorWithComponentOrOwnerStack(message, componentStack)\n    dynamicValidation.dynamicErrors.push(error)\n    return\n  }\n}\n\n/**\n * In dev mode, we prefer using the owner stack, otherwise the provided\n * component stack is used.\n */\nfunction createErrorWithComponentOrOwnerStack(\n  message: string,\n  componentStack: string\n) {\n  const ownerStack =\n    process.env.NODE_ENV !== 'production' && React.captureOwnerStack\n      ? React.captureOwnerStack()\n      : null\n\n  const error = new Error(message)\n  error.stack = error.name + ': ' + message + (ownerStack ?? componentStack)\n  return error\n}\n\nexport enum PreludeState {\n  Full = 0,\n  Empty = 1,\n  Errored = 2,\n}\n\nexport function logDisallowedDynamicError(\n  workStore: WorkStore,\n  error: Error\n): void {\n  console.error(error)\n\n  if (!workStore.dev) {\n    if (workStore.hasReadableErrorStacks) {\n      console.error(\n        `To get a more detailed stack trace and pinpoint the issue, start the app in development mode by running \\`next dev\\`, then open \"${workStore.route}\" in your browser to investigate the error.`\n      )\n    } else {\n      console.error(`To get a more detailed stack trace and pinpoint the issue, try one of the following:\n  - Start the app in development mode by running \\`next dev\\`, then open \"${workStore.route}\" in your browser to investigate the error.\n  - Rerun the production build with \\`next build --debug-prerender\\` to generate better stack traces.`)\n    }\n  }\n}\n\nexport function throwIfDisallowedDynamic(\n  workStore: WorkStore,\n  prelude: PreludeState,\n  dynamicValidation: DynamicValidationState,\n  serverDynamic: DynamicTrackingState\n): void {\n  if (serverDynamic.syncDynamicErrorWithStack) {\n    logDisallowedDynamicError(\n      workStore,\n      serverDynamic.syncDynamicErrorWithStack\n    )\n    throw new StaticGenBailoutError()\n  }\n\n  if (prelude !== PreludeState.Full) {\n    if (dynamicValidation.hasSuspenseAboveBody) {\n      // This route has opted into allowing fully dynamic rendering\n      // by including a Suspense boundary above the body. In this case\n      // a lack of a shell is not considered disallowed so we simply return\n      return\n    }\n\n    // We didn't have any sync bailouts but there may be user code which\n    // blocked the root. We would have captured these during the prerender\n    // and can log them here and then terminate the build/validating render\n    const dynamicErrors = dynamicValidation.dynamicErrors\n    if (dynamicErrors.length > 0) {\n      for (let i = 0; i < dynamicErrors.length; i++) {\n        logDisallowedDynamicError(workStore, dynamicErrors[i])\n      }\n\n      throw new StaticGenBailoutError()\n    }\n\n    // If we got this far then the only other thing that could be blocking\n    // the root is dynamic Viewport. If this is dynamic then\n    // you need to opt into that by adding a Suspense boundary above the body\n    // to indicate your are ok with fully dynamic rendering.\n    if (dynamicValidation.hasDynamicViewport) {\n      console.error(\n        `Route \"${workStore.route}\" has a \\`generateViewport\\` that depends on Request data (\\`cookies()\\`, etc...) or uncached external data (\\`fetch(...)\\`, etc...) without explicitly allowing fully dynamic rendering. See more info here: https://nextjs.org/docs/messages/next-prerender-dynamic-viewport`\n      )\n      throw new StaticGenBailoutError()\n    }\n\n    if (prelude === PreludeState.Empty) {\n      // If we ever get this far then we messed up the tracking of invalid dynamic.\n      // We still adhere to the constraint that you must produce a shell but invite the\n      // user to report this as a bug in Next.js.\n      console.error(\n        `Route \"${workStore.route}\" did not produce a static shell and Next.js was unable to determine a reason. This is a bug in Next.js.`\n      )\n      throw new StaticGenBailoutError()\n    }\n  } else {\n    if (\n      dynamicValidation.hasAllowedDynamic === false &&\n      dynamicValidation.hasDynamicMetadata\n    ) {\n      console.error(\n        `Route \"${workStore.route}\" has a \\`generateMetadata\\` that depends on Request data (\\`cookies()\\`, etc...) or uncached external data (\\`fetch(...)\\`, etc...) when the rest of the route does not. See more info here: https://nextjs.org/docs/messages/next-prerender-dynamic-metadata`\n      )\n      throw new StaticGenBailoutError()\n    }\n  }\n}\n\nexport function delayUntilRuntimeStage<T>(\n  prerenderStore: PrerenderStoreModernRuntime,\n  result: Promise<T>\n): Promise<T> {\n  if (prerenderStore.runtimeStagePromise) {\n    return prerenderStore.runtimeStagePromise.then(() => result)\n  }\n  return result\n}\n", "import { isHangingPromiseRejectionError } from '../../server/dynamic-rendering-utils'\nimport { isPostpone } from '../../server/lib/router-utils/is-postpone'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isNextRouterError } from './is-next-router-error'\nimport {\n  isDynamicPostpone,\n  isPrerenderInterruptedError,\n} from '../../server/app-render/dynamic-rendering'\nimport { isDynamicServerError } from './hooks-server-context'\n\nexport function unstable_rethrow(error: unknown): void {\n  if (\n    isNextRouterError(error) ||\n    isBailoutToCSRError(error) ||\n    isDynamicServerError(error) ||\n    isDynamicPostpone(error) ||\n    isPostpone(error) ||\n    isHangingPromiseRejectionError(error) ||\n    isPrerenderInterruptedError(error)\n  ) {\n    throw error\n  }\n\n  if (error instanceof Error && 'cause' in error) {\n    unstable_rethrow(error.cause)\n  }\n}\n", "import { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isNextRouterError } from './is-next-router-error'\n\nexport function unstable_rethrow(error: unknown): void {\n  if (isNextRouterError(error) || isBailoutToCSRError(error)) {\n    throw error\n  }\n\n  if (error instanceof Error && 'cause' in error) {\n    unstable_rethrow(error.cause)\n  }\n}\n", "/**\n * This function should be used to rethrow internal Next.js errors so that they can be handled by the framework.\n * When wrapping an API that uses errors to interrupt control flow, you should use this function before you do any error handling.\n * This function will rethrow the error if it is a Next.js error so it can be handled, otherwise it will do nothing.\n *\n * Read more: [Next.js Docs: `unstable_rethrow`](https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow)\n */\nexport const unstable_rethrow =\n  typeof window === 'undefined'\n    ? (\n        require('./unstable-rethrow.server') as typeof import('./unstable-rethrow.server')\n      ).unstable_rethrow\n    : (\n        require('./unstable-rethrow.browser') as typeof import('./unstable-rethrow.browser')\n      ).unstable_rethrow\n", "import { ReadonlyURLSearchParams } from './readonly-url-search-params'\n\nexport function unstable_isUnrecognizedActionError(): boolean {\n  throw new Error(\n    '`unstable_isUnrecognizedActionError` can only be used on the client.'\n  )\n}\n\nexport { redirect, permanentRedirect } from './redirect'\nexport { RedirectType } from './redirect-error'\nexport { notFound } from './not-found'\nexport { forbidden } from './forbidden'\nexport { unauthorized } from './unauthorized'\nexport { unstable_rethrow } from './unstable-rethrow'\nexport { ReadonlyURLSearchParams }\n", "import type { Params } from '../../server/request/params'\n\nimport React, { useContext, useMemo, use } from 'react'\nimport {\n  AppRouterContext,\n  LayoutRouterContext,\n  type AppRouterInstance,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport {\n  SearchParamsContext,\n  PathnameContext,\n  PathParamsContext,\n  NavigationPromisesContext,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport {\n  computeSelectedLayoutSegment,\n  getSelectedLayoutSegmentPath,\n} from '../../shared/lib/segment'\nimport { ReadonlyURLSearchParams } from './readonly-url-search-params'\n\nconst useDynamicRouteParams =\n  typeof window === 'undefined'\n    ? (\n        require('../../server/app-render/dynamic-rendering') as typeof import('../../server/app-render/dynamic-rendering')\n      ).useDynamicRouteParams\n    : undefined\n\nconst useDynamicSearchParams =\n  typeof window === 'undefined'\n    ? (\n        require('../../server/app-render/dynamic-rendering') as typeof import('../../server/app-render/dynamic-rendering')\n      ).useDynamicSearchParams\n    : undefined\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you *read* the current URL's search parameters.\n *\n * Learn more about [`URLSearchParams` on MDN](https://developer.mozilla.org/docs/Web/API/URLSearchParams)\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useSearchParams } from 'next/navigation'\n *\n * export default function Page() {\n *   const searchParams = useSearchParams()\n *   searchParams.get('foo') // returns 'bar' when ?foo=bar\n *   // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSearchParams`](https://nextjs.org/docs/app/api-reference/functions/use-search-params)\n */\n// Client components API\nexport function useSearchParams(): ReadonlyURLSearchParams {\n  useDynamicSearchParams?.('useSearchParams()')\n\n  const searchParams = useContext(SearchParamsContext)\n\n  // In the case where this is `null`, the compat types added in\n  // `next-env.d.ts` will add a new overload that changes the return type to\n  // include `null`.\n  const readonlySearchParams = useMemo(() => {\n    if (!searchParams) {\n      // When the router is not ready in pages, we won't have the search params\n      // available.\n      return null\n    }\n\n    return new ReadonlyURLSearchParams(searchParams)\n  }, [searchParams]) as ReadonlyURLSearchParams\n\n  // Instrument with Suspense DevTools (dev-only)\n  if (process.env.NODE_ENV !== 'production' && 'use' in React) {\n    const navigationPromises = use(NavigationPromisesContext)\n    if (navigationPromises) {\n      return use(navigationPromises.searchParams)\n    }\n  }\n\n  return readonlySearchParams\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the current URL's pathname.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { usePathname } from 'next/navigation'\n *\n * export default function Page() {\n *  const pathname = usePathname() // returns \"/dashboard\" on /dashboard?foo=bar\n *  // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `usePathname`](https://nextjs.org/docs/app/api-reference/functions/use-pathname)\n */\n// Client components API\nexport function usePathname(): string {\n  useDynamicRouteParams?.('usePathname()')\n\n  // In the case where this is `null`, the compat types added in `next-env.d.ts`\n  // will add a new overload that changes the return type to include `null`.\n  const pathname = useContext(PathnameContext) as string\n\n  // Instrument with Suspense DevTools (dev-only)\n  if (process.env.NODE_ENV !== 'production' && 'use' in React) {\n    const navigationPromises = use(NavigationPromisesContext)\n    if (navigationPromises) {\n      return use(navigationPromises.pathname)\n    }\n  }\n\n  return pathname\n}\n\n// Client components API\nexport {\n  ServerInsertedHTMLContext,\n  useServerInsertedHTML,\n} from '../../shared/lib/server-inserted-html.shared-runtime'\n\n/**\n *\n * This hook allows you to programmatically change routes inside [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components).\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useRouter } from 'next/navigation'\n *\n * export default function Page() {\n *  const router = useRouter()\n *  // ...\n *  router.push('/dashboard') // Navigate to /dashboard\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useRouter`](https://nextjs.org/docs/app/api-reference/functions/use-router)\n */\n// Client components API\nexport function useRouter(): AppRouterInstance {\n  const router = useContext(AppRouterContext)\n  if (router === null) {\n    throw new Error('invariant expected app router to be mounted')\n  }\n\n  return router\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read a route's dynamic params filled in by the current URL.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useParams } from 'next/navigation'\n *\n * export default function Page() {\n *   // on /dashboard/[team] where pathname is /dashboard/nextjs\n *   const { team } = useParams() // team === \"nextjs\"\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useParams`](https://nextjs.org/docs/app/api-reference/functions/use-params)\n */\n// Client components API\nexport function useParams<T extends Params = Params>(): T {\n  useDynamicRouteParams?.('useParams()')\n\n  const params = useContext(PathParamsContext) as T\n\n  // Instrument with Suspense DevTools (dev-only)\n  if (process.env.NODE_ENV !== 'production' && 'use' in React) {\n    const navigationPromises = use(NavigationPromisesContext)\n    if (navigationPromises) {\n      return use(navigationPromises.params) as T\n    }\n  }\n\n  return params\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segments **below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n *\n * import { useSelectedLayoutSegments } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segments = useSelectedLayoutSegments()\n *\n *   return (\n *     <ul>\n *       {segments.map((segment, index) => (\n *         <li key={index}>{segment}</li>\n *       ))}\n *     </ul>\n *   )\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegments`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segments)\n */\n// Client components API\nexport function useSelectedLayoutSegments(\n  parallelRouteKey: string = 'children'\n): string[] {\n  useDynamicRouteParams?.('useSelectedLayoutSegments()')\n\n  const context = useContext(LayoutRouterContext)\n  // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts\n  if (!context) return null\n\n  // Instrument with Suspense DevTools (dev-only)\n  if (process.env.NODE_ENV !== 'production' && 'use' in React) {\n    const navigationPromises = use(NavigationPromisesContext)\n    if (navigationPromises) {\n      const promise =\n        navigationPromises.selectedLayoutSegmentsPromises?.get(parallelRouteKey)\n      if (promise) {\n        // We should always have a promise here, but if we don't, it's not worth erroring over.\n        // We just won't be able to instrument it, but can still provide the value.\n        return use(promise)\n      }\n    }\n  }\n\n  return getSelectedLayoutSegmentPath(context.parentTree, parallelRouteKey)\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segment **one level below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n * import { useSelectedLayoutSegment } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segment = useSelectedLayoutSegment()\n *\n *   return <p>Active segment: {segment}</p>\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegment`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segment)\n */\n// Client components API\nexport function useSelectedLayoutSegment(\n  parallelRouteKey: string = 'children'\n): string | null {\n  useDynamicRouteParams?.('useSelectedLayoutSegment()')\n  const navigationPromises = useContext(NavigationPromisesContext)\n  const selectedLayoutSegments = useSelectedLayoutSegments(parallelRouteKey)\n\n  // Instrument with Suspense DevTools (dev-only)\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    navigationPromises &&\n    'use' in React\n  ) {\n    const promise =\n      navigationPromises.selectedLayoutSegmentPromises?.get(parallelRouteKey)\n    if (promise) {\n      // We should always have a promise here, but if we don't, it's not worth erroring over.\n      // We just won't be able to instrument it, but can still provide the value.\n      return use(promise)\n    }\n  }\n\n  return computeSelectedLayoutSegment(selectedLayoutSegments, parallelRouteKey)\n}\n\nexport { unstable_isUnrecognizedActionError } from './unrecognized-action-error'\n\n// Shared components APIs\nexport {\n  notFound,\n  forbidden,\n  unauthorized,\n  redirect,\n  permanentRedirect,\n  RedirectType,\n  ReadonlyURLSearchParams,\n  unstable_rethrow,\n} from './navigation.react-server'\n", "module.exports = require('./dist/client/components/navigation')\n"],
  "mappings": "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",
  "names": ["AppRouterContext", "GlobalLayoutRouterContext", "LayoutRouterContext", "MissingSlotContext", "TemplateContext", "React", "createContext", "process", "displayName", "Set", "NavigationPromisesContext", "PathParamsContext", "PathnameContext", "SearchParamsContext", "createDevToolsInstrumentedPromise", "createContext", "displayName", "value", "promise", "Promise", "resolve", "status", "process", "ReadonlyURLSearchParams", "ReadonlyURLSearchParamsError", "Error", "constructor", "URLSearchParams", "append", "delete", "set", "sort", "ServerInsertedHTMLContext", "useServerInsertedHTML", "React", "createContext", "callback", "addInsertedServerHTMLCallback", "useContext", "UnrecognizedActionError", "unstable_isUnrecognizedActionError", "Error", "constructor", "args", "name", "error", "RedirectStatusCode", "REDIRECT_ERROR_CODE", "RedirectType", "isRedirectError", "error", "digest", "split", "errorCode", "type", "destination", "slice", "join", "status", "at", "statusCode", "Number", "isNaN", "RedirectStatusCode", "bindSnapshot", "createAsyncLocalStorage", "createSnapshot", "sharedAsyncLocalStorageNotAvailableError", "Error", "FakeAsyncLocalStorage", "disable", "getStore", "undefined", "run", "exit", "enterWith", "bind", "fn", "maybeGlobalAsyncLocalStorage", "globalThis", "AsyncLocalStorage", "snapshot", "args", "actionAsyncStorageInstance", "createAsyncLocalStorage", "actionAsyncStorage", "actionAsyncStorageInstance", "getRedirectError", "getRedirectStatusCodeFromError", "getRedirectTypeFromError", "getURLFromRedirectError", "permanentRedirect", "redirect", "actionAsyncStorage", "window", "require", "undefined", "url", "type", "statusCode", "RedirectStatusCode", "TemporaryRedirect", "error", "Error", "REDIRECT_ERROR_CODE", "digest", "getStore", "isAction", "RedirectType", "push", "replace", "PermanentRedirect", "isRedirectError", "split", "slice", "join", "Number", "at", "HTTPAccessErrorStatus", "HTTP_ERROR_FALLBACK_ERROR_CODE", "getAccessFallbackErrorTypeByStatus", "getAccessFallbackHTTPStatus", "isHTTPAccessFallbackError", "NOT_FOUND", "FORBIDDEN", "UNAUTHORIZED", "ALLOWED_CODES", "Set", "Object", "values", "error", "digest", "prefix", "httpStatus", "split", "has", "Number", "status", "notFound", "DIGEST", "HTTP_ERROR_FALLBACK_ERROR_CODE", "error", "Error", "digest", "forbidden", "DIGEST", "HTTP_ERROR_FALLBACK_ERROR_CODE", "process", "env", "__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS", "Error", "error", "digest", "unauthorized", "DIGEST", "HTTP_ERROR_FALLBACK_ERROR_CODE", "process", "env", "__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS", "Error", "error", "digest", "isHangingPromiseRejectionError", "makeDevtoolsIOAwarePromise", "makeHangingPromise", "err", "digest", "HANGING_PROMISE_REJECTION", "HangingPromiseRejectionError", "Error", "constructor", "route", "expression", "abortListenersBySignal", "WeakMap", "signal", "aborted", "Promise", "reject", "hangingPromise", "_", "boundRejection", "bind", "currentListeners", "get", "push", "listeners", "set", "addEventListener", "i", "length", "once", "catch", "ignoreReject", "underlying", "requestStore", "stage", "stagedRendering", "delayUntilStage", "undefined", "resolve", "setTimeout", "isPostpone", "REACT_POSTPONE_TYPE", "Symbol", "for", "error", "$$typeof", "BailoutToCSRError", "isBailoutToCSRError", "BAILOUT_TO_CSR", "Error", "constructor", "reason", "digest", "err", "isNextRouterError", "error", "isRedirectError", "isHTTPAccessFallbackError", "DynamicServerError", "isDynamicServerError", "DYNAMIC_ERROR_CODE", "Error", "constructor", "description", "digest", "err", "StaticGenBailoutError", "isStaticGenBailoutError", "NEXT_STATIC_GEN_BAILOUT", "Error", "code", "error", "workUnitAsyncStorageInstance", "createAsyncLocalStorage", "ACTION_HEADER", "FLIGHT_HEADERS", "NEXT_ACTION_NOT_FOUND_HEADER", "NEXT_DID_POSTPONE_HEADER", "NEXT_HMR_REFRESH_HASH_COOKIE", "NEXT_HMR_REFRESH_HEADER", "NEXT_HTML_REQUEST_ID_HEADER", "NEXT_IS_PRERENDER_HEADER", "NEXT_REQUEST_ID_HEADER", "NEXT_REWRITTEN_PATH_HEADER", "NEXT_REWRITTEN_QUERY_HEADER", "NEXT_ROUTER_PREFETCH_HEADER", "NEXT_ROUTER_SEGMENT_PREFETCH_HEADER", "NEXT_ROUTER_STALE_TIME_HEADER", "NEXT_ROUTER_STATE_TREE_HEADER", "NEXT_RSC_UNION_QUERY", "NEXT_URL", "RSC_CONTENT_TYPE_HEADER", "RSC_HEADER", "getCacheSignal", "getDraftModeProviderForCacheScope", "getHmrRefreshHash", "getPrerenderResumeDataCache", "getRenderResumeDataCache", "getRuntimeStagePromise", "getServerComponentsHmrCache", "isHmrRefresh", "throwForMissingRequestStore", "throwInvariantForMissingStore", "workUnitAsyncStorage", "workUnitAsyncStorageInstance", "callingExpression", "Error", "InvariantError", "workUnitStore", "type", "prerenderResumeDataCache", "renderResumeDataCache", "workStore", "dev", "hmrRefreshHash", "cookies", "get", "NEXT_HMR_REFRESH_HASH_COOKIE", "value", "undefined", "serverComponentsHmrCache", "isDraftMode", "draftMode", "cacheSignal", "runtimeStagePromise", "workAsyncStorageInstance", "createAsyncLocalStorage", "workAsyncStorage", "workAsyncStorageInstance", "METADATA_BOUNDARY_NAME", "OUTLET_BOUNDARY_NAME", "ROOT_LAYOUT_BOUNDARY_NAME", "VIEWPORT_BOUNDARY_NAME", "atLeastOneTask", "scheduleImmediate", "scheduleOnNextTick", "waitAtLeastOneReactRenderTask", "cb", "Promise", "resolve", "then", "process", "env", "NEXT_RUNTIME", "setTimeout", "nextTick", "setImmediate", "r", "createPromiseWithResolvers", "resolve", "reject", "promise", "Promise", "res", "rej", "RenderStage", "StagedRenderingController", "constructor", "abortSignal", "currentStage", "runtimeStagePromise", "createPromiseWithResolvers", "dynamicStagePromise", "addEventListener", "reason", "promise", "catch", "ignoreReject", "reject", "once", "advanceStage", "stage", "resolve", "getStagePromise", "InvariantError", "waitForStage", "delayUntilStage", "displayName", "resolvedValue", "ioTriggerPromise", "makeDevtoolsIOPromiseFromIOTrigger", "ioTrigger", "Promise", "then", "bind", "undefined", "Postpone", "PreludeState", "abortAndThrowOnSynchronousRequestDataAccess", "abortOnSynchronousPlatformIOAccess", "accessedDynamicData", "annotateDynamicAccess", "consumeDynamicAccess", "createDynamicTrackingState", "createDynamicValidationState", "createHangingInputAbortSignal", "createRenderInBrowserAbortSignal", "delayUntilRuntimeStage", "formatDynamicAPIAccesses", "getFirstDynamicReason", "isDynamicPostpone", "isPrerenderInterruptedError", "logDisallowedDynamicError", "markCurrentScopeAsDynamic", "postponeWithTracking", "throwIfDisallowedDynamic", "throwToInterruptStaticGeneration", "trackAllowedDynamicAccess", "trackDynamicDataInDynamicRender", "trackSynchronousPlatformIOAccessInDev", "useDynamicRouteParams", "useDynamicSearchParams", "hasPostpone", "React", "unstable_postpone", "isDebugDynamicAccesses", "dynamicAccesses", "syncDynamicErrorWithStack", "hasSuspenseAboveBody", "hasDynamicMetadata", "hasDynamicViewport", "hasAllowedDynamic", "dynamicErrors", "trackingState", "expression", "store", "workUnitStore", "type", "forceDynamic", "forceStatic", "dynamicShouldError", "StaticGenBailoutError", "route", "dynamicTracking", "revalidate", "err", "DynamicServerError", "dynamicUsageDescription", "dynamicUsageStack", "stack", "process", "usedDynamic", "prerenderStore", "abortOnSynchronousDynamicDataAccess", "reason", "error", "createPrerenderInterruptedError", "controller", "abort", "push", "Error", "undefined", "errorWithStack", "requestStore", "stagedRendering", "advanceStage", "RenderStage", "Dynamic", "prerenderSignal", "signal", "aborted", "workUnitAsyncStorage", "getStore", "assertPostpone", "createPostponeReason", "message", "isDynamicPostponeReason", "includes", "NEXT_PRERENDER_INTERRUPTED", "digest", "length", "serverDynamic", "clientDynamic", "filter", "access", "map", "split", "slice", "line", "join", "AbortController", "BailoutToCSRError", "cacheSignal", "inputReady", "then", "runtimeStagePromise", "getRuntimeStagePromise", "scheduleOnNextTick", "workStore", "workAsyncStorage", "fallbackParams", "fallbackRouteParams", "size", "use", "makeHangingPromise", "renderSignal", "InvariantError", "throwForMissingRequestStore", "hasSuspenseRegex", "bodyAndImplicitTags", "hasSuspenseBeforeRootLayoutWithoutBodyOrImplicitBodyRegex", "RegExp", "ROOT_LAYOUT_BOUNDARY_NAME", "hasMetadataRegex", "METADATA_BOUNDARY_NAME", "hasViewportRegex", "VIEWPORT_BOUNDARY_NAME", "hasOutletRegex", "OUTLET_BOUNDARY_NAME", "componentStack", "dynamicValidation", "test", "createErrorWithComponentOrOwnerStack", "ownerStack", "captureOwnerStack", "name", "console", "dev", "hasReadableErrorStacks", "prelude", "i", "result", "unstable_rethrow", "error", "isNextRouterError", "isBailoutToCSRError", "isDynamicServerError", "isDynamicPostpone", "isPostpone", "isHangingPromiseRejectionError", "isPrerenderInterruptedError", "Error", "cause", "unstable_rethrow", "error", "isNextRouterError", "isBailoutToCSRError", "Error", "cause", "unstable_rethrow", "window", "require", "ReadonlyURLSearchParams", "RedirectType", "forbidden", "notFound", "permanentRedirect", "redirect", "unauthorized", "unstable_isUnrecognizedActionError", "unstable_rethrow", "Error", "ReadonlyURLSearchParams", "RedirectType", "ServerInsertedHTMLContext", "forbidden", "notFound", "permanentRedirect", "redirect", "unauthorized", "unstable_isUnrecognizedActionError", "unstable_rethrow", "useParams", "usePathname", "useRouter", "useSearchParams", "useSelectedLayoutSegment", "useSelectedLayoutSegments", "useServerInsertedHTML", "useDynamicRouteParams", "window", "require", "undefined", "useDynamicSearchParams", "searchParams", "useContext", "SearchParamsContext", "readonlySearchParams", "useMemo", "React", "navigationPromises", "use", "NavigationPromisesContext", "pathname", "PathnameContext", "router", "AppRouterContext", "Error", "params", "PathParamsContext", "parallelRouteKey", "context", "LayoutRouterContext", "promise", "selectedLayoutSegmentsPromises", "get", "getSelectedLayoutSegmentPath", "parentTree", "selectedLayoutSegments", "selectedLayoutSegmentPromises", "computeSelectedLayoutSegment", "require_navigation"]
}
