import mongoose from "mongoose";

// üß∫ Schema cho t·ª´ng m√≥n trong gi·ªè
const cartItemSchema = new mongoose.Schema({
    productId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "product",
        required: true,
    },
    quantity: {
        type: Number,
        default: 1,
        min: 1,
    },
    note: {
        type: String,
        default: "", // v√≠ d·ª•: ‚Äú√≠t cay‚Äù, ‚Äúkh√¥ng ƒë√°‚Äù
    }
}, { _id: false });

// üõí Schema ch√≠nh cho gi·ªè h√†ng
const cartSchema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "user",
        required: true,
    },

    items: [cartItemSchema],

    // üéüÔ∏è √Åp d·ª•ng voucher
    voucherId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "voucher",
        default: null,
    },
    voucherCode: {
        type: String,
        default: null,
    },

    // üíé T√≠ch ƒëi·ªÉm th∆∞·ªüng (n·∫øu c√≥ d√πng ƒëi·ªÉm khi thanh to√°n)
    redeemedPoints: {
        type: Number,
        default: 0,
        min: 0,
    },

    // üí∞ T·ªïng ti·ªÅn t·∫°m t√≠nh (ch∆∞a gi·∫£m)
    subtotal: {
        type: Number,
        default: 0,
        min: 0,
    },

    // üí∏ T·ªïng sau khi √°p d·ª•ng gi·∫£m gi√°
    total: {
        type: Number,
        default: 0,
        min: 0,
    },

    // ‚öôÔ∏è Tr·∫°ng th√°i gi·ªè (ACTIVE, CHECKED_OUT, EXPIRED)
    status: {
        type: String,
        enum: ["ACTIVE", "CHECKED_OUT", "EXPIRED"],
        default: "ACTIVE",
    }

}, { timestamps: true });


// üßÆ Middleware t·ª± ƒë·ªông t√≠nh subtotal & total
cartSchema.pre("save", async function (next) {
    if (!this.isModified("items") && !this.isModified("voucherId")) return next();

    // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m ƒë·ªÉ t√≠nh t·ªïng ti·ªÅn
    const Product = mongoose.model("product");
    const itemsWithPrice = await Promise.all(
        this.items.map(async item => {
            const product = await Product.findById(item.productId).select("price");
            return product ? product.price * item.quantity : 0;
        })
    );

    this.subtotal = itemsWithPrice.reduce((sum, val) => sum + val, 0);

    // N·∫øu c√≥ voucher, t√≠nh gi·∫£m gi√°
    if (this.voucherId) {
        const Voucher = mongoose.model("voucher");
        const voucher = await Voucher.findById(this.voucherId);
        if (voucher && voucher.isActive) {
            const discount = voucher.calculateDiscount(this.subtotal);
            this.total = Math.max(0, this.subtotal - discount);
        } else {
            this.total = this.subtotal;
        }
    } else {
        this.total = this.subtotal;
    }

    next();
});

const CartModel = mongoose.model("cart", cartSchema);

export default CartModel;
